// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: compute/v1/compute_power.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ComputePower_UploadScriptFile_FullMethodName            = "/api.compute.v1.ComputePower/UploadScriptFile"
	ComputePower_GetScriptList_FullMethodName               = "/api.compute.v1.ComputePower/GetScriptList"
	ComputePower_RunPythonPackage_FullMethodName            = "/api.compute.v1.ComputePower/RunPythonPackage"
	ComputePower_CancelExecPythonPackage_FullMethodName     = "/api.compute.v1.ComputePower/CancelExecPythonPackage"
	ComputePower_GetScriptInfo_FullMethodName               = "/api.compute.v1.ComputePower/GetScriptInfo"
	ComputePower_DownloadScriptExecuteResult_FullMethodName = "/api.compute.v1.ComputePower/DownloadScriptExecuteResult"
)

// ComputePowerClient is the client API for ComputePower service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComputePowerClient interface {
	// 上传脚本（http接口另外写）
	UploadScriptFile(ctx context.Context, in *UploadScriptFileRequest, opts ...grpc.CallOption) (*UploadScriptFileReply, error)
	// 查询脚本列表
	GetScriptList(ctx context.Context, in *GetScriptListRequest, opts ...grpc.CallOption) (*GetScriptListReply, error)
	// 执行脚本
	RunPythonPackage(ctx context.Context, in *RunPythonPackageServerRequest, opts ...grpc.CallOption) (*RunPythonPackageServerReply, error)
	// 取消执行
	CancelExecPythonPackage(ctx context.Context, in *CancelExecPythonPackageRequest, opts ...grpc.CallOption) (*CancelExecPythonPackageReply, error)
	// 通过id
	GetScriptInfo(ctx context.Context, in *GetScriptInfoRequest, opts ...grpc.CallOption) (*GetScriptInfoReply, error)
	// 下载执行结果（http接口另外写）
	DownloadScriptExecuteResult(ctx context.Context, in *DownloadScriptExecuteResultRequest, opts ...grpc.CallOption) (*DownloadScriptExecuteResultReply, error)
}

type computePowerClient struct {
	cc grpc.ClientConnInterface
}

func NewComputePowerClient(cc grpc.ClientConnInterface) ComputePowerClient {
	return &computePowerClient{cc}
}

func (c *computePowerClient) UploadScriptFile(ctx context.Context, in *UploadScriptFileRequest, opts ...grpc.CallOption) (*UploadScriptFileReply, error) {
	out := new(UploadScriptFileReply)
	err := c.cc.Invoke(ctx, ComputePower_UploadScriptFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computePowerClient) GetScriptList(ctx context.Context, in *GetScriptListRequest, opts ...grpc.CallOption) (*GetScriptListReply, error) {
	out := new(GetScriptListReply)
	err := c.cc.Invoke(ctx, ComputePower_GetScriptList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computePowerClient) RunPythonPackage(ctx context.Context, in *RunPythonPackageServerRequest, opts ...grpc.CallOption) (*RunPythonPackageServerReply, error) {
	out := new(RunPythonPackageServerReply)
	err := c.cc.Invoke(ctx, ComputePower_RunPythonPackage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computePowerClient) CancelExecPythonPackage(ctx context.Context, in *CancelExecPythonPackageRequest, opts ...grpc.CallOption) (*CancelExecPythonPackageReply, error) {
	out := new(CancelExecPythonPackageReply)
	err := c.cc.Invoke(ctx, ComputePower_CancelExecPythonPackage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computePowerClient) GetScriptInfo(ctx context.Context, in *GetScriptInfoRequest, opts ...grpc.CallOption) (*GetScriptInfoReply, error) {
	out := new(GetScriptInfoReply)
	err := c.cc.Invoke(ctx, ComputePower_GetScriptInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computePowerClient) DownloadScriptExecuteResult(ctx context.Context, in *DownloadScriptExecuteResultRequest, opts ...grpc.CallOption) (*DownloadScriptExecuteResultReply, error) {
	out := new(DownloadScriptExecuteResultReply)
	err := c.cc.Invoke(ctx, ComputePower_DownloadScriptExecuteResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComputePowerServer is the server API for ComputePower service.
// All implementations must embed UnimplementedComputePowerServer
// for forward compatibility
type ComputePowerServer interface {
	// 上传脚本（http接口另外写）
	UploadScriptFile(context.Context, *UploadScriptFileRequest) (*UploadScriptFileReply, error)
	// 查询脚本列表
	GetScriptList(context.Context, *GetScriptListRequest) (*GetScriptListReply, error)
	// 执行脚本
	RunPythonPackage(context.Context, *RunPythonPackageServerRequest) (*RunPythonPackageServerReply, error)
	// 取消执行
	CancelExecPythonPackage(context.Context, *CancelExecPythonPackageRequest) (*CancelExecPythonPackageReply, error)
	// 通过id
	GetScriptInfo(context.Context, *GetScriptInfoRequest) (*GetScriptInfoReply, error)
	// 下载执行结果（http接口另外写）
	DownloadScriptExecuteResult(context.Context, *DownloadScriptExecuteResultRequest) (*DownloadScriptExecuteResultReply, error)
	mustEmbedUnimplementedComputePowerServer()
}

// UnimplementedComputePowerServer must be embedded to have forward compatible implementations.
type UnimplementedComputePowerServer struct {
}

func (UnimplementedComputePowerServer) UploadScriptFile(context.Context, *UploadScriptFileRequest) (*UploadScriptFileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadScriptFile not implemented")
}
func (UnimplementedComputePowerServer) GetScriptList(context.Context, *GetScriptListRequest) (*GetScriptListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScriptList not implemented")
}
func (UnimplementedComputePowerServer) RunPythonPackage(context.Context, *RunPythonPackageServerRequest) (*RunPythonPackageServerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunPythonPackage not implemented")
}
func (UnimplementedComputePowerServer) CancelExecPythonPackage(context.Context, *CancelExecPythonPackageRequest) (*CancelExecPythonPackageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelExecPythonPackage not implemented")
}
func (UnimplementedComputePowerServer) GetScriptInfo(context.Context, *GetScriptInfoRequest) (*GetScriptInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScriptInfo not implemented")
}
func (UnimplementedComputePowerServer) DownloadScriptExecuteResult(context.Context, *DownloadScriptExecuteResultRequest) (*DownloadScriptExecuteResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadScriptExecuteResult not implemented")
}
func (UnimplementedComputePowerServer) mustEmbedUnimplementedComputePowerServer() {}

// UnsafeComputePowerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComputePowerServer will
// result in compilation errors.
type UnsafeComputePowerServer interface {
	mustEmbedUnimplementedComputePowerServer()
}

func RegisterComputePowerServer(s grpc.ServiceRegistrar, srv ComputePowerServer) {
	s.RegisterService(&ComputePower_ServiceDesc, srv)
}

func _ComputePower_UploadScriptFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadScriptFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputePowerServer).UploadScriptFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComputePower_UploadScriptFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputePowerServer).UploadScriptFile(ctx, req.(*UploadScriptFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComputePower_GetScriptList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScriptListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputePowerServer).GetScriptList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComputePower_GetScriptList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputePowerServer).GetScriptList(ctx, req.(*GetScriptListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComputePower_RunPythonPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunPythonPackageServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputePowerServer).RunPythonPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComputePower_RunPythonPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputePowerServer).RunPythonPackage(ctx, req.(*RunPythonPackageServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComputePower_CancelExecPythonPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelExecPythonPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputePowerServer).CancelExecPythonPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComputePower_CancelExecPythonPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputePowerServer).CancelExecPythonPackage(ctx, req.(*CancelExecPythonPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComputePower_GetScriptInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScriptInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputePowerServer).GetScriptInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComputePower_GetScriptInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputePowerServer).GetScriptInfo(ctx, req.(*GetScriptInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComputePower_DownloadScriptExecuteResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadScriptExecuteResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputePowerServer).DownloadScriptExecuteResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComputePower_DownloadScriptExecuteResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputePowerServer).DownloadScriptExecuteResult(ctx, req.(*DownloadScriptExecuteResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ComputePower_ServiceDesc is the grpc.ServiceDesc for ComputePower service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComputePower_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.compute.v1.ComputePower",
	HandlerType: (*ComputePowerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadScriptFile",
			Handler:    _ComputePower_UploadScriptFile_Handler,
		},
		{
			MethodName: "GetScriptList",
			Handler:    _ComputePower_GetScriptList_Handler,
		},
		{
			MethodName: "RunPythonPackage",
			Handler:    _ComputePower_RunPythonPackage_Handler,
		},
		{
			MethodName: "CancelExecPythonPackage",
			Handler:    _ComputePower_CancelExecPythonPackage_Handler,
		},
		{
			MethodName: "GetScriptInfo",
			Handler:    _ComputePower_GetScriptInfo_Handler,
		},
		{
			MethodName: "DownloadScriptExecuteResult",
			Handler:    _ComputePower_DownloadScriptExecuteResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "compute/v1/compute_power.proto",
}
