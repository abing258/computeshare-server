// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.23.2
// source: compute/v1/computepower.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationComputepowerRunBenchmarks = "/api.compute.v1.Computepower/RunBenchmarks"
const OperationComputepowerRunPythonPackage = "/api.compute.v1.Computepower/RunPythonPackage"

type ComputepowerHTTPServer interface {
	RunBenchmarks(context.Context, *RunBenchmarksRequest) (*RunBenchmarksReply, error)
	RunPythonPackage(context.Context, *RunPythonPackageRequest) (*RunPythonPackageReply, error)
}

func RegisterComputepowerHTTPServer(s *http.Server, srv ComputepowerHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/computepower/python", _Computepower_RunPythonPackage0_HTTP_Handler(srv))
	r.POST("/v1/computepower/benchmark", _Computepower_RunBenchmarks0_HTTP_Handler(srv))
}

func _Computepower_RunPythonPackage0_HTTP_Handler(srv ComputepowerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RunPythonPackageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationComputepowerRunPythonPackage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RunPythonPackage(ctx, req.(*RunPythonPackageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RunPythonPackageReply)
		return ctx.Result(200, reply)
	}
}

func _Computepower_RunBenchmarks0_HTTP_Handler(srv ComputepowerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RunBenchmarksRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationComputepowerRunBenchmarks)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RunBenchmarks(ctx, req.(*RunBenchmarksRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RunBenchmarksReply)
		return ctx.Result(200, reply)
	}
}

type ComputepowerHTTPClient interface {
	RunBenchmarks(ctx context.Context, req *RunBenchmarksRequest, opts ...http.CallOption) (rsp *RunBenchmarksReply, err error)
	RunPythonPackage(ctx context.Context, req *RunPythonPackageRequest, opts ...http.CallOption) (rsp *RunPythonPackageReply, err error)
}

type ComputepowerHTTPClientImpl struct {
	cc *http.Client
}

func NewComputepowerHTTPClient(client *http.Client) ComputepowerHTTPClient {
	return &ComputepowerHTTPClientImpl{client}
}

func (c *ComputepowerHTTPClientImpl) RunBenchmarks(ctx context.Context, in *RunBenchmarksRequest, opts ...http.CallOption) (*RunBenchmarksReply, error) {
	var out RunBenchmarksReply
	pattern := "/v1/computepower/benchmark"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationComputepowerRunBenchmarks))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ComputepowerHTTPClientImpl) RunPythonPackage(ctx context.Context, in *RunPythonPackageRequest, opts ...http.CallOption) (*RunPythonPackageReply, error) {
	var out RunPythonPackageReply
	pattern := "/v1/computepower/python"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationComputepowerRunPythonPackage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
