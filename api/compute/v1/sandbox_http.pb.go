// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.23.2
// source: api/compute/v1/sandbox.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSandboxCreateSandbox = "/api.server.compute.v1.Sandbox/CreateSandbox"

type SandboxHTTPServer interface {
	CreateSandbox(context.Context, *CreateSandboxRequest) (*CreateSandboxReply, error)
}

func RegisterSandboxHTTPServer(s *http.Server, srv SandboxHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/sandbox", _Sandbox_CreateSandbox0_HTTP_Handler(srv))
}

func _Sandbox_CreateSandbox0_HTTP_Handler(srv SandboxHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateSandboxRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSandboxCreateSandbox)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSandbox(ctx, req.(*CreateSandboxRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateSandboxReply)
		return ctx.Result(200, reply)
	}
}

type SandboxHTTPClient interface {
	CreateSandbox(ctx context.Context, req *CreateSandboxRequest, opts ...http.CallOption) (rsp *CreateSandboxReply, err error)
}

type SandboxHTTPClientImpl struct {
	cc *http.Client
}

func NewSandboxHTTPClient(client *http.Client) SandboxHTTPClient {
	return &SandboxHTTPClientImpl{client}
}

func (c *SandboxHTTPClientImpl) CreateSandbox(ctx context.Context, in *CreateSandboxRequest, opts ...http.CallOption) (*CreateSandboxReply, error) {
	var out CreateSandboxReply
	pattern := "/v1/sandbox"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSandboxCreateSandbox))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
