// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.23.2
// source: api/compute/v1/storage_provider.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationStorageProviderCreateStorageProvider = "/api.server.compute.v1.StorageProvider/CreateStorageProvider"
const OperationStorageProviderDeleteStorageProvider = "/api.server.compute.v1.StorageProvider/DeleteStorageProvider"
const OperationStorageProviderGetStorageProvider = "/api.server.compute.v1.StorageProvider/GetStorageProvider"
const OperationStorageProviderListStorageProvider = "/api.server.compute.v1.StorageProvider/ListStorageProvider"

type StorageProviderHTTPServer interface {
	CreateStorageProvider(context.Context, *CreateStorageProviderRequest) (*CreateStorageProviderReply, error)
	DeleteStorageProvider(context.Context, *DeleteStorageProviderRequest) (*DeleteStorageProviderReply, error)
	GetStorageProvider(context.Context, *GetStorageProviderRequest) (*GetStorageProviderReply, error)
	ListStorageProvider(context.Context, *ListStorageProviderRequest) (*ListStorageProviderReply, error)
}

func RegisterStorageProviderHTTPServer(s *http.Server, srv StorageProviderHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/storage_provider", _StorageProvider_CreateStorageProvider0_HTTP_Handler(srv))
	r.DELETE("/v1/storage_provider/{id}", _StorageProvider_DeleteStorageProvider0_HTTP_Handler(srv))
	r.GET("/v1/storage_provider/{id}", _StorageProvider_GetStorageProvider0_HTTP_Handler(srv))
	r.GET("/v1/storage_provider", _StorageProvider_ListStorageProvider0_HTTP_Handler(srv))
}

func _StorageProvider_CreateStorageProvider0_HTTP_Handler(srv StorageProviderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateStorageProviderRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStorageProviderCreateStorageProvider)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateStorageProvider(ctx, req.(*CreateStorageProviderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateStorageProviderReply)
		return ctx.Result(200, reply)
	}
}

func _StorageProvider_DeleteStorageProvider0_HTTP_Handler(srv StorageProviderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteStorageProviderRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStorageProviderDeleteStorageProvider)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteStorageProvider(ctx, req.(*DeleteStorageProviderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteStorageProviderReply)
		return ctx.Result(200, reply)
	}
}

func _StorageProvider_GetStorageProvider0_HTTP_Handler(srv StorageProviderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetStorageProviderRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStorageProviderGetStorageProvider)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetStorageProvider(ctx, req.(*GetStorageProviderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetStorageProviderReply)
		return ctx.Result(200, reply)
	}
}

func _StorageProvider_ListStorageProvider0_HTTP_Handler(srv StorageProviderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListStorageProviderRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStorageProviderListStorageProvider)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListStorageProvider(ctx, req.(*ListStorageProviderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListStorageProviderReply)
		return ctx.Result(200, reply)
	}
}

type StorageProviderHTTPClient interface {
	CreateStorageProvider(ctx context.Context, req *CreateStorageProviderRequest, opts ...http.CallOption) (rsp *CreateStorageProviderReply, err error)
	DeleteStorageProvider(ctx context.Context, req *DeleteStorageProviderRequest, opts ...http.CallOption) (rsp *DeleteStorageProviderReply, err error)
	GetStorageProvider(ctx context.Context, req *GetStorageProviderRequest, opts ...http.CallOption) (rsp *GetStorageProviderReply, err error)
	ListStorageProvider(ctx context.Context, req *ListStorageProviderRequest, opts ...http.CallOption) (rsp *ListStorageProviderReply, err error)
}

type StorageProviderHTTPClientImpl struct {
	cc *http.Client
}

func NewStorageProviderHTTPClient(client *http.Client) StorageProviderHTTPClient {
	return &StorageProviderHTTPClientImpl{client}
}

func (c *StorageProviderHTTPClientImpl) CreateStorageProvider(ctx context.Context, in *CreateStorageProviderRequest, opts ...http.CallOption) (*CreateStorageProviderReply, error) {
	var out CreateStorageProviderReply
	pattern := "/v1/storage_provider"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStorageProviderCreateStorageProvider))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *StorageProviderHTTPClientImpl) DeleteStorageProvider(ctx context.Context, in *DeleteStorageProviderRequest, opts ...http.CallOption) (*DeleteStorageProviderReply, error) {
	var out DeleteStorageProviderReply
	pattern := "/v1/storage_provider/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStorageProviderDeleteStorageProvider))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *StorageProviderHTTPClientImpl) GetStorageProvider(ctx context.Context, in *GetStorageProviderRequest, opts ...http.CallOption) (*GetStorageProviderReply, error) {
	var out GetStorageProviderReply
	pattern := "/v1/storage_provider/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStorageProviderGetStorageProvider))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *StorageProviderHTTPClientImpl) ListStorageProvider(ctx context.Context, in *ListStorageProviderRequest, opts ...http.CallOption) (*ListStorageProviderReply, error) {
	var out ListStorageProviderReply
	pattern := "/v1/storage_provider"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStorageProviderListStorageProvider))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
