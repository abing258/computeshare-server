// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.2
// source: api/compute/v1/storage_s3.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateS3KeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateS3KeyRequest) Reset() {
	*x = CreateS3KeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_compute_v1_storage_s3_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateS3KeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateS3KeyRequest) ProtoMessage() {}

func (x *CreateS3KeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_compute_v1_storage_s3_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateS3KeyRequest.ProtoReflect.Descriptor instead.
func (*CreateS3KeyRequest) Descriptor() ([]byte, []int) {
	return file_api_compute_v1_storage_s3_proto_rawDescGZIP(), []int{0}
}

type CreateS3KeyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateS3KeyReply) Reset() {
	*x = CreateS3KeyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_compute_v1_storage_s3_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateS3KeyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateS3KeyReply) ProtoMessage() {}

func (x *CreateS3KeyReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_compute_v1_storage_s3_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateS3KeyReply.ProtoReflect.Descriptor instead.
func (*CreateS3KeyReply) Descriptor() ([]byte, []int) {
	return file_api_compute_v1_storage_s3_proto_rawDescGZIP(), []int{1}
}

func (x *CreateS3KeyReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateS3KeyReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type S3User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AccessKey  string `protobuf:"bytes,2,opt,name=accessKey,proto3" json:"accessKey,omitempty"`
	SecretKey  string `protobuf:"bytes,3,opt,name=secretKey,proto3" json:"secretKey,omitempty"`
	CreateTime int64  `protobuf:"varint,4,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime int64  `protobuf:"varint,5,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Endpoint   string `protobuf:"bytes,6,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *S3User) Reset() {
	*x = S3User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_compute_v1_storage_s3_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3User) ProtoMessage() {}

func (x *S3User) ProtoReflect() protoreflect.Message {
	mi := &file_api_compute_v1_storage_s3_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3User.ProtoReflect.Descriptor instead.
func (*S3User) Descriptor() ([]byte, []int) {
	return file_api_compute_v1_storage_s3_proto_rawDescGZIP(), []int{2}
}

func (x *S3User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *S3User) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *S3User) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *S3User) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *S3User) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *S3User) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

type GetUserS3UserListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetUserS3UserListRequest) Reset() {
	*x = GetUserS3UserListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_compute_v1_storage_s3_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserS3UserListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserS3UserListRequest) ProtoMessage() {}

func (x *GetUserS3UserListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_compute_v1_storage_s3_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserS3UserListRequest.ProtoReflect.Descriptor instead.
func (*GetUserS3UserListRequest) Descriptor() ([]byte, []int) {
	return file_api_compute_v1_storage_s3_proto_rawDescGZIP(), []int{3}
}

type GetUserS3UserListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*S3User `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetUserS3UserListReply) Reset() {
	*x = GetUserS3UserListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_compute_v1_storage_s3_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserS3UserListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserS3UserListReply) ProtoMessage() {}

func (x *GetUserS3UserListReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_compute_v1_storage_s3_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserS3UserListReply.ProtoReflect.Descriptor instead.
func (*GetUserS3UserListReply) Descriptor() ([]byte, []int) {
	return file_api_compute_v1_storage_s3_proto_rawDescGZIP(), []int{4}
}

func (x *GetUserS3UserListReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetUserS3UserListReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetUserS3UserListReply) GetData() []*S3User {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetUserS3UserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CountryCallCoding string `protobuf:"bytes,2,opt,name=countryCallCoding,proto3" json:"countryCallCoding,omitempty"`
	TelephoneNumber   string `protobuf:"bytes,3,opt,name=telephoneNumber,proto3" json:"telephoneNumber,omitempty"`
	ValidateCode      string `protobuf:"bytes,4,opt,name=validateCode,proto3" json:"validateCode,omitempty"`
}

func (x *GetUserS3UserRequest) Reset() {
	*x = GetUserS3UserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_compute_v1_storage_s3_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserS3UserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserS3UserRequest) ProtoMessage() {}

func (x *GetUserS3UserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_compute_v1_storage_s3_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserS3UserRequest.ProtoReflect.Descriptor instead.
func (*GetUserS3UserRequest) Descriptor() ([]byte, []int) {
	return file_api_compute_v1_storage_s3_proto_rawDescGZIP(), []int{5}
}

func (x *GetUserS3UserRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetUserS3UserRequest) GetCountryCallCoding() string {
	if x != nil {
		return x.CountryCallCoding
	}
	return ""
}

func (x *GetUserS3UserRequest) GetTelephoneNumber() string {
	if x != nil {
		return x.TelephoneNumber
	}
	return ""
}

func (x *GetUserS3UserRequest) GetValidateCode() string {
	if x != nil {
		return x.ValidateCode
	}
	return ""
}

type GetUserS3UserReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *S3User `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetUserS3UserReply) Reset() {
	*x = GetUserS3UserReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_compute_v1_storage_s3_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserS3UserReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserS3UserReply) ProtoMessage() {}

func (x *GetUserS3UserReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_compute_v1_storage_s3_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserS3UserReply.ProtoReflect.Descriptor instead.
func (*GetUserS3UserReply) Descriptor() ([]byte, []int) {
	return file_api_compute_v1_storage_s3_proto_rawDescGZIP(), []int{6}
}

func (x *GetUserS3UserReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetUserS3UserReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetUserS3UserReply) GetData() *S3User {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteUserS3UserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CountryCallCoding string `protobuf:"bytes,2,opt,name=countryCallCoding,proto3" json:"countryCallCoding,omitempty"`
	TelephoneNumber   string `protobuf:"bytes,3,opt,name=telephoneNumber,proto3" json:"telephoneNumber,omitempty"`
	ValidateCode      string `protobuf:"bytes,4,opt,name=validateCode,proto3" json:"validateCode,omitempty"`
}

func (x *DeleteUserS3UserRequest) Reset() {
	*x = DeleteUserS3UserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_compute_v1_storage_s3_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserS3UserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserS3UserRequest) ProtoMessage() {}

func (x *DeleteUserS3UserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_compute_v1_storage_s3_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserS3UserRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserS3UserRequest) Descriptor() ([]byte, []int) {
	return file_api_compute_v1_storage_s3_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteUserS3UserRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteUserS3UserRequest) GetCountryCallCoding() string {
	if x != nil {
		return x.CountryCallCoding
	}
	return ""
}

func (x *DeleteUserS3UserRequest) GetTelephoneNumber() string {
	if x != nil {
		return x.TelephoneNumber
	}
	return ""
}

func (x *DeleteUserS3UserRequest) GetValidateCode() string {
	if x != nil {
		return x.ValidateCode
	}
	return ""
}

type DeleteUserS3UserReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteUserS3UserReply) Reset() {
	*x = DeleteUserS3UserReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_compute_v1_storage_s3_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserS3UserReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserS3UserReply) ProtoMessage() {}

func (x *DeleteUserS3UserReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_compute_v1_storage_s3_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserS3UserReply.ProtoReflect.Descriptor instead.
func (*DeleteUserS3UserReply) Descriptor() ([]byte, []int) {
	return file_api_compute_v1_storage_s3_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteUserS3UserReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteUserS3UserReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CreateBucketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketName string `protobuf:"bytes,1,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
}

func (x *CreateBucketRequest) Reset() {
	*x = CreateBucketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_compute_v1_storage_s3_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBucketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBucketRequest) ProtoMessage() {}

func (x *CreateBucketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_compute_v1_storage_s3_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBucketRequest.ProtoReflect.Descriptor instead.
func (*CreateBucketRequest) Descriptor() ([]byte, []int) {
	return file_api_compute_v1_storage_s3_proto_rawDescGZIP(), []int{9}
}

func (x *CreateBucketRequest) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

type CreateBucketReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"` // bucket id
}

func (x *CreateBucketReply) Reset() {
	*x = CreateBucketReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_compute_v1_storage_s3_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBucketReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBucketReply) ProtoMessage() {}

func (x *CreateBucketReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_compute_v1_storage_s3_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBucketReply.ProtoReflect.Descriptor instead.
func (*CreateBucketReply) Descriptor() ([]byte, []int) {
	return file_api_compute_v1_storage_s3_proto_rawDescGZIP(), []int{10}
}

func (x *CreateBucketReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateBucketReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateBucketReply) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type DeleteBucketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketName string `protobuf:"bytes,1,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
}

func (x *DeleteBucketRequest) Reset() {
	*x = DeleteBucketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_compute_v1_storage_s3_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBucketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBucketRequest) ProtoMessage() {}

func (x *DeleteBucketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_compute_v1_storage_s3_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBucketRequest.ProtoReflect.Descriptor instead.
func (*DeleteBucketRequest) Descriptor() ([]byte, []int) {
	return file_api_compute_v1_storage_s3_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteBucketRequest) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

type DeleteBucketReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteBucketReply) Reset() {
	*x = DeleteBucketReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_compute_v1_storage_s3_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBucketReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBucketReply) ProtoMessage() {}

func (x *DeleteBucketReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_compute_v1_storage_s3_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBucketReply.ProtoReflect.Descriptor instead.
func (*DeleteBucketReply) Descriptor() ([]byte, []int) {
	return file_api_compute_v1_storage_s3_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteBucketReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteBucketReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type EmptyBucketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketName string `protobuf:"bytes,1,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
}

func (x *EmptyBucketRequest) Reset() {
	*x = EmptyBucketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_compute_v1_storage_s3_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyBucketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyBucketRequest) ProtoMessage() {}

func (x *EmptyBucketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_compute_v1_storage_s3_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyBucketRequest.ProtoReflect.Descriptor instead.
func (*EmptyBucketRequest) Descriptor() ([]byte, []int) {
	return file_api_compute_v1_storage_s3_proto_rawDescGZIP(), []int{13}
}

func (x *EmptyBucketRequest) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

type EmptyBucketReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *EmptyBucketReply) Reset() {
	*x = EmptyBucketReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_compute_v1_storage_s3_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyBucketReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyBucketReply) ProtoMessage() {}

func (x *EmptyBucketReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_compute_v1_storage_s3_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyBucketReply.ProtoReflect.Descriptor instead.
func (*EmptyBucketReply) Descriptor() ([]byte, []int) {
	return file_api_compute_v1_storage_s3_proto_rawDescGZIP(), []int{14}
}

func (x *EmptyBucketReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *EmptyBucketReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ListBucketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page int32  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size int32  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ListBucketRequest) Reset() {
	*x = ListBucketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_compute_v1_storage_s3_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBucketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBucketRequest) ProtoMessage() {}

func (x *ListBucketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_compute_v1_storage_s3_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBucketRequest.ProtoReflect.Descriptor instead.
func (*ListBucketRequest) Descriptor() ([]byte, []int) {
	return file_api_compute_v1_storage_s3_proto_rawDescGZIP(), []int{15}
}

func (x *ListBucketRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListBucketRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListBucketRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListBucketReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string                `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *ListBucketReply_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ListBucketReply) Reset() {
	*x = ListBucketReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_compute_v1_storage_s3_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBucketReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBucketReply) ProtoMessage() {}

func (x *ListBucketReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_compute_v1_storage_s3_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBucketReply.ProtoReflect.Descriptor instead.
func (*ListBucketReply) Descriptor() ([]byte, []int) {
	return file_api_compute_v1_storage_s3_proto_rawDescGZIP(), []int{16}
}

func (x *ListBucketReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListBucketReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListBucketReply) GetData() *ListBucketReply_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type S3Object struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Etag       string `protobuf:"bytes,1,opt,name=etag,proto3" json:"etag,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	S3Url      string `protobuf:"bytes,4,opt,name=s3Url,proto3" json:"s3Url,omitempty"`
	Url        string `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	Size       int32  `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	LastModify int64  `protobuf:"varint,7,opt,name=last_modify,json=lastModify,proto3" json:"last_modify,omitempty"`
	Prefix     string `protobuf:"bytes,8,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *S3Object) Reset() {
	*x = S3Object{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_compute_v1_storage_s3_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3Object) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3Object) ProtoMessage() {}

func (x *S3Object) ProtoReflect() protoreflect.Message {
	mi := &file_api_compute_v1_storage_s3_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3Object.ProtoReflect.Descriptor instead.
func (*S3Object) Descriptor() ([]byte, []int) {
	return file_api_compute_v1_storage_s3_proto_rawDescGZIP(), []int{17}
}

func (x *S3Object) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *S3Object) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *S3Object) GetS3Url() string {
	if x != nil {
		return x.S3Url
	}
	return ""
}

func (x *S3Object) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *S3Object) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *S3Object) GetLastModify() int64 {
	if x != nil {
		return x.LastModify
	}
	return 0
}

func (x *S3Object) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

type S3StorageInBucketListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketName string `protobuf:"bytes,1,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
	Prefix     string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Page       int32  `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Size       int32  `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *S3StorageInBucketListRequest) Reset() {
	*x = S3StorageInBucketListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_compute_v1_storage_s3_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3StorageInBucketListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3StorageInBucketListRequest) ProtoMessage() {}

func (x *S3StorageInBucketListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_compute_v1_storage_s3_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3StorageInBucketListRequest.ProtoReflect.Descriptor instead.
func (*S3StorageInBucketListRequest) Descriptor() ([]byte, []int) {
	return file_api_compute_v1_storage_s3_proto_rawDescGZIP(), []int{18}
}

func (x *S3StorageInBucketListRequest) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *S3StorageInBucketListRequest) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *S3StorageInBucketListRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *S3StorageInBucketListRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *S3StorageInBucketListRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type S3StorageInBucketListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string                           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *S3StorageInBucketListReply_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *S3StorageInBucketListReply) Reset() {
	*x = S3StorageInBucketListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_compute_v1_storage_s3_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3StorageInBucketListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3StorageInBucketListReply) ProtoMessage() {}

func (x *S3StorageInBucketListReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_compute_v1_storage_s3_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3StorageInBucketListReply.ProtoReflect.Descriptor instead.
func (*S3StorageInBucketListReply) Descriptor() ([]byte, []int) {
	return file_api_compute_v1_storage_s3_proto_rawDescGZIP(), []int{19}
}

func (x *S3StorageInBucketListReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *S3StorageInBucketListReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *S3StorageInBucketListReply) GetData() *S3StorageInBucketListReply_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type S3StorageMkdirRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketName string `protobuf:"bytes,1,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
	DirName    string `protobuf:"bytes,2,opt,name=dirName,proto3" json:"dirName,omitempty"`
	Prefix     string `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *S3StorageMkdirRequest) Reset() {
	*x = S3StorageMkdirRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_compute_v1_storage_s3_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3StorageMkdirRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3StorageMkdirRequest) ProtoMessage() {}

func (x *S3StorageMkdirRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_compute_v1_storage_s3_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3StorageMkdirRequest.ProtoReflect.Descriptor instead.
func (*S3StorageMkdirRequest) Descriptor() ([]byte, []int) {
	return file_api_compute_v1_storage_s3_proto_rawDescGZIP(), []int{20}
}

func (x *S3StorageMkdirRequest) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *S3StorageMkdirRequest) GetDirName() string {
	if x != nil {
		return x.DirName
	}
	return ""
}

func (x *S3StorageMkdirRequest) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

type S3StorageMkdirReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *S3StorageMkdirReply) Reset() {
	*x = S3StorageMkdirReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_compute_v1_storage_s3_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3StorageMkdirReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3StorageMkdirReply) ProtoMessage() {}

func (x *S3StorageMkdirReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_compute_v1_storage_s3_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3StorageMkdirReply.ProtoReflect.Descriptor instead.
func (*S3StorageMkdirReply) Descriptor() ([]byte, []int) {
	return file_api_compute_v1_storage_s3_proto_rawDescGZIP(), []int{21}
}

func (x *S3StorageMkdirReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *S3StorageMkdirReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *S3StorageMkdirReply) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type S3StorageDeleteMkdirRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketName string `protobuf:"bytes,1,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
	DirName    string `protobuf:"bytes,2,opt,name=dirName,proto3" json:"dirName,omitempty"`
	Prefix     string `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *S3StorageDeleteMkdirRequest) Reset() {
	*x = S3StorageDeleteMkdirRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_compute_v1_storage_s3_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3StorageDeleteMkdirRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3StorageDeleteMkdirRequest) ProtoMessage() {}

func (x *S3StorageDeleteMkdirRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_compute_v1_storage_s3_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3StorageDeleteMkdirRequest.ProtoReflect.Descriptor instead.
func (*S3StorageDeleteMkdirRequest) Descriptor() ([]byte, []int) {
	return file_api_compute_v1_storage_s3_proto_rawDescGZIP(), []int{22}
}

func (x *S3StorageDeleteMkdirRequest) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *S3StorageDeleteMkdirRequest) GetDirName() string {
	if x != nil {
		return x.DirName
	}
	return ""
}

func (x *S3StorageDeleteMkdirRequest) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

type S3StorageDeleteMkdirReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *S3StorageDeleteMkdirReply) Reset() {
	*x = S3StorageDeleteMkdirReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_compute_v1_storage_s3_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3StorageDeleteMkdirReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3StorageDeleteMkdirReply) ProtoMessage() {}

func (x *S3StorageDeleteMkdirReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_compute_v1_storage_s3_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3StorageDeleteMkdirReply.ProtoReflect.Descriptor instead.
func (*S3StorageDeleteMkdirReply) Descriptor() ([]byte, []int) {
	return file_api_compute_v1_storage_s3_proto_rawDescGZIP(), []int{23}
}

func (x *S3StorageDeleteMkdirReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *S3StorageDeleteMkdirReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type S3StorageUploadFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body       []byte `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	Prefix     string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	FileName   string `protobuf:"bytes,3,opt,name=fileName,proto3" json:"fileName,omitempty"`
	BucketName string `protobuf:"bytes,4,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
}

func (x *S3StorageUploadFileRequest) Reset() {
	*x = S3StorageUploadFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_compute_v1_storage_s3_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3StorageUploadFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3StorageUploadFileRequest) ProtoMessage() {}

func (x *S3StorageUploadFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_compute_v1_storage_s3_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3StorageUploadFileRequest.ProtoReflect.Descriptor instead.
func (*S3StorageUploadFileRequest) Descriptor() ([]byte, []int) {
	return file_api_compute_v1_storage_s3_proto_rawDescGZIP(), []int{24}
}

func (x *S3StorageUploadFileRequest) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *S3StorageUploadFileRequest) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *S3StorageUploadFileRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *S3StorageUploadFileRequest) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

type S3StorageUploadFileReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *S3Object `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *S3StorageUploadFileReply) Reset() {
	*x = S3StorageUploadFileReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_compute_v1_storage_s3_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3StorageUploadFileReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3StorageUploadFileReply) ProtoMessage() {}

func (x *S3StorageUploadFileReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_compute_v1_storage_s3_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3StorageUploadFileReply.ProtoReflect.Descriptor instead.
func (*S3StorageUploadFileReply) Descriptor() ([]byte, []int) {
	return file_api_compute_v1_storage_s3_proto_rawDescGZIP(), []int{25}
}

func (x *S3StorageUploadFileReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *S3StorageUploadFileReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *S3StorageUploadFileReply) GetData() *S3Object {
	if x != nil {
		return x.Data
	}
	return nil
}

type S3StorageDownloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketName string `protobuf:"bytes,1,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
	Key        string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *S3StorageDownloadRequest) Reset() {
	*x = S3StorageDownloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_compute_v1_storage_s3_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3StorageDownloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3StorageDownloadRequest) ProtoMessage() {}

func (x *S3StorageDownloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_compute_v1_storage_s3_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3StorageDownloadRequest.ProtoReflect.Descriptor instead.
func (*S3StorageDownloadRequest) Descriptor() ([]byte, []int) {
	return file_api_compute_v1_storage_s3_proto_rawDescGZIP(), []int{26}
}

func (x *S3StorageDownloadRequest) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *S3StorageDownloadRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type S3StorageDownloadReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string                       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *S3StorageDownloadReply_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *S3StorageDownloadReply) Reset() {
	*x = S3StorageDownloadReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_compute_v1_storage_s3_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3StorageDownloadReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3StorageDownloadReply) ProtoMessage() {}

func (x *S3StorageDownloadReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_compute_v1_storage_s3_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3StorageDownloadReply.ProtoReflect.Descriptor instead.
func (*S3StorageDownloadReply) Descriptor() ([]byte, []int) {
	return file_api_compute_v1_storage_s3_proto_rawDescGZIP(), []int{27}
}

func (x *S3StorageDownloadReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *S3StorageDownloadReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *S3StorageDownloadReply) GetData() *S3StorageDownloadReply_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type S3StorageDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketName string `protobuf:"bytes,1,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
	Key        string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *S3StorageDeleteRequest) Reset() {
	*x = S3StorageDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_compute_v1_storage_s3_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3StorageDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3StorageDeleteRequest) ProtoMessage() {}

func (x *S3StorageDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_compute_v1_storage_s3_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3StorageDeleteRequest.ProtoReflect.Descriptor instead.
func (*S3StorageDeleteRequest) Descriptor() ([]byte, []int) {
	return file_api_compute_v1_storage_s3_proto_rawDescGZIP(), []int{28}
}

func (x *S3StorageDeleteRequest) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *S3StorageDeleteRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type S3StorageDeleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *S3StorageDeleteReply) Reset() {
	*x = S3StorageDeleteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_compute_v1_storage_s3_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3StorageDeleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3StorageDeleteReply) ProtoMessage() {}

func (x *S3StorageDeleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_compute_v1_storage_s3_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3StorageDeleteReply.ProtoReflect.Descriptor instead.
func (*S3StorageDeleteReply) Descriptor() ([]byte, []int) {
	return file_api_compute_v1_storage_s3_proto_rawDescGZIP(), []int{29}
}

func (x *S3StorageDeleteReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *S3StorageDeleteReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ListBucketReply_BucketVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Bucket      string `protobuf:"bytes,2,opt,name=bucket,proto3" json:"bucket,omitempty"`
	CreatedTime int64  `protobuf:"varint,3,opt,name=createdTime,proto3" json:"createdTime,omitempty"`
}

func (x *ListBucketReply_BucketVo) Reset() {
	*x = ListBucketReply_BucketVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_compute_v1_storage_s3_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBucketReply_BucketVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBucketReply_BucketVo) ProtoMessage() {}

func (x *ListBucketReply_BucketVo) ProtoReflect() protoreflect.Message {
	mi := &file_api_compute_v1_storage_s3_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBucketReply_BucketVo.ProtoReflect.Descriptor instead.
func (*ListBucketReply_BucketVo) Descriptor() ([]byte, []int) {
	return file_api_compute_v1_storage_s3_proto_rawDescGZIP(), []int{16, 0}
}

func (x *ListBucketReply_BucketVo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListBucketReply_BucketVo) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *ListBucketReply_BucketVo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

type ListBucketReply_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*ListBucketReply_BucketVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int32                       `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Page  int32                       `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Size  int32                       `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ListBucketReply_Data) Reset() {
	*x = ListBucketReply_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_compute_v1_storage_s3_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBucketReply_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBucketReply_Data) ProtoMessage() {}

func (x *ListBucketReply_Data) ProtoReflect() protoreflect.Message {
	mi := &file_api_compute_v1_storage_s3_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBucketReply_Data.ProtoReflect.Descriptor instead.
func (*ListBucketReply_Data) Descriptor() ([]byte, []int) {
	return file_api_compute_v1_storage_s3_proto_rawDescGZIP(), []int{16, 1}
}

func (x *ListBucketReply_Data) GetList() []*ListBucketReply_BucketVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListBucketReply_Data) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListBucketReply_Data) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListBucketReply_Data) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type S3StorageInBucketListReply_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*S3Object `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int32       `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Page  int32       `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Size  int32       `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *S3StorageInBucketListReply_Data) Reset() {
	*x = S3StorageInBucketListReply_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_compute_v1_storage_s3_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3StorageInBucketListReply_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3StorageInBucketListReply_Data) ProtoMessage() {}

func (x *S3StorageInBucketListReply_Data) ProtoReflect() protoreflect.Message {
	mi := &file_api_compute_v1_storage_s3_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3StorageInBucketListReply_Data.ProtoReflect.Descriptor instead.
func (*S3StorageInBucketListReply_Data) Descriptor() ([]byte, []int) {
	return file_api_compute_v1_storage_s3_proto_rawDescGZIP(), []int{19, 0}
}

func (x *S3StorageInBucketListReply_Data) GetList() []*S3Object {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *S3StorageInBucketListReply_Data) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *S3StorageInBucketListReply_Data) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *S3StorageInBucketListReply_Data) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type S3StorageDownloadReply_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body []byte `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *S3StorageDownloadReply_Data) Reset() {
	*x = S3StorageDownloadReply_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_compute_v1_storage_s3_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3StorageDownloadReply_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3StorageDownloadReply_Data) ProtoMessage() {}

func (x *S3StorageDownloadReply_Data) ProtoReflect() protoreflect.Message {
	mi := &file_api_compute_v1_storage_s3_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3StorageDownloadReply_Data.ProtoReflect.Descriptor instead.
func (*S3StorageDownloadReply_Data) Descriptor() ([]byte, []int) {
	return file_api_compute_v1_storage_s3_proto_rawDescGZIP(), []int{27, 0}
}

func (x *S3StorageDownloadReply_Data) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *S3StorageDownloadReply_Data) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_api_compute_v1_storage_s3_proto protoreflect.FileDescriptor

var file_api_compute_v1_storage_s3_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x15, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x33, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x40, 0x0a, 0x10,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x33, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb0,
	0x01, 0x0a, 0x06, 0x53, 0x33, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x22, 0x1a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x33, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x79, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x33, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x33, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa2, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x33, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x61, 0x6c, 0x6c,
	0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x28, 0x0a, 0x0f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x75, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x33, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x33, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xa5, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x33, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x43,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x28,
	0x0a, 0x0f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x45, 0x0a, 0x15,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x33, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x35, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x55, 0x0a, 0x11, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x35, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x41, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x34, 0x0a, 0x12, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x40, 0x0a, 0x10, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x4f, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe2, 0x02, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x54, 0x0a, 0x08, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x89, 0x01,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x08, 0x53, 0x33,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x33, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x33, 0x55, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x22, 0x92, 0x01, 0x0a, 0x1c, 0x53, 0x33, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x91, 0x02, 0x0a, 0x1a, 0x53, 0x33, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x33, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0x79, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x33, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x69, 0x0a, 0x15,
	0x53, 0x33, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x57, 0x0a, 0x13, 0x53, 0x33, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x6f, 0x0a, 0x1b, 0x53, 0x33, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x69, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x64, 0x69, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x22, 0x49, 0x0a, 0x19, 0x53, 0x33, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x84, 0x01, 0x0a,
	0x1a, 0x53, 0x33, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x7d, 0x0a, 0x18, 0x53, 0x33, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x33, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x4c, 0x0a, 0x18, 0x53, 0x33, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x22, 0xbe, 0x01, 0x0a, 0x16, 0x53, 0x33, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x33, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0x2e, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x4a, 0x0a, 0x16, 0x53, 0x33, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x44, 0x0a,
	0x14, 0x53, 0x33, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x32, 0xaa, 0x10, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53,
	0x33, 0x12, 0x83, 0x01, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x33, 0x4b, 0x65,
	0x79, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x33, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x33, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a,
	0x22, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x33, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x2f, 0x6b, 0x65, 0x79, 0x12, 0x87, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x33, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x33, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x33,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x12, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x33, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x80, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x33, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x33, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x33, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x17, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x33, 0x75, 0x73, 0x65, 0x72, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x12, 0x89, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x33, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x33, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x33, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x2a,
	0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x33, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0x7d, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x3a, 0x01,
	0x2a, 0x22, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x33, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x87, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x2a, 0x19,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x33, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x7b, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x8a, 0x01, 0x0a, 0x0b, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x27, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x21, 0x2a, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x33, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x2f, 0x7b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x7d,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x74, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x33, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0xaa, 0x01, 0x0a,
	0x15, 0x53, 0x33, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x33, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x33, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x29,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x33, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x2f, 0x7b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x7d, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0xb4, 0x01, 0x0a, 0x13, 0x53, 0x33,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x33, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x33, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a, 0x01, 0x2a,
	0x22, 0x2e, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x7b, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2f, 0x65, 0x72, 0x73, 0x61, 0x74, 0x7a,
	0x12, 0x95, 0x01, 0x0a, 0x0e, 0x53, 0x33, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x6b,
	0x64, 0x69, 0x72, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x33, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x33, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x29, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x7b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x7d, 0x2f, 0x6d, 0x6b, 0x64, 0x69, 0x72, 0x12, 0xa4, 0x01, 0x0a, 0x14, 0x53, 0x33, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6b, 0x64, 0x69,
	0x72, 0x12, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x33, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x33,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6b, 0x64,
	0x69, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x2a,
	0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x7b, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x6d, 0x6b, 0x64, 0x69, 0x72, 0x12,
	0xad, 0x01, 0x0a, 0x11, 0x53, 0x33, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x33,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x33, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12, 0x30, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x7b, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x2f, 0x65, 0x72, 0x73, 0x61, 0x74, 0x7a, 0x12,
	0x9e, 0x01, 0x0a, 0x0f, 0x53, 0x33, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x33, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x33, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x2a, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2f, 0x7b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x7d, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x42, 0x4f, 0x0a, 0x0e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x50, 0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6d, 0x6f, 0x68, 0x61, 0x69, 0x6a, 0x69, 0x61, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_compute_v1_storage_s3_proto_rawDescOnce sync.Once
	file_api_compute_v1_storage_s3_proto_rawDescData = file_api_compute_v1_storage_s3_proto_rawDesc
)

func file_api_compute_v1_storage_s3_proto_rawDescGZIP() []byte {
	file_api_compute_v1_storage_s3_proto_rawDescOnce.Do(func() {
		file_api_compute_v1_storage_s3_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_compute_v1_storage_s3_proto_rawDescData)
	})
	return file_api_compute_v1_storage_s3_proto_rawDescData
}

var file_api_compute_v1_storage_s3_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_api_compute_v1_storage_s3_proto_goTypes = []interface{}{
	(*CreateS3KeyRequest)(nil),              // 0: api.server.compute.v1.CreateS3KeyRequest
	(*CreateS3KeyReply)(nil),                // 1: api.server.compute.v1.CreateS3KeyReply
	(*S3User)(nil),                          // 2: api.server.compute.v1.S3User
	(*GetUserS3UserListRequest)(nil),        // 3: api.server.compute.v1.GetUserS3UserListRequest
	(*GetUserS3UserListReply)(nil),          // 4: api.server.compute.v1.GetUserS3UserListReply
	(*GetUserS3UserRequest)(nil),            // 5: api.server.compute.v1.GetUserS3UserRequest
	(*GetUserS3UserReply)(nil),              // 6: api.server.compute.v1.GetUserS3UserReply
	(*DeleteUserS3UserRequest)(nil),         // 7: api.server.compute.v1.DeleteUserS3UserRequest
	(*DeleteUserS3UserReply)(nil),           // 8: api.server.compute.v1.DeleteUserS3UserReply
	(*CreateBucketRequest)(nil),             // 9: api.server.compute.v1.CreateBucketRequest
	(*CreateBucketReply)(nil),               // 10: api.server.compute.v1.CreateBucketReply
	(*DeleteBucketRequest)(nil),             // 11: api.server.compute.v1.DeleteBucketRequest
	(*DeleteBucketReply)(nil),               // 12: api.server.compute.v1.DeleteBucketReply
	(*EmptyBucketRequest)(nil),              // 13: api.server.compute.v1.EmptyBucketRequest
	(*EmptyBucketReply)(nil),                // 14: api.server.compute.v1.EmptyBucketReply
	(*ListBucketRequest)(nil),               // 15: api.server.compute.v1.ListBucketRequest
	(*ListBucketReply)(nil),                 // 16: api.server.compute.v1.ListBucketReply
	(*S3Object)(nil),                        // 17: api.server.compute.v1.S3Object
	(*S3StorageInBucketListRequest)(nil),    // 18: api.server.compute.v1.S3StorageInBucketListRequest
	(*S3StorageInBucketListReply)(nil),      // 19: api.server.compute.v1.S3StorageInBucketListReply
	(*S3StorageMkdirRequest)(nil),           // 20: api.server.compute.v1.S3StorageMkdirRequest
	(*S3StorageMkdirReply)(nil),             // 21: api.server.compute.v1.S3StorageMkdirReply
	(*S3StorageDeleteMkdirRequest)(nil),     // 22: api.server.compute.v1.S3StorageDeleteMkdirRequest
	(*S3StorageDeleteMkdirReply)(nil),       // 23: api.server.compute.v1.S3StorageDeleteMkdirReply
	(*S3StorageUploadFileRequest)(nil),      // 24: api.server.compute.v1.S3StorageUploadFileRequest
	(*S3StorageUploadFileReply)(nil),        // 25: api.server.compute.v1.S3StorageUploadFileReply
	(*S3StorageDownloadRequest)(nil),        // 26: api.server.compute.v1.S3StorageDownloadRequest
	(*S3StorageDownloadReply)(nil),          // 27: api.server.compute.v1.S3StorageDownloadReply
	(*S3StorageDeleteRequest)(nil),          // 28: api.server.compute.v1.S3StorageDeleteRequest
	(*S3StorageDeleteReply)(nil),            // 29: api.server.compute.v1.S3StorageDeleteReply
	(*ListBucketReply_BucketVo)(nil),        // 30: api.server.compute.v1.ListBucketReply.BucketVo
	(*ListBucketReply_Data)(nil),            // 31: api.server.compute.v1.ListBucketReply.Data
	(*S3StorageInBucketListReply_Data)(nil), // 32: api.server.compute.v1.S3StorageInBucketListReply.Data
	(*S3StorageDownloadReply_Data)(nil),     // 33: api.server.compute.v1.S3StorageDownloadReply.Data
}
var file_api_compute_v1_storage_s3_proto_depIdxs = []int32{
	2,  // 0: api.server.compute.v1.GetUserS3UserListReply.data:type_name -> api.server.compute.v1.S3User
	2,  // 1: api.server.compute.v1.GetUserS3UserReply.data:type_name -> api.server.compute.v1.S3User
	31, // 2: api.server.compute.v1.ListBucketReply.data:type_name -> api.server.compute.v1.ListBucketReply.Data
	32, // 3: api.server.compute.v1.S3StorageInBucketListReply.data:type_name -> api.server.compute.v1.S3StorageInBucketListReply.Data
	17, // 4: api.server.compute.v1.S3StorageUploadFileReply.data:type_name -> api.server.compute.v1.S3Object
	33, // 5: api.server.compute.v1.S3StorageDownloadReply.data:type_name -> api.server.compute.v1.S3StorageDownloadReply.Data
	30, // 6: api.server.compute.v1.ListBucketReply.Data.list:type_name -> api.server.compute.v1.ListBucketReply.BucketVo
	17, // 7: api.server.compute.v1.S3StorageInBucketListReply.Data.list:type_name -> api.server.compute.v1.S3Object
	0,  // 8: api.server.compute.v1.StorageS3.CreateS3Key:input_type -> api.server.compute.v1.CreateS3KeyRequest
	3,  // 9: api.server.compute.v1.StorageS3.GetUserS3UserList:input_type -> api.server.compute.v1.GetUserS3UserListRequest
	5,  // 10: api.server.compute.v1.StorageS3.GetUserS3User:input_type -> api.server.compute.v1.GetUserS3UserRequest
	7,  // 11: api.server.compute.v1.StorageS3.DeleteUserS3User:input_type -> api.server.compute.v1.DeleteUserS3UserRequest
	9,  // 12: api.server.compute.v1.StorageS3.CreateBucket:input_type -> api.server.compute.v1.CreateBucketRequest
	11, // 13: api.server.compute.v1.StorageS3.DeleteBucket:input_type -> api.server.compute.v1.DeleteBucketRequest
	13, // 14: api.server.compute.v1.StorageS3.EmptyBucket:input_type -> api.server.compute.v1.EmptyBucketRequest
	15, // 15: api.server.compute.v1.StorageS3.ListBucket:input_type -> api.server.compute.v1.ListBucketRequest
	18, // 16: api.server.compute.v1.StorageS3.S3StorageInBucketList:input_type -> api.server.compute.v1.S3StorageInBucketListRequest
	24, // 17: api.server.compute.v1.StorageS3.S3StorageUploadFile:input_type -> api.server.compute.v1.S3StorageUploadFileRequest
	20, // 18: api.server.compute.v1.StorageS3.S3StorageMkdir:input_type -> api.server.compute.v1.S3StorageMkdirRequest
	22, // 19: api.server.compute.v1.StorageS3.S3StorageDeleteMkdir:input_type -> api.server.compute.v1.S3StorageDeleteMkdirRequest
	26, // 20: api.server.compute.v1.StorageS3.S3StorageDownload:input_type -> api.server.compute.v1.S3StorageDownloadRequest
	28, // 21: api.server.compute.v1.StorageS3.S3StorageDelete:input_type -> api.server.compute.v1.S3StorageDeleteRequest
	1,  // 22: api.server.compute.v1.StorageS3.CreateS3Key:output_type -> api.server.compute.v1.CreateS3KeyReply
	4,  // 23: api.server.compute.v1.StorageS3.GetUserS3UserList:output_type -> api.server.compute.v1.GetUserS3UserListReply
	6,  // 24: api.server.compute.v1.StorageS3.GetUserS3User:output_type -> api.server.compute.v1.GetUserS3UserReply
	8,  // 25: api.server.compute.v1.StorageS3.DeleteUserS3User:output_type -> api.server.compute.v1.DeleteUserS3UserReply
	10, // 26: api.server.compute.v1.StorageS3.CreateBucket:output_type -> api.server.compute.v1.CreateBucketReply
	12, // 27: api.server.compute.v1.StorageS3.DeleteBucket:output_type -> api.server.compute.v1.DeleteBucketReply
	14, // 28: api.server.compute.v1.StorageS3.EmptyBucket:output_type -> api.server.compute.v1.EmptyBucketReply
	16, // 29: api.server.compute.v1.StorageS3.ListBucket:output_type -> api.server.compute.v1.ListBucketReply
	19, // 30: api.server.compute.v1.StorageS3.S3StorageInBucketList:output_type -> api.server.compute.v1.S3StorageInBucketListReply
	25, // 31: api.server.compute.v1.StorageS3.S3StorageUploadFile:output_type -> api.server.compute.v1.S3StorageUploadFileReply
	21, // 32: api.server.compute.v1.StorageS3.S3StorageMkdir:output_type -> api.server.compute.v1.S3StorageMkdirReply
	23, // 33: api.server.compute.v1.StorageS3.S3StorageDeleteMkdir:output_type -> api.server.compute.v1.S3StorageDeleteMkdirReply
	27, // 34: api.server.compute.v1.StorageS3.S3StorageDownload:output_type -> api.server.compute.v1.S3StorageDownloadReply
	29, // 35: api.server.compute.v1.StorageS3.S3StorageDelete:output_type -> api.server.compute.v1.S3StorageDeleteReply
	22, // [22:36] is the sub-list for method output_type
	8,  // [8:22] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_api_compute_v1_storage_s3_proto_init() }
func file_api_compute_v1_storage_s3_proto_init() {
	if File_api_compute_v1_storage_s3_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_compute_v1_storage_s3_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateS3KeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_compute_v1_storage_s3_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateS3KeyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_compute_v1_storage_s3_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_compute_v1_storage_s3_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserS3UserListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_compute_v1_storage_s3_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserS3UserListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_compute_v1_storage_s3_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserS3UserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_compute_v1_storage_s3_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserS3UserReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_compute_v1_storage_s3_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserS3UserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_compute_v1_storage_s3_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserS3UserReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_compute_v1_storage_s3_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBucketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_compute_v1_storage_s3_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBucketReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_compute_v1_storage_s3_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBucketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_compute_v1_storage_s3_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBucketReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_compute_v1_storage_s3_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyBucketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_compute_v1_storage_s3_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyBucketReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_compute_v1_storage_s3_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBucketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_compute_v1_storage_s3_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBucketReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_compute_v1_storage_s3_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3Object); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_compute_v1_storage_s3_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3StorageInBucketListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_compute_v1_storage_s3_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3StorageInBucketListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_compute_v1_storage_s3_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3StorageMkdirRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_compute_v1_storage_s3_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3StorageMkdirReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_compute_v1_storage_s3_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3StorageDeleteMkdirRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_compute_v1_storage_s3_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3StorageDeleteMkdirReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_compute_v1_storage_s3_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3StorageUploadFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_compute_v1_storage_s3_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3StorageUploadFileReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_compute_v1_storage_s3_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3StorageDownloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_compute_v1_storage_s3_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3StorageDownloadReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_compute_v1_storage_s3_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3StorageDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_compute_v1_storage_s3_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3StorageDeleteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_compute_v1_storage_s3_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBucketReply_BucketVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_compute_v1_storage_s3_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBucketReply_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_compute_v1_storage_s3_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3StorageInBucketListReply_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_compute_v1_storage_s3_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3StorageDownloadReply_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_compute_v1_storage_s3_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_compute_v1_storage_s3_proto_goTypes,
		DependencyIndexes: file_api_compute_v1_storage_s3_proto_depIdxs,
		MessageInfos:      file_api_compute_v1_storage_s3_proto_msgTypes,
	}.Build()
	File_api_compute_v1_storage_s3_proto = out.File
	file_api_compute_v1_storage_s3_proto_rawDesc = nil
	file_api_compute_v1_storage_s3_proto_goTypes = nil
	file_api_compute_v1_storage_s3_proto_depIdxs = nil
}
