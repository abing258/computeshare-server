// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: api/compute/v1/storage_s3.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StorageS3_GetS3User_FullMethodName    = "/api.compute.v1.StorageS3/GetS3User"
	StorageS3_CreateBucket_FullMethodName = "/api.compute.v1.StorageS3/CreateBucket"
	StorageS3_DeleteBucket_FullMethodName = "/api.compute.v1.StorageS3/DeleteBucket"
	StorageS3_ListBucket_FullMethodName   = "/api.compute.v1.StorageS3/ListBucket"
)

// StorageS3Client is the client API for StorageS3 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageS3Client interface {
	GetS3User(ctx context.Context, in *GetS3UserRequest, opts ...grpc.CallOption) (*GetS3UserReply, error)
	CreateBucket(ctx context.Context, in *CreateBucketRequest, opts ...grpc.CallOption) (*CreateBucketReply, error)
	DeleteBucket(ctx context.Context, in *DeleteBucketRequest, opts ...grpc.CallOption) (*DeleteBucketReply, error)
	ListBucket(ctx context.Context, in *ListBucketRequest, opts ...grpc.CallOption) (*ListBucketReply, error)
}

type storageS3Client struct {
	cc grpc.ClientConnInterface
}

func NewStorageS3Client(cc grpc.ClientConnInterface) StorageS3Client {
	return &storageS3Client{cc}
}

func (c *storageS3Client) GetS3User(ctx context.Context, in *GetS3UserRequest, opts ...grpc.CallOption) (*GetS3UserReply, error) {
	out := new(GetS3UserReply)
	err := c.cc.Invoke(ctx, StorageS3_GetS3User_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageS3Client) CreateBucket(ctx context.Context, in *CreateBucketRequest, opts ...grpc.CallOption) (*CreateBucketReply, error) {
	out := new(CreateBucketReply)
	err := c.cc.Invoke(ctx, StorageS3_CreateBucket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageS3Client) DeleteBucket(ctx context.Context, in *DeleteBucketRequest, opts ...grpc.CallOption) (*DeleteBucketReply, error) {
	out := new(DeleteBucketReply)
	err := c.cc.Invoke(ctx, StorageS3_DeleteBucket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageS3Client) ListBucket(ctx context.Context, in *ListBucketRequest, opts ...grpc.CallOption) (*ListBucketReply, error) {
	out := new(ListBucketReply)
	err := c.cc.Invoke(ctx, StorageS3_ListBucket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageS3Server is the server API for StorageS3 service.
// All implementations must embed UnimplementedStorageS3Server
// for forward compatibility
type StorageS3Server interface {
	GetS3User(context.Context, *GetS3UserRequest) (*GetS3UserReply, error)
	CreateBucket(context.Context, *CreateBucketRequest) (*CreateBucketReply, error)
	DeleteBucket(context.Context, *DeleteBucketRequest) (*DeleteBucketReply, error)
	ListBucket(context.Context, *ListBucketRequest) (*ListBucketReply, error)
	mustEmbedUnimplementedStorageS3Server()
}

// UnimplementedStorageS3Server must be embedded to have forward compatible implementations.
type UnimplementedStorageS3Server struct {
}

func (UnimplementedStorageS3Server) GetS3User(context.Context, *GetS3UserRequest) (*GetS3UserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetS3User not implemented")
}
func (UnimplementedStorageS3Server) CreateBucket(context.Context, *CreateBucketRequest) (*CreateBucketReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBucket not implemented")
}
func (UnimplementedStorageS3Server) DeleteBucket(context.Context, *DeleteBucketRequest) (*DeleteBucketReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBucket not implemented")
}
func (UnimplementedStorageS3Server) ListBucket(context.Context, *ListBucketRequest) (*ListBucketReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBucket not implemented")
}
func (UnimplementedStorageS3Server) mustEmbedUnimplementedStorageS3Server() {}

// UnsafeStorageS3Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageS3Server will
// result in compilation errors.
type UnsafeStorageS3Server interface {
	mustEmbedUnimplementedStorageS3Server()
}

func RegisterStorageS3Server(s grpc.ServiceRegistrar, srv StorageS3Server) {
	s.RegisterService(&StorageS3_ServiceDesc, srv)
}

func _StorageS3_GetS3User_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetS3UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageS3Server).GetS3User(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageS3_GetS3User_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageS3Server).GetS3User(ctx, req.(*GetS3UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageS3_CreateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageS3Server).CreateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageS3_CreateBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageS3Server).CreateBucket(ctx, req.(*CreateBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageS3_DeleteBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageS3Server).DeleteBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageS3_DeleteBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageS3Server).DeleteBucket(ctx, req.(*DeleteBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageS3_ListBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageS3Server).ListBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageS3_ListBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageS3Server).ListBucket(ctx, req.(*ListBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageS3_ServiceDesc is the grpc.ServiceDesc for StorageS3 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageS3_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.compute.v1.StorageS3",
	HandlerType: (*StorageS3Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetS3User",
			Handler:    _StorageS3_GetS3User_Handler,
		},
		{
			MethodName: "CreateBucket",
			Handler:    _StorageS3_CreateBucket_Handler,
		},
		{
			MethodName: "DeleteBucket",
			Handler:    _StorageS3_DeleteBucket_Handler,
		},
		{
			MethodName: "ListBucket",
			Handler:    _StorageS3_ListBucket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/compute/v1/storage_s3.proto",
}
