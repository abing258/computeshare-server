// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.23.2
// source: api/compute/v1/storage_s3.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationStorageS3CreateBucket = "/api.compute.v1.StorageS3/CreateBucket"
const OperationStorageS3DeleteBucket = "/api.compute.v1.StorageS3/DeleteBucket"
const OperationStorageS3GetS3User = "/api.compute.v1.StorageS3/GetS3User"
const OperationStorageS3ListBucket = "/api.compute.v1.StorageS3/ListBucket"

type StorageS3HTTPServer interface {
	CreateBucket(context.Context, *CreateBucketRequest) (*CreateBucketReply, error)
	DeleteBucket(context.Context, *DeleteBucketRequest) (*DeleteBucketReply, error)
	GetS3User(context.Context, *GetS3UserRequest) (*GetS3UserReply, error)
	ListBucket(context.Context, *ListBucketRequest) (*ListBucketReply, error)
}

func RegisterStorageS3HTTPServer(s *http.Server, srv StorageS3HTTPServer) {
	r := s.Route("/")
	r.GET("/v1/s3user", _StorageS3_GetS3User0_HTTP_Handler(srv))
	r.POST("/v1/s3bucket", _StorageS3_CreateBucket0_HTTP_Handler(srv))
	r.DELETE("/v1/s3bucket/{id}", _StorageS3_DeleteBucket0_HTTP_Handler(srv))
	r.GET("/v1/s3bucket", _StorageS3_ListBucket0_HTTP_Handler(srv))
}

func _StorageS3_GetS3User0_HTTP_Handler(srv StorageS3HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetS3UserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStorageS3GetS3User)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetS3User(ctx, req.(*GetS3UserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetS3UserReply)
		return ctx.Result(200, reply)
	}
}

func _StorageS3_CreateBucket0_HTTP_Handler(srv StorageS3HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateBucketRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStorageS3CreateBucket)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateBucket(ctx, req.(*CreateBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateBucketReply)
		return ctx.Result(200, reply)
	}
}

func _StorageS3_DeleteBucket0_HTTP_Handler(srv StorageS3HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteBucketRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStorageS3DeleteBucket)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteBucket(ctx, req.(*DeleteBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteBucketReply)
		return ctx.Result(200, reply)
	}
}

func _StorageS3_ListBucket0_HTTP_Handler(srv StorageS3HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListBucketRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStorageS3ListBucket)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListBucket(ctx, req.(*ListBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListBucketReply)
		return ctx.Result(200, reply)
	}
}

type StorageS3HTTPClient interface {
	CreateBucket(ctx context.Context, req *CreateBucketRequest, opts ...http.CallOption) (rsp *CreateBucketReply, err error)
	DeleteBucket(ctx context.Context, req *DeleteBucketRequest, opts ...http.CallOption) (rsp *DeleteBucketReply, err error)
	GetS3User(ctx context.Context, req *GetS3UserRequest, opts ...http.CallOption) (rsp *GetS3UserReply, err error)
	ListBucket(ctx context.Context, req *ListBucketRequest, opts ...http.CallOption) (rsp *ListBucketReply, err error)
}

type StorageS3HTTPClientImpl struct {
	cc *http.Client
}

func NewStorageS3HTTPClient(client *http.Client) StorageS3HTTPClient {
	return &StorageS3HTTPClientImpl{client}
}

func (c *StorageS3HTTPClientImpl) CreateBucket(ctx context.Context, in *CreateBucketRequest, opts ...http.CallOption) (*CreateBucketReply, error) {
	var out CreateBucketReply
	pattern := "/v1/s3bucket"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStorageS3CreateBucket))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *StorageS3HTTPClientImpl) DeleteBucket(ctx context.Context, in *DeleteBucketRequest, opts ...http.CallOption) (*DeleteBucketReply, error) {
	var out DeleteBucketReply
	pattern := "/v1/s3bucket/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStorageS3DeleteBucket))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *StorageS3HTTPClientImpl) GetS3User(ctx context.Context, in *GetS3UserRequest, opts ...http.CallOption) (*GetS3UserReply, error) {
	var out GetS3UserReply
	pattern := "/v1/s3user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStorageS3GetS3User))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *StorageS3HTTPClientImpl) ListBucket(ctx context.Context, in *ListBucketRequest, opts ...http.CallOption) (*ListBucketReply, error) {
	var out ListBucketReply
	pattern := "/v1/s3bucket"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStorageS3ListBucket))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
