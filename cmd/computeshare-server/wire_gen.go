// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/mohaijiang/computeshare-server/internal/biz"
	"github.com/mohaijiang/computeshare-server/internal/conf"
	"github.com/mohaijiang/computeshare-server/internal/data"
	"github.com/mohaijiang/computeshare-server/internal/server"
	"github.com/mohaijiang/computeshare-server/internal/service"
	"github.com/mohaijiang/computeshare-server/third_party/p2p"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, auth *conf.Auth, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	greeterRepo := data.NewGreeterRepo(dataData, logger)
	greeterUsecase := biz.NewGreeterUsecase(greeterRepo, logger)
	greeterService := service.NewGreeterService(greeterUsecase)
	grpcServer := server.NewGRPCServer(confServer, greeterService, logger)
	agentRepo := data.NewAgentRepo(dataData, logger)
	agentUsecase := biz.NewAgentUsecase(agentRepo, logger)
	ipfsNode, cleanup2, err := p2p.RunDaemon()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	agentService := service.NewAgentService(agentUsecase, ipfsNode, logger)
	storageRepo := data.NewStorageRepo(dataData, logger)
	storagecase := biz.NewStorageUsecase(storageRepo, logger)
	storageService, err := service.NewStorageService(storagecase, ipfsNode, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	userRepo := data.NewUserRepo(dataData, logger)
	userUsercase := biz.NewUserUsecase(auth, userRepo, logger)
	userService := service.NewUserService(userUsercase, logger)
	computeSpecRepo := data.NewComputeSpecRepo(dataData, logger)
	computeInstanceRepo := data.NewComputeInstanceRepo(dataData, logger)
	computeImageRepo := data.NewComputeImageRepo(dataData, logger)
	computeInstanceUsercase := biz.NewComputeInstanceUsercase(computeSpecRepo, computeInstanceRepo, computeImageRepo, logger)
	computeInstanceService := service.NewComputeInstanceService(computeInstanceUsercase, logger)
	scriptRepo := data.NewScriptRepo(dataData, logger)
	scriptExecutionRecordRepo := data.NewScriptExecutionRecordRepo(dataData, logger)
	scriptUseCase := biz.NewScriptUseCase(scriptRepo, scriptExecutionRecordRepo, logger)
	computePowerService := service.NewComputePowerService(scriptUseCase, logger)
	httpServer := server.NewHTTPServer(confServer, auth, greeterService, agentService, storageService, userService, computeInstanceService, computePowerService, logger)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}
