// Code generated by ent, DO NOT EDIT.

package agent

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldID, id))
}

// PeerID applies equality check predicate on the "peer_id" field. It's identical to PeerIDEQ.
func PeerID(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldPeerID, v))
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldActive, v))
}

// LastUpdateTime applies equality check predicate on the "last_update_time" field. It's identical to LastUpdateTimeEQ.
func LastUpdateTime(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldLastUpdateTime, v))
}

// PeerIDEQ applies the EQ predicate on the "peer_id" field.
func PeerIDEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldPeerID, v))
}

// PeerIDNEQ applies the NEQ predicate on the "peer_id" field.
func PeerIDNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldPeerID, v))
}

// PeerIDIn applies the In predicate on the "peer_id" field.
func PeerIDIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldPeerID, vs...))
}

// PeerIDNotIn applies the NotIn predicate on the "peer_id" field.
func PeerIDNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldPeerID, vs...))
}

// PeerIDGT applies the GT predicate on the "peer_id" field.
func PeerIDGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldPeerID, v))
}

// PeerIDGTE applies the GTE predicate on the "peer_id" field.
func PeerIDGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldPeerID, v))
}

// PeerIDLT applies the LT predicate on the "peer_id" field.
func PeerIDLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldPeerID, v))
}

// PeerIDLTE applies the LTE predicate on the "peer_id" field.
func PeerIDLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldPeerID, v))
}

// PeerIDContains applies the Contains predicate on the "peer_id" field.
func PeerIDContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldPeerID, v))
}

// PeerIDHasPrefix applies the HasPrefix predicate on the "peer_id" field.
func PeerIDHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldPeerID, v))
}

// PeerIDHasSuffix applies the HasSuffix predicate on the "peer_id" field.
func PeerIDHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldPeerID, v))
}

// PeerIDEqualFold applies the EqualFold predicate on the "peer_id" field.
func PeerIDEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldPeerID, v))
}

// PeerIDContainsFold applies the ContainsFold predicate on the "peer_id" field.
func PeerIDContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldPeerID, v))
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldActive, v))
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldActive, v))
}

// LastUpdateTimeEQ applies the EQ predicate on the "last_update_time" field.
func LastUpdateTimeEQ(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldLastUpdateTime, v))
}

// LastUpdateTimeNEQ applies the NEQ predicate on the "last_update_time" field.
func LastUpdateTimeNEQ(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldLastUpdateTime, v))
}

// LastUpdateTimeIn applies the In predicate on the "last_update_time" field.
func LastUpdateTimeIn(vs ...time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldLastUpdateTime, vs...))
}

// LastUpdateTimeNotIn applies the NotIn predicate on the "last_update_time" field.
func LastUpdateTimeNotIn(vs ...time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldLastUpdateTime, vs...))
}

// LastUpdateTimeGT applies the GT predicate on the "last_update_time" field.
func LastUpdateTimeGT(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldLastUpdateTime, v))
}

// LastUpdateTimeGTE applies the GTE predicate on the "last_update_time" field.
func LastUpdateTimeGTE(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldLastUpdateTime, v))
}

// LastUpdateTimeLT applies the LT predicate on the "last_update_time" field.
func LastUpdateTimeLT(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldLastUpdateTime, v))
}

// LastUpdateTimeLTE applies the LTE predicate on the "last_update_time" field.
func LastUpdateTimeLTE(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldLastUpdateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Agent) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Agent) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Agent) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		p(s.Not())
	})
}
