// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/agent"
)

// AgentCreate is the builder for creating a Agent entity.
type AgentCreate struct {
	config
	mutation *AgentMutation
	hooks    []Hook
}

// SetMAC sets the "mac" field.
func (ac *AgentCreate) SetMAC(s string) *AgentCreate {
	ac.mutation.SetMAC(s)
	return ac
}

// SetActive sets the "active" field.
func (ac *AgentCreate) SetActive(b bool) *AgentCreate {
	ac.mutation.SetActive(b)
	return ac
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (ac *AgentCreate) SetNillableActive(b *bool) *AgentCreate {
	if b != nil {
		ac.SetActive(*b)
	}
	return ac
}

// SetLastUpdateTime sets the "last_update_time" field.
func (ac *AgentCreate) SetLastUpdateTime(t time.Time) *AgentCreate {
	ac.mutation.SetLastUpdateTime(t)
	return ac
}

// SetNillableLastUpdateTime sets the "last_update_time" field if the given value is not nil.
func (ac *AgentCreate) SetNillableLastUpdateTime(t *time.Time) *AgentCreate {
	if t != nil {
		ac.SetLastUpdateTime(*t)
	}
	return ac
}

// SetHostname sets the "hostname" field.
func (ac *AgentCreate) SetHostname(s string) *AgentCreate {
	ac.mutation.SetHostname(s)
	return ac
}

// SetTotalCPU sets the "total_cpu" field.
func (ac *AgentCreate) SetTotalCPU(i int32) *AgentCreate {
	ac.mutation.SetTotalCPU(i)
	return ac
}

// SetTotalMemory sets the "total_memory" field.
func (ac *AgentCreate) SetTotalMemory(i int32) *AgentCreate {
	ac.mutation.SetTotalMemory(i)
	return ac
}

// SetOccupiedCPU sets the "occupied_cpu" field.
func (ac *AgentCreate) SetOccupiedCPU(i int32) *AgentCreate {
	ac.mutation.SetOccupiedCPU(i)
	return ac
}

// SetOccupiedMemory sets the "occupied_memory" field.
func (ac *AgentCreate) SetOccupiedMemory(i int32) *AgentCreate {
	ac.mutation.SetOccupiedMemory(i)
	return ac
}

// SetIP sets the "ip" field.
func (ac *AgentCreate) SetIP(s string) *AgentCreate {
	ac.mutation.SetIP(s)
	return ac
}

// SetID sets the "id" field.
func (ac *AgentCreate) SetID(u uuid.UUID) *AgentCreate {
	ac.mutation.SetID(u)
	return ac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ac *AgentCreate) SetNillableID(u *uuid.UUID) *AgentCreate {
	if u != nil {
		ac.SetID(*u)
	}
	return ac
}

// Mutation returns the AgentMutation object of the builder.
func (ac *AgentCreate) Mutation() *AgentMutation {
	return ac.mutation
}

// Save creates the Agent in the database.
func (ac *AgentCreate) Save(ctx context.Context) (*Agent, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AgentCreate) SaveX(ctx context.Context) *Agent {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AgentCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AgentCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AgentCreate) defaults() {
	if _, ok := ac.mutation.Active(); !ok {
		v := agent.DefaultActive
		ac.mutation.SetActive(v)
	}
	if _, ok := ac.mutation.LastUpdateTime(); !ok {
		v := agent.DefaultLastUpdateTime()
		ac.mutation.SetLastUpdateTime(v)
	}
	if _, ok := ac.mutation.ID(); !ok {
		v := agent.DefaultID()
		ac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AgentCreate) check() error {
	if _, ok := ac.mutation.MAC(); !ok {
		return &ValidationError{Name: "mac", err: errors.New(`ent: missing required field "Agent.mac"`)}
	}
	if v, ok := ac.mutation.MAC(); ok {
		if err := agent.MACValidator(v); err != nil {
			return &ValidationError{Name: "mac", err: fmt.Errorf(`ent: validator failed for field "Agent.mac": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "Agent.active"`)}
	}
	if _, ok := ac.mutation.LastUpdateTime(); !ok {
		return &ValidationError{Name: "last_update_time", err: errors.New(`ent: missing required field "Agent.last_update_time"`)}
	}
	if _, ok := ac.mutation.Hostname(); !ok {
		return &ValidationError{Name: "hostname", err: errors.New(`ent: missing required field "Agent.hostname"`)}
	}
	if _, ok := ac.mutation.TotalCPU(); !ok {
		return &ValidationError{Name: "total_cpu", err: errors.New(`ent: missing required field "Agent.total_cpu"`)}
	}
	if _, ok := ac.mutation.TotalMemory(); !ok {
		return &ValidationError{Name: "total_memory", err: errors.New(`ent: missing required field "Agent.total_memory"`)}
	}
	if _, ok := ac.mutation.OccupiedCPU(); !ok {
		return &ValidationError{Name: "occupied_cpu", err: errors.New(`ent: missing required field "Agent.occupied_cpu"`)}
	}
	if _, ok := ac.mutation.OccupiedMemory(); !ok {
		return &ValidationError{Name: "occupied_memory", err: errors.New(`ent: missing required field "Agent.occupied_memory"`)}
	}
	if _, ok := ac.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New(`ent: missing required field "Agent.ip"`)}
	}
	return nil
}

func (ac *AgentCreate) sqlSave(ctx context.Context) (*Agent, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AgentCreate) createSpec() (*Agent, *sqlgraph.CreateSpec) {
	var (
		_node = &Agent{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(agent.Table, sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUUID))
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ac.mutation.MAC(); ok {
		_spec.SetField(agent.FieldMAC, field.TypeString, value)
		_node.MAC = value
	}
	if value, ok := ac.mutation.Active(); ok {
		_spec.SetField(agent.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := ac.mutation.LastUpdateTime(); ok {
		_spec.SetField(agent.FieldLastUpdateTime, field.TypeTime, value)
		_node.LastUpdateTime = value
	}
	if value, ok := ac.mutation.Hostname(); ok {
		_spec.SetField(agent.FieldHostname, field.TypeString, value)
		_node.Hostname = value
	}
	if value, ok := ac.mutation.TotalCPU(); ok {
		_spec.SetField(agent.FieldTotalCPU, field.TypeInt32, value)
		_node.TotalCPU = value
	}
	if value, ok := ac.mutation.TotalMemory(); ok {
		_spec.SetField(agent.FieldTotalMemory, field.TypeInt32, value)
		_node.TotalMemory = value
	}
	if value, ok := ac.mutation.OccupiedCPU(); ok {
		_spec.SetField(agent.FieldOccupiedCPU, field.TypeInt32, value)
		_node.OccupiedCPU = value
	}
	if value, ok := ac.mutation.OccupiedMemory(); ok {
		_spec.SetField(agent.FieldOccupiedMemory, field.TypeInt32, value)
		_node.OccupiedMemory = value
	}
	if value, ok := ac.mutation.IP(); ok {
		_spec.SetField(agent.FieldIP, field.TypeString, value)
		_node.IP = value
	}
	return _node, _spec
}

// AgentCreateBulk is the builder for creating many Agent entities in bulk.
type AgentCreateBulk struct {
	config
	builders []*AgentCreate
}

// Save creates the Agent entities in the database.
func (acb *AgentCreateBulk) Save(ctx context.Context) ([]*Agent, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Agent, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AgentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AgentCreateBulk) SaveX(ctx context.Context) []*Agent {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AgentCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AgentCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
