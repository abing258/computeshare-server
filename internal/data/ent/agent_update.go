// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/agent"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/predicate"
)

// AgentUpdate is the builder for updating Agent entities.
type AgentUpdate struct {
	config
	hooks    []Hook
	mutation *AgentMutation
}

// Where appends a list predicates to the AgentUpdate builder.
func (au *AgentUpdate) Where(ps ...predicate.Agent) *AgentUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetMAC sets the "mac" field.
func (au *AgentUpdate) SetMAC(s string) *AgentUpdate {
	au.mutation.SetMAC(s)
	return au
}

// SetActive sets the "active" field.
func (au *AgentUpdate) SetActive(b bool) *AgentUpdate {
	au.mutation.SetActive(b)
	return au
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (au *AgentUpdate) SetNillableActive(b *bool) *AgentUpdate {
	if b != nil {
		au.SetActive(*b)
	}
	return au
}

// SetLastUpdateTime sets the "last_update_time" field.
func (au *AgentUpdate) SetLastUpdateTime(t time.Time) *AgentUpdate {
	au.mutation.SetLastUpdateTime(t)
	return au
}

// SetHostname sets the "hostname" field.
func (au *AgentUpdate) SetHostname(s string) *AgentUpdate {
	au.mutation.SetHostname(s)
	return au
}

// SetTotalCPU sets the "total_cpu" field.
func (au *AgentUpdate) SetTotalCPU(i int32) *AgentUpdate {
	au.mutation.ResetTotalCPU()
	au.mutation.SetTotalCPU(i)
	return au
}

// AddTotalCPU adds i to the "total_cpu" field.
func (au *AgentUpdate) AddTotalCPU(i int32) *AgentUpdate {
	au.mutation.AddTotalCPU(i)
	return au
}

// SetTotalMemory sets the "total_memory" field.
func (au *AgentUpdate) SetTotalMemory(i int32) *AgentUpdate {
	au.mutation.ResetTotalMemory()
	au.mutation.SetTotalMemory(i)
	return au
}

// AddTotalMemory adds i to the "total_memory" field.
func (au *AgentUpdate) AddTotalMemory(i int32) *AgentUpdate {
	au.mutation.AddTotalMemory(i)
	return au
}

// SetOccupiedCPU sets the "occupied_cpu" field.
func (au *AgentUpdate) SetOccupiedCPU(i int32) *AgentUpdate {
	au.mutation.ResetOccupiedCPU()
	au.mutation.SetOccupiedCPU(i)
	return au
}

// AddOccupiedCPU adds i to the "occupied_cpu" field.
func (au *AgentUpdate) AddOccupiedCPU(i int32) *AgentUpdate {
	au.mutation.AddOccupiedCPU(i)
	return au
}

// SetOccupiedMemory sets the "occupied_memory" field.
func (au *AgentUpdate) SetOccupiedMemory(i int32) *AgentUpdate {
	au.mutation.ResetOccupiedMemory()
	au.mutation.SetOccupiedMemory(i)
	return au
}

// AddOccupiedMemory adds i to the "occupied_memory" field.
func (au *AgentUpdate) AddOccupiedMemory(i int32) *AgentUpdate {
	au.mutation.AddOccupiedMemory(i)
	return au
}

// SetIP sets the "ip" field.
func (au *AgentUpdate) SetIP(s string) *AgentUpdate {
	au.mutation.SetIP(s)
	return au
}

// Mutation returns the AgentMutation object of the builder.
func (au *AgentUpdate) Mutation() *AgentMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AgentUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AgentUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AgentUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AgentUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AgentUpdate) defaults() {
	if _, ok := au.mutation.LastUpdateTime(); !ok {
		v := agent.UpdateDefaultLastUpdateTime()
		au.mutation.SetLastUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AgentUpdate) check() error {
	if v, ok := au.mutation.MAC(); ok {
		if err := agent.MACValidator(v); err != nil {
			return &ValidationError{Name: "mac", err: fmt.Errorf(`ent: validator failed for field "Agent.mac": %w`, err)}
		}
	}
	return nil
}

func (au *AgentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(agent.Table, agent.Columns, sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUUID))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.MAC(); ok {
		_spec.SetField(agent.FieldMAC, field.TypeString, value)
	}
	if value, ok := au.mutation.Active(); ok {
		_spec.SetField(agent.FieldActive, field.TypeBool, value)
	}
	if value, ok := au.mutation.LastUpdateTime(); ok {
		_spec.SetField(agent.FieldLastUpdateTime, field.TypeTime, value)
	}
	if value, ok := au.mutation.Hostname(); ok {
		_spec.SetField(agent.FieldHostname, field.TypeString, value)
	}
	if value, ok := au.mutation.TotalCPU(); ok {
		_spec.SetField(agent.FieldTotalCPU, field.TypeInt32, value)
	}
	if value, ok := au.mutation.AddedTotalCPU(); ok {
		_spec.AddField(agent.FieldTotalCPU, field.TypeInt32, value)
	}
	if value, ok := au.mutation.TotalMemory(); ok {
		_spec.SetField(agent.FieldTotalMemory, field.TypeInt32, value)
	}
	if value, ok := au.mutation.AddedTotalMemory(); ok {
		_spec.AddField(agent.FieldTotalMemory, field.TypeInt32, value)
	}
	if value, ok := au.mutation.OccupiedCPU(); ok {
		_spec.SetField(agent.FieldOccupiedCPU, field.TypeInt32, value)
	}
	if value, ok := au.mutation.AddedOccupiedCPU(); ok {
		_spec.AddField(agent.FieldOccupiedCPU, field.TypeInt32, value)
	}
	if value, ok := au.mutation.OccupiedMemory(); ok {
		_spec.SetField(agent.FieldOccupiedMemory, field.TypeInt32, value)
	}
	if value, ok := au.mutation.AddedOccupiedMemory(); ok {
		_spec.AddField(agent.FieldOccupiedMemory, field.TypeInt32, value)
	}
	if value, ok := au.mutation.IP(); ok {
		_spec.SetField(agent.FieldIP, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{agent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AgentUpdateOne is the builder for updating a single Agent entity.
type AgentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AgentMutation
}

// SetMAC sets the "mac" field.
func (auo *AgentUpdateOne) SetMAC(s string) *AgentUpdateOne {
	auo.mutation.SetMAC(s)
	return auo
}

// SetActive sets the "active" field.
func (auo *AgentUpdateOne) SetActive(b bool) *AgentUpdateOne {
	auo.mutation.SetActive(b)
	return auo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableActive(b *bool) *AgentUpdateOne {
	if b != nil {
		auo.SetActive(*b)
	}
	return auo
}

// SetLastUpdateTime sets the "last_update_time" field.
func (auo *AgentUpdateOne) SetLastUpdateTime(t time.Time) *AgentUpdateOne {
	auo.mutation.SetLastUpdateTime(t)
	return auo
}

// SetHostname sets the "hostname" field.
func (auo *AgentUpdateOne) SetHostname(s string) *AgentUpdateOne {
	auo.mutation.SetHostname(s)
	return auo
}

// SetTotalCPU sets the "total_cpu" field.
func (auo *AgentUpdateOne) SetTotalCPU(i int32) *AgentUpdateOne {
	auo.mutation.ResetTotalCPU()
	auo.mutation.SetTotalCPU(i)
	return auo
}

// AddTotalCPU adds i to the "total_cpu" field.
func (auo *AgentUpdateOne) AddTotalCPU(i int32) *AgentUpdateOne {
	auo.mutation.AddTotalCPU(i)
	return auo
}

// SetTotalMemory sets the "total_memory" field.
func (auo *AgentUpdateOne) SetTotalMemory(i int32) *AgentUpdateOne {
	auo.mutation.ResetTotalMemory()
	auo.mutation.SetTotalMemory(i)
	return auo
}

// AddTotalMemory adds i to the "total_memory" field.
func (auo *AgentUpdateOne) AddTotalMemory(i int32) *AgentUpdateOne {
	auo.mutation.AddTotalMemory(i)
	return auo
}

// SetOccupiedCPU sets the "occupied_cpu" field.
func (auo *AgentUpdateOne) SetOccupiedCPU(i int32) *AgentUpdateOne {
	auo.mutation.ResetOccupiedCPU()
	auo.mutation.SetOccupiedCPU(i)
	return auo
}

// AddOccupiedCPU adds i to the "occupied_cpu" field.
func (auo *AgentUpdateOne) AddOccupiedCPU(i int32) *AgentUpdateOne {
	auo.mutation.AddOccupiedCPU(i)
	return auo
}

// SetOccupiedMemory sets the "occupied_memory" field.
func (auo *AgentUpdateOne) SetOccupiedMemory(i int32) *AgentUpdateOne {
	auo.mutation.ResetOccupiedMemory()
	auo.mutation.SetOccupiedMemory(i)
	return auo
}

// AddOccupiedMemory adds i to the "occupied_memory" field.
func (auo *AgentUpdateOne) AddOccupiedMemory(i int32) *AgentUpdateOne {
	auo.mutation.AddOccupiedMemory(i)
	return auo
}

// SetIP sets the "ip" field.
func (auo *AgentUpdateOne) SetIP(s string) *AgentUpdateOne {
	auo.mutation.SetIP(s)
	return auo
}

// Mutation returns the AgentMutation object of the builder.
func (auo *AgentUpdateOne) Mutation() *AgentMutation {
	return auo.mutation
}

// Where appends a list predicates to the AgentUpdate builder.
func (auo *AgentUpdateOne) Where(ps ...predicate.Agent) *AgentUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AgentUpdateOne) Select(field string, fields ...string) *AgentUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Agent entity.
func (auo *AgentUpdateOne) Save(ctx context.Context) (*Agent, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AgentUpdateOne) SaveX(ctx context.Context) *Agent {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AgentUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AgentUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AgentUpdateOne) defaults() {
	if _, ok := auo.mutation.LastUpdateTime(); !ok {
		v := agent.UpdateDefaultLastUpdateTime()
		auo.mutation.SetLastUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AgentUpdateOne) check() error {
	if v, ok := auo.mutation.MAC(); ok {
		if err := agent.MACValidator(v); err != nil {
			return &ValidationError{Name: "mac", err: fmt.Errorf(`ent: validator failed for field "Agent.mac": %w`, err)}
		}
	}
	return nil
}

func (auo *AgentUpdateOne) sqlSave(ctx context.Context) (_node *Agent, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(agent.Table, agent.Columns, sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUUID))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Agent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, agent.FieldID)
		for _, f := range fields {
			if !agent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != agent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.MAC(); ok {
		_spec.SetField(agent.FieldMAC, field.TypeString, value)
	}
	if value, ok := auo.mutation.Active(); ok {
		_spec.SetField(agent.FieldActive, field.TypeBool, value)
	}
	if value, ok := auo.mutation.LastUpdateTime(); ok {
		_spec.SetField(agent.FieldLastUpdateTime, field.TypeTime, value)
	}
	if value, ok := auo.mutation.Hostname(); ok {
		_spec.SetField(agent.FieldHostname, field.TypeString, value)
	}
	if value, ok := auo.mutation.TotalCPU(); ok {
		_spec.SetField(agent.FieldTotalCPU, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.AddedTotalCPU(); ok {
		_spec.AddField(agent.FieldTotalCPU, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.TotalMemory(); ok {
		_spec.SetField(agent.FieldTotalMemory, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.AddedTotalMemory(); ok {
		_spec.AddField(agent.FieldTotalMemory, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.OccupiedCPU(); ok {
		_spec.SetField(agent.FieldOccupiedCPU, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.AddedOccupiedCPU(); ok {
		_spec.AddField(agent.FieldOccupiedCPU, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.OccupiedMemory(); ok {
		_spec.SetField(agent.FieldOccupiedMemory, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.AddedOccupiedMemory(); ok {
		_spec.AddField(agent.FieldOccupiedMemory, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.IP(); ok {
		_spec.SetField(agent.FieldIP, field.TypeString, value)
	}
	_node = &Agent{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{agent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
