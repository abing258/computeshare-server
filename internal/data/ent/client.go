// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/agent"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/computeimage"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/computeinstance"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/computespec"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/domainbinding"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/employee"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/gateway"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/gatewayport"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/networkmapping"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/script"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/scriptexecutionrecord"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/storage"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/task"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/user"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Agent is the client for interacting with the Agent builders.
	Agent *AgentClient
	// ComputeImage is the client for interacting with the ComputeImage builders.
	ComputeImage *ComputeImageClient
	// ComputeInstance is the client for interacting with the ComputeInstance builders.
	ComputeInstance *ComputeInstanceClient
	// ComputeSpec is the client for interacting with the ComputeSpec builders.
	ComputeSpec *ComputeSpecClient
	// DomainBinding is the client for interacting with the DomainBinding builders.
	DomainBinding *DomainBindingClient
	// Employee is the client for interacting with the Employee builders.
	Employee *EmployeeClient
	// Gateway is the client for interacting with the Gateway builders.
	Gateway *GatewayClient
	// GatewayPort is the client for interacting with the GatewayPort builders.
	GatewayPort *GatewayPortClient
	// NetworkMapping is the client for interacting with the NetworkMapping builders.
	NetworkMapping *NetworkMappingClient
	// Script is the client for interacting with the Script builders.
	Script *ScriptClient
	// ScriptExecutionRecord is the client for interacting with the ScriptExecutionRecord builders.
	ScriptExecutionRecord *ScriptExecutionRecordClient
	// Storage is the client for interacting with the Storage builders.
	Storage *StorageClient
	// Task is the client for interacting with the Task builders.
	Task *TaskClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Agent = NewAgentClient(c.config)
	c.ComputeImage = NewComputeImageClient(c.config)
	c.ComputeInstance = NewComputeInstanceClient(c.config)
	c.ComputeSpec = NewComputeSpecClient(c.config)
	c.DomainBinding = NewDomainBindingClient(c.config)
	c.Employee = NewEmployeeClient(c.config)
	c.Gateway = NewGatewayClient(c.config)
	c.GatewayPort = NewGatewayPortClient(c.config)
	c.NetworkMapping = NewNetworkMappingClient(c.config)
	c.Script = NewScriptClient(c.config)
	c.ScriptExecutionRecord = NewScriptExecutionRecordClient(c.config)
	c.Storage = NewStorageClient(c.config)
	c.Task = NewTaskClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		Agent:                 NewAgentClient(cfg),
		ComputeImage:          NewComputeImageClient(cfg),
		ComputeInstance:       NewComputeInstanceClient(cfg),
		ComputeSpec:           NewComputeSpecClient(cfg),
		DomainBinding:         NewDomainBindingClient(cfg),
		Employee:              NewEmployeeClient(cfg),
		Gateway:               NewGatewayClient(cfg),
		GatewayPort:           NewGatewayPortClient(cfg),
		NetworkMapping:        NewNetworkMappingClient(cfg),
		Script:                NewScriptClient(cfg),
		ScriptExecutionRecord: NewScriptExecutionRecordClient(cfg),
		Storage:               NewStorageClient(cfg),
		Task:                  NewTaskClient(cfg),
		User:                  NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		Agent:                 NewAgentClient(cfg),
		ComputeImage:          NewComputeImageClient(cfg),
		ComputeInstance:       NewComputeInstanceClient(cfg),
		ComputeSpec:           NewComputeSpecClient(cfg),
		DomainBinding:         NewDomainBindingClient(cfg),
		Employee:              NewEmployeeClient(cfg),
		Gateway:               NewGatewayClient(cfg),
		GatewayPort:           NewGatewayPortClient(cfg),
		NetworkMapping:        NewNetworkMappingClient(cfg),
		Script:                NewScriptClient(cfg),
		ScriptExecutionRecord: NewScriptExecutionRecordClient(cfg),
		Storage:               NewStorageClient(cfg),
		Task:                  NewTaskClient(cfg),
		User:                  NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Agent.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Agent, c.ComputeImage, c.ComputeInstance, c.ComputeSpec, c.DomainBinding,
		c.Employee, c.Gateway, c.GatewayPort, c.NetworkMapping, c.Script,
		c.ScriptExecutionRecord, c.Storage, c.Task, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Agent, c.ComputeImage, c.ComputeInstance, c.ComputeSpec, c.DomainBinding,
		c.Employee, c.Gateway, c.GatewayPort, c.NetworkMapping, c.Script,
		c.ScriptExecutionRecord, c.Storage, c.Task, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AgentMutation:
		return c.Agent.mutate(ctx, m)
	case *ComputeImageMutation:
		return c.ComputeImage.mutate(ctx, m)
	case *ComputeInstanceMutation:
		return c.ComputeInstance.mutate(ctx, m)
	case *ComputeSpecMutation:
		return c.ComputeSpec.mutate(ctx, m)
	case *DomainBindingMutation:
		return c.DomainBinding.mutate(ctx, m)
	case *EmployeeMutation:
		return c.Employee.mutate(ctx, m)
	case *GatewayMutation:
		return c.Gateway.mutate(ctx, m)
	case *GatewayPortMutation:
		return c.GatewayPort.mutate(ctx, m)
	case *NetworkMappingMutation:
		return c.NetworkMapping.mutate(ctx, m)
	case *ScriptMutation:
		return c.Script.mutate(ctx, m)
	case *ScriptExecutionRecordMutation:
		return c.ScriptExecutionRecord.mutate(ctx, m)
	case *StorageMutation:
		return c.Storage.mutate(ctx, m)
	case *TaskMutation:
		return c.Task.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AgentClient is a client for the Agent schema.
type AgentClient struct {
	config
}

// NewAgentClient returns a client for the Agent from the given config.
func NewAgentClient(c config) *AgentClient {
	return &AgentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `agent.Hooks(f(g(h())))`.
func (c *AgentClient) Use(hooks ...Hook) {
	c.hooks.Agent = append(c.hooks.Agent, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `agent.Intercept(f(g(h())))`.
func (c *AgentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Agent = append(c.inters.Agent, interceptors...)
}

// Create returns a builder for creating a Agent entity.
func (c *AgentClient) Create() *AgentCreate {
	mutation := newAgentMutation(c.config, OpCreate)
	return &AgentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Agent entities.
func (c *AgentClient) CreateBulk(builders ...*AgentCreate) *AgentCreateBulk {
	return &AgentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Agent.
func (c *AgentClient) Update() *AgentUpdate {
	mutation := newAgentMutation(c.config, OpUpdate)
	return &AgentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AgentClient) UpdateOne(a *Agent) *AgentUpdateOne {
	mutation := newAgentMutation(c.config, OpUpdateOne, withAgent(a))
	return &AgentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AgentClient) UpdateOneID(id uuid.UUID) *AgentUpdateOne {
	mutation := newAgentMutation(c.config, OpUpdateOne, withAgentID(id))
	return &AgentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Agent.
func (c *AgentClient) Delete() *AgentDelete {
	mutation := newAgentMutation(c.config, OpDelete)
	return &AgentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AgentClient) DeleteOne(a *Agent) *AgentDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AgentClient) DeleteOneID(id uuid.UUID) *AgentDeleteOne {
	builder := c.Delete().Where(agent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AgentDeleteOne{builder}
}

// Query returns a query builder for Agent.
func (c *AgentClient) Query() *AgentQuery {
	return &AgentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAgent},
		inters: c.Interceptors(),
	}
}

// Get returns a Agent entity by its id.
func (c *AgentClient) Get(ctx context.Context, id uuid.UUID) (*Agent, error) {
	return c.Query().Where(agent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AgentClient) GetX(ctx context.Context, id uuid.UUID) *Agent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AgentClient) Hooks() []Hook {
	return c.hooks.Agent
}

// Interceptors returns the client interceptors.
func (c *AgentClient) Interceptors() []Interceptor {
	return c.inters.Agent
}

func (c *AgentClient) mutate(ctx context.Context, m *AgentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AgentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AgentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AgentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AgentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Agent mutation op: %q", m.Op())
	}
}

// ComputeImageClient is a client for the ComputeImage schema.
type ComputeImageClient struct {
	config
}

// NewComputeImageClient returns a client for the ComputeImage from the given config.
func NewComputeImageClient(c config) *ComputeImageClient {
	return &ComputeImageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `computeimage.Hooks(f(g(h())))`.
func (c *ComputeImageClient) Use(hooks ...Hook) {
	c.hooks.ComputeImage = append(c.hooks.ComputeImage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `computeimage.Intercept(f(g(h())))`.
func (c *ComputeImageClient) Intercept(interceptors ...Interceptor) {
	c.inters.ComputeImage = append(c.inters.ComputeImage, interceptors...)
}

// Create returns a builder for creating a ComputeImage entity.
func (c *ComputeImageClient) Create() *ComputeImageCreate {
	mutation := newComputeImageMutation(c.config, OpCreate)
	return &ComputeImageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ComputeImage entities.
func (c *ComputeImageClient) CreateBulk(builders ...*ComputeImageCreate) *ComputeImageCreateBulk {
	return &ComputeImageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ComputeImage.
func (c *ComputeImageClient) Update() *ComputeImageUpdate {
	mutation := newComputeImageMutation(c.config, OpUpdate)
	return &ComputeImageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ComputeImageClient) UpdateOne(ci *ComputeImage) *ComputeImageUpdateOne {
	mutation := newComputeImageMutation(c.config, OpUpdateOne, withComputeImage(ci))
	return &ComputeImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ComputeImageClient) UpdateOneID(id int32) *ComputeImageUpdateOne {
	mutation := newComputeImageMutation(c.config, OpUpdateOne, withComputeImageID(id))
	return &ComputeImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ComputeImage.
func (c *ComputeImageClient) Delete() *ComputeImageDelete {
	mutation := newComputeImageMutation(c.config, OpDelete)
	return &ComputeImageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ComputeImageClient) DeleteOne(ci *ComputeImage) *ComputeImageDeleteOne {
	return c.DeleteOneID(ci.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ComputeImageClient) DeleteOneID(id int32) *ComputeImageDeleteOne {
	builder := c.Delete().Where(computeimage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ComputeImageDeleteOne{builder}
}

// Query returns a query builder for ComputeImage.
func (c *ComputeImageClient) Query() *ComputeImageQuery {
	return &ComputeImageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeComputeImage},
		inters: c.Interceptors(),
	}
}

// Get returns a ComputeImage entity by its id.
func (c *ComputeImageClient) Get(ctx context.Context, id int32) (*ComputeImage, error) {
	return c.Query().Where(computeimage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ComputeImageClient) GetX(ctx context.Context, id int32) *ComputeImage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ComputeImageClient) Hooks() []Hook {
	return c.hooks.ComputeImage
}

// Interceptors returns the client interceptors.
func (c *ComputeImageClient) Interceptors() []Interceptor {
	return c.inters.ComputeImage
}

func (c *ComputeImageClient) mutate(ctx context.Context, m *ComputeImageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ComputeImageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ComputeImageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ComputeImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ComputeImageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ComputeImage mutation op: %q", m.Op())
	}
}

// ComputeInstanceClient is a client for the ComputeInstance schema.
type ComputeInstanceClient struct {
	config
}

// NewComputeInstanceClient returns a client for the ComputeInstance from the given config.
func NewComputeInstanceClient(c config) *ComputeInstanceClient {
	return &ComputeInstanceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `computeinstance.Hooks(f(g(h())))`.
func (c *ComputeInstanceClient) Use(hooks ...Hook) {
	c.hooks.ComputeInstance = append(c.hooks.ComputeInstance, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `computeinstance.Intercept(f(g(h())))`.
func (c *ComputeInstanceClient) Intercept(interceptors ...Interceptor) {
	c.inters.ComputeInstance = append(c.inters.ComputeInstance, interceptors...)
}

// Create returns a builder for creating a ComputeInstance entity.
func (c *ComputeInstanceClient) Create() *ComputeInstanceCreate {
	mutation := newComputeInstanceMutation(c.config, OpCreate)
	return &ComputeInstanceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ComputeInstance entities.
func (c *ComputeInstanceClient) CreateBulk(builders ...*ComputeInstanceCreate) *ComputeInstanceCreateBulk {
	return &ComputeInstanceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ComputeInstance.
func (c *ComputeInstanceClient) Update() *ComputeInstanceUpdate {
	mutation := newComputeInstanceMutation(c.config, OpUpdate)
	return &ComputeInstanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ComputeInstanceClient) UpdateOne(ci *ComputeInstance) *ComputeInstanceUpdateOne {
	mutation := newComputeInstanceMutation(c.config, OpUpdateOne, withComputeInstance(ci))
	return &ComputeInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ComputeInstanceClient) UpdateOneID(id uuid.UUID) *ComputeInstanceUpdateOne {
	mutation := newComputeInstanceMutation(c.config, OpUpdateOne, withComputeInstanceID(id))
	return &ComputeInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ComputeInstance.
func (c *ComputeInstanceClient) Delete() *ComputeInstanceDelete {
	mutation := newComputeInstanceMutation(c.config, OpDelete)
	return &ComputeInstanceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ComputeInstanceClient) DeleteOne(ci *ComputeInstance) *ComputeInstanceDeleteOne {
	return c.DeleteOneID(ci.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ComputeInstanceClient) DeleteOneID(id uuid.UUID) *ComputeInstanceDeleteOne {
	builder := c.Delete().Where(computeinstance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ComputeInstanceDeleteOne{builder}
}

// Query returns a query builder for ComputeInstance.
func (c *ComputeInstanceClient) Query() *ComputeInstanceQuery {
	return &ComputeInstanceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeComputeInstance},
		inters: c.Interceptors(),
	}
}

// Get returns a ComputeInstance entity by its id.
func (c *ComputeInstanceClient) Get(ctx context.Context, id uuid.UUID) (*ComputeInstance, error) {
	return c.Query().Where(computeinstance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ComputeInstanceClient) GetX(ctx context.Context, id uuid.UUID) *ComputeInstance {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ComputeInstanceClient) Hooks() []Hook {
	return c.hooks.ComputeInstance
}

// Interceptors returns the client interceptors.
func (c *ComputeInstanceClient) Interceptors() []Interceptor {
	return c.inters.ComputeInstance
}

func (c *ComputeInstanceClient) mutate(ctx context.Context, m *ComputeInstanceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ComputeInstanceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ComputeInstanceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ComputeInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ComputeInstanceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ComputeInstance mutation op: %q", m.Op())
	}
}

// ComputeSpecClient is a client for the ComputeSpec schema.
type ComputeSpecClient struct {
	config
}

// NewComputeSpecClient returns a client for the ComputeSpec from the given config.
func NewComputeSpecClient(c config) *ComputeSpecClient {
	return &ComputeSpecClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `computespec.Hooks(f(g(h())))`.
func (c *ComputeSpecClient) Use(hooks ...Hook) {
	c.hooks.ComputeSpec = append(c.hooks.ComputeSpec, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `computespec.Intercept(f(g(h())))`.
func (c *ComputeSpecClient) Intercept(interceptors ...Interceptor) {
	c.inters.ComputeSpec = append(c.inters.ComputeSpec, interceptors...)
}

// Create returns a builder for creating a ComputeSpec entity.
func (c *ComputeSpecClient) Create() *ComputeSpecCreate {
	mutation := newComputeSpecMutation(c.config, OpCreate)
	return &ComputeSpecCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ComputeSpec entities.
func (c *ComputeSpecClient) CreateBulk(builders ...*ComputeSpecCreate) *ComputeSpecCreateBulk {
	return &ComputeSpecCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ComputeSpec.
func (c *ComputeSpecClient) Update() *ComputeSpecUpdate {
	mutation := newComputeSpecMutation(c.config, OpUpdate)
	return &ComputeSpecUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ComputeSpecClient) UpdateOne(cs *ComputeSpec) *ComputeSpecUpdateOne {
	mutation := newComputeSpecMutation(c.config, OpUpdateOne, withComputeSpec(cs))
	return &ComputeSpecUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ComputeSpecClient) UpdateOneID(id int32) *ComputeSpecUpdateOne {
	mutation := newComputeSpecMutation(c.config, OpUpdateOne, withComputeSpecID(id))
	return &ComputeSpecUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ComputeSpec.
func (c *ComputeSpecClient) Delete() *ComputeSpecDelete {
	mutation := newComputeSpecMutation(c.config, OpDelete)
	return &ComputeSpecDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ComputeSpecClient) DeleteOne(cs *ComputeSpec) *ComputeSpecDeleteOne {
	return c.DeleteOneID(cs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ComputeSpecClient) DeleteOneID(id int32) *ComputeSpecDeleteOne {
	builder := c.Delete().Where(computespec.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ComputeSpecDeleteOne{builder}
}

// Query returns a query builder for ComputeSpec.
func (c *ComputeSpecClient) Query() *ComputeSpecQuery {
	return &ComputeSpecQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeComputeSpec},
		inters: c.Interceptors(),
	}
}

// Get returns a ComputeSpec entity by its id.
func (c *ComputeSpecClient) Get(ctx context.Context, id int32) (*ComputeSpec, error) {
	return c.Query().Where(computespec.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ComputeSpecClient) GetX(ctx context.Context, id int32) *ComputeSpec {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ComputeSpecClient) Hooks() []Hook {
	return c.hooks.ComputeSpec
}

// Interceptors returns the client interceptors.
func (c *ComputeSpecClient) Interceptors() []Interceptor {
	return c.inters.ComputeSpec
}

func (c *ComputeSpecClient) mutate(ctx context.Context, m *ComputeSpecMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ComputeSpecCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ComputeSpecUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ComputeSpecUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ComputeSpecDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ComputeSpec mutation op: %q", m.Op())
	}
}

// DomainBindingClient is a client for the DomainBinding schema.
type DomainBindingClient struct {
	config
}

// NewDomainBindingClient returns a client for the DomainBinding from the given config.
func NewDomainBindingClient(c config) *DomainBindingClient {
	return &DomainBindingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `domainbinding.Hooks(f(g(h())))`.
func (c *DomainBindingClient) Use(hooks ...Hook) {
	c.hooks.DomainBinding = append(c.hooks.DomainBinding, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `domainbinding.Intercept(f(g(h())))`.
func (c *DomainBindingClient) Intercept(interceptors ...Interceptor) {
	c.inters.DomainBinding = append(c.inters.DomainBinding, interceptors...)
}

// Create returns a builder for creating a DomainBinding entity.
func (c *DomainBindingClient) Create() *DomainBindingCreate {
	mutation := newDomainBindingMutation(c.config, OpCreate)
	return &DomainBindingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DomainBinding entities.
func (c *DomainBindingClient) CreateBulk(builders ...*DomainBindingCreate) *DomainBindingCreateBulk {
	return &DomainBindingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DomainBinding.
func (c *DomainBindingClient) Update() *DomainBindingUpdate {
	mutation := newDomainBindingMutation(c.config, OpUpdate)
	return &DomainBindingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DomainBindingClient) UpdateOne(db *DomainBinding) *DomainBindingUpdateOne {
	mutation := newDomainBindingMutation(c.config, OpUpdateOne, withDomainBinding(db))
	return &DomainBindingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DomainBindingClient) UpdateOneID(id uuid.UUID) *DomainBindingUpdateOne {
	mutation := newDomainBindingMutation(c.config, OpUpdateOne, withDomainBindingID(id))
	return &DomainBindingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DomainBinding.
func (c *DomainBindingClient) Delete() *DomainBindingDelete {
	mutation := newDomainBindingMutation(c.config, OpDelete)
	return &DomainBindingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DomainBindingClient) DeleteOne(db *DomainBinding) *DomainBindingDeleteOne {
	return c.DeleteOneID(db.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DomainBindingClient) DeleteOneID(id uuid.UUID) *DomainBindingDeleteOne {
	builder := c.Delete().Where(domainbinding.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DomainBindingDeleteOne{builder}
}

// Query returns a query builder for DomainBinding.
func (c *DomainBindingClient) Query() *DomainBindingQuery {
	return &DomainBindingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDomainBinding},
		inters: c.Interceptors(),
	}
}

// Get returns a DomainBinding entity by its id.
func (c *DomainBindingClient) Get(ctx context.Context, id uuid.UUID) (*DomainBinding, error) {
	return c.Query().Where(domainbinding.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DomainBindingClient) GetX(ctx context.Context, id uuid.UUID) *DomainBinding {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DomainBindingClient) Hooks() []Hook {
	return c.hooks.DomainBinding
}

// Interceptors returns the client interceptors.
func (c *DomainBindingClient) Interceptors() []Interceptor {
	return c.inters.DomainBinding
}

func (c *DomainBindingClient) mutate(ctx context.Context, m *DomainBindingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DomainBindingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DomainBindingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DomainBindingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DomainBindingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DomainBinding mutation op: %q", m.Op())
	}
}

// EmployeeClient is a client for the Employee schema.
type EmployeeClient struct {
	config
}

// NewEmployeeClient returns a client for the Employee from the given config.
func NewEmployeeClient(c config) *EmployeeClient {
	return &EmployeeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `employee.Hooks(f(g(h())))`.
func (c *EmployeeClient) Use(hooks ...Hook) {
	c.hooks.Employee = append(c.hooks.Employee, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `employee.Intercept(f(g(h())))`.
func (c *EmployeeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Employee = append(c.inters.Employee, interceptors...)
}

// Create returns a builder for creating a Employee entity.
func (c *EmployeeClient) Create() *EmployeeCreate {
	mutation := newEmployeeMutation(c.config, OpCreate)
	return &EmployeeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Employee entities.
func (c *EmployeeClient) CreateBulk(builders ...*EmployeeCreate) *EmployeeCreateBulk {
	return &EmployeeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Employee.
func (c *EmployeeClient) Update() *EmployeeUpdate {
	mutation := newEmployeeMutation(c.config, OpUpdate)
	return &EmployeeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmployeeClient) UpdateOne(e *Employee) *EmployeeUpdateOne {
	mutation := newEmployeeMutation(c.config, OpUpdateOne, withEmployee(e))
	return &EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmployeeClient) UpdateOneID(id int) *EmployeeUpdateOne {
	mutation := newEmployeeMutation(c.config, OpUpdateOne, withEmployeeID(id))
	return &EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Employee.
func (c *EmployeeClient) Delete() *EmployeeDelete {
	mutation := newEmployeeMutation(c.config, OpDelete)
	return &EmployeeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmployeeClient) DeleteOne(e *Employee) *EmployeeDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmployeeClient) DeleteOneID(id int) *EmployeeDeleteOne {
	builder := c.Delete().Where(employee.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmployeeDeleteOne{builder}
}

// Query returns a query builder for Employee.
func (c *EmployeeClient) Query() *EmployeeQuery {
	return &EmployeeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEmployee},
		inters: c.Interceptors(),
	}
}

// Get returns a Employee entity by its id.
func (c *EmployeeClient) Get(ctx context.Context, id int) (*Employee, error) {
	return c.Query().Where(employee.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmployeeClient) GetX(ctx context.Context, id int) *Employee {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EmployeeClient) Hooks() []Hook {
	return c.hooks.Employee
}

// Interceptors returns the client interceptors.
func (c *EmployeeClient) Interceptors() []Interceptor {
	return c.inters.Employee
}

func (c *EmployeeClient) mutate(ctx context.Context, m *EmployeeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EmployeeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EmployeeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EmployeeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Employee mutation op: %q", m.Op())
	}
}

// GatewayClient is a client for the Gateway schema.
type GatewayClient struct {
	config
}

// NewGatewayClient returns a client for the Gateway from the given config.
func NewGatewayClient(c config) *GatewayClient {
	return &GatewayClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `gateway.Hooks(f(g(h())))`.
func (c *GatewayClient) Use(hooks ...Hook) {
	c.hooks.Gateway = append(c.hooks.Gateway, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `gateway.Intercept(f(g(h())))`.
func (c *GatewayClient) Intercept(interceptors ...Interceptor) {
	c.inters.Gateway = append(c.inters.Gateway, interceptors...)
}

// Create returns a builder for creating a Gateway entity.
func (c *GatewayClient) Create() *GatewayCreate {
	mutation := newGatewayMutation(c.config, OpCreate)
	return &GatewayCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Gateway entities.
func (c *GatewayClient) CreateBulk(builders ...*GatewayCreate) *GatewayCreateBulk {
	return &GatewayCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Gateway.
func (c *GatewayClient) Update() *GatewayUpdate {
	mutation := newGatewayMutation(c.config, OpUpdate)
	return &GatewayUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GatewayClient) UpdateOne(ga *Gateway) *GatewayUpdateOne {
	mutation := newGatewayMutation(c.config, OpUpdateOne, withGateway(ga))
	return &GatewayUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GatewayClient) UpdateOneID(id uuid.UUID) *GatewayUpdateOne {
	mutation := newGatewayMutation(c.config, OpUpdateOne, withGatewayID(id))
	return &GatewayUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Gateway.
func (c *GatewayClient) Delete() *GatewayDelete {
	mutation := newGatewayMutation(c.config, OpDelete)
	return &GatewayDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GatewayClient) DeleteOne(ga *Gateway) *GatewayDeleteOne {
	return c.DeleteOneID(ga.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GatewayClient) DeleteOneID(id uuid.UUID) *GatewayDeleteOne {
	builder := c.Delete().Where(gateway.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GatewayDeleteOne{builder}
}

// Query returns a query builder for Gateway.
func (c *GatewayClient) Query() *GatewayQuery {
	return &GatewayQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGateway},
		inters: c.Interceptors(),
	}
}

// Get returns a Gateway entity by its id.
func (c *GatewayClient) Get(ctx context.Context, id uuid.UUID) (*Gateway, error) {
	return c.Query().Where(gateway.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GatewayClient) GetX(ctx context.Context, id uuid.UUID) *Gateway {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GatewayClient) Hooks() []Hook {
	return c.hooks.Gateway
}

// Interceptors returns the client interceptors.
func (c *GatewayClient) Interceptors() []Interceptor {
	return c.inters.Gateway
}

func (c *GatewayClient) mutate(ctx context.Context, m *GatewayMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GatewayCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GatewayUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GatewayUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GatewayDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Gateway mutation op: %q", m.Op())
	}
}

// GatewayPortClient is a client for the GatewayPort schema.
type GatewayPortClient struct {
	config
}

// NewGatewayPortClient returns a client for the GatewayPort from the given config.
func NewGatewayPortClient(c config) *GatewayPortClient {
	return &GatewayPortClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `gatewayport.Hooks(f(g(h())))`.
func (c *GatewayPortClient) Use(hooks ...Hook) {
	c.hooks.GatewayPort = append(c.hooks.GatewayPort, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `gatewayport.Intercept(f(g(h())))`.
func (c *GatewayPortClient) Intercept(interceptors ...Interceptor) {
	c.inters.GatewayPort = append(c.inters.GatewayPort, interceptors...)
}

// Create returns a builder for creating a GatewayPort entity.
func (c *GatewayPortClient) Create() *GatewayPortCreate {
	mutation := newGatewayPortMutation(c.config, OpCreate)
	return &GatewayPortCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GatewayPort entities.
func (c *GatewayPortClient) CreateBulk(builders ...*GatewayPortCreate) *GatewayPortCreateBulk {
	return &GatewayPortCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GatewayPort.
func (c *GatewayPortClient) Update() *GatewayPortUpdate {
	mutation := newGatewayPortMutation(c.config, OpUpdate)
	return &GatewayPortUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GatewayPortClient) UpdateOne(gp *GatewayPort) *GatewayPortUpdateOne {
	mutation := newGatewayPortMutation(c.config, OpUpdateOne, withGatewayPort(gp))
	return &GatewayPortUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GatewayPortClient) UpdateOneID(id uuid.UUID) *GatewayPortUpdateOne {
	mutation := newGatewayPortMutation(c.config, OpUpdateOne, withGatewayPortID(id))
	return &GatewayPortUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GatewayPort.
func (c *GatewayPortClient) Delete() *GatewayPortDelete {
	mutation := newGatewayPortMutation(c.config, OpDelete)
	return &GatewayPortDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GatewayPortClient) DeleteOne(gp *GatewayPort) *GatewayPortDeleteOne {
	return c.DeleteOneID(gp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GatewayPortClient) DeleteOneID(id uuid.UUID) *GatewayPortDeleteOne {
	builder := c.Delete().Where(gatewayport.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GatewayPortDeleteOne{builder}
}

// Query returns a query builder for GatewayPort.
func (c *GatewayPortClient) Query() *GatewayPortQuery {
	return &GatewayPortQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGatewayPort},
		inters: c.Interceptors(),
	}
}

// Get returns a GatewayPort entity by its id.
func (c *GatewayPortClient) Get(ctx context.Context, id uuid.UUID) (*GatewayPort, error) {
	return c.Query().Where(gatewayport.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GatewayPortClient) GetX(ctx context.Context, id uuid.UUID) *GatewayPort {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GatewayPortClient) Hooks() []Hook {
	return c.hooks.GatewayPort
}

// Interceptors returns the client interceptors.
func (c *GatewayPortClient) Interceptors() []Interceptor {
	return c.inters.GatewayPort
}

func (c *GatewayPortClient) mutate(ctx context.Context, m *GatewayPortMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GatewayPortCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GatewayPortUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GatewayPortUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GatewayPortDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown GatewayPort mutation op: %q", m.Op())
	}
}

// NetworkMappingClient is a client for the NetworkMapping schema.
type NetworkMappingClient struct {
	config
}

// NewNetworkMappingClient returns a client for the NetworkMapping from the given config.
func NewNetworkMappingClient(c config) *NetworkMappingClient {
	return &NetworkMappingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `networkmapping.Hooks(f(g(h())))`.
func (c *NetworkMappingClient) Use(hooks ...Hook) {
	c.hooks.NetworkMapping = append(c.hooks.NetworkMapping, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `networkmapping.Intercept(f(g(h())))`.
func (c *NetworkMappingClient) Intercept(interceptors ...Interceptor) {
	c.inters.NetworkMapping = append(c.inters.NetworkMapping, interceptors...)
}

// Create returns a builder for creating a NetworkMapping entity.
func (c *NetworkMappingClient) Create() *NetworkMappingCreate {
	mutation := newNetworkMappingMutation(c.config, OpCreate)
	return &NetworkMappingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NetworkMapping entities.
func (c *NetworkMappingClient) CreateBulk(builders ...*NetworkMappingCreate) *NetworkMappingCreateBulk {
	return &NetworkMappingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NetworkMapping.
func (c *NetworkMappingClient) Update() *NetworkMappingUpdate {
	mutation := newNetworkMappingMutation(c.config, OpUpdate)
	return &NetworkMappingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NetworkMappingClient) UpdateOne(nm *NetworkMapping) *NetworkMappingUpdateOne {
	mutation := newNetworkMappingMutation(c.config, OpUpdateOne, withNetworkMapping(nm))
	return &NetworkMappingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NetworkMappingClient) UpdateOneID(id uuid.UUID) *NetworkMappingUpdateOne {
	mutation := newNetworkMappingMutation(c.config, OpUpdateOne, withNetworkMappingID(id))
	return &NetworkMappingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NetworkMapping.
func (c *NetworkMappingClient) Delete() *NetworkMappingDelete {
	mutation := newNetworkMappingMutation(c.config, OpDelete)
	return &NetworkMappingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NetworkMappingClient) DeleteOne(nm *NetworkMapping) *NetworkMappingDeleteOne {
	return c.DeleteOneID(nm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NetworkMappingClient) DeleteOneID(id uuid.UUID) *NetworkMappingDeleteOne {
	builder := c.Delete().Where(networkmapping.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NetworkMappingDeleteOne{builder}
}

// Query returns a query builder for NetworkMapping.
func (c *NetworkMappingClient) Query() *NetworkMappingQuery {
	return &NetworkMappingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNetworkMapping},
		inters: c.Interceptors(),
	}
}

// Get returns a NetworkMapping entity by its id.
func (c *NetworkMappingClient) Get(ctx context.Context, id uuid.UUID) (*NetworkMapping, error) {
	return c.Query().Where(networkmapping.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NetworkMappingClient) GetX(ctx context.Context, id uuid.UUID) *NetworkMapping {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *NetworkMappingClient) Hooks() []Hook {
	return c.hooks.NetworkMapping
}

// Interceptors returns the client interceptors.
func (c *NetworkMappingClient) Interceptors() []Interceptor {
	return c.inters.NetworkMapping
}

func (c *NetworkMappingClient) mutate(ctx context.Context, m *NetworkMappingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NetworkMappingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NetworkMappingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NetworkMappingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NetworkMappingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown NetworkMapping mutation op: %q", m.Op())
	}
}

// ScriptClient is a client for the Script schema.
type ScriptClient struct {
	config
}

// NewScriptClient returns a client for the Script from the given config.
func NewScriptClient(c config) *ScriptClient {
	return &ScriptClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `script.Hooks(f(g(h())))`.
func (c *ScriptClient) Use(hooks ...Hook) {
	c.hooks.Script = append(c.hooks.Script, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `script.Intercept(f(g(h())))`.
func (c *ScriptClient) Intercept(interceptors ...Interceptor) {
	c.inters.Script = append(c.inters.Script, interceptors...)
}

// Create returns a builder for creating a Script entity.
func (c *ScriptClient) Create() *ScriptCreate {
	mutation := newScriptMutation(c.config, OpCreate)
	return &ScriptCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Script entities.
func (c *ScriptClient) CreateBulk(builders ...*ScriptCreate) *ScriptCreateBulk {
	return &ScriptCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Script.
func (c *ScriptClient) Update() *ScriptUpdate {
	mutation := newScriptMutation(c.config, OpUpdate)
	return &ScriptUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ScriptClient) UpdateOne(s *Script) *ScriptUpdateOne {
	mutation := newScriptMutation(c.config, OpUpdateOne, withScript(s))
	return &ScriptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ScriptClient) UpdateOneID(id int32) *ScriptUpdateOne {
	mutation := newScriptMutation(c.config, OpUpdateOne, withScriptID(id))
	return &ScriptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Script.
func (c *ScriptClient) Delete() *ScriptDelete {
	mutation := newScriptMutation(c.config, OpDelete)
	return &ScriptDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ScriptClient) DeleteOne(s *Script) *ScriptDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ScriptClient) DeleteOneID(id int32) *ScriptDeleteOne {
	builder := c.Delete().Where(script.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ScriptDeleteOne{builder}
}

// Query returns a query builder for Script.
func (c *ScriptClient) Query() *ScriptQuery {
	return &ScriptQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeScript},
		inters: c.Interceptors(),
	}
}

// Get returns a Script entity by its id.
func (c *ScriptClient) Get(ctx context.Context, id int32) (*Script, error) {
	return c.Query().Where(script.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ScriptClient) GetX(ctx context.Context, id int32) *Script {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryScriptExecutionRecords queries the scriptExecutionRecords edge of a Script.
func (c *ScriptClient) QueryScriptExecutionRecords(s *Script) *ScriptExecutionRecordQuery {
	query := (&ScriptExecutionRecordClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(script.Table, script.FieldID, id),
			sqlgraph.To(scriptexecutionrecord.Table, scriptexecutionrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, script.ScriptExecutionRecordsTable, script.ScriptExecutionRecordsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ScriptClient) Hooks() []Hook {
	return c.hooks.Script
}

// Interceptors returns the client interceptors.
func (c *ScriptClient) Interceptors() []Interceptor {
	return c.inters.Script
}

func (c *ScriptClient) mutate(ctx context.Context, m *ScriptMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ScriptCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ScriptUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ScriptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ScriptDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Script mutation op: %q", m.Op())
	}
}

// ScriptExecutionRecordClient is a client for the ScriptExecutionRecord schema.
type ScriptExecutionRecordClient struct {
	config
}

// NewScriptExecutionRecordClient returns a client for the ScriptExecutionRecord from the given config.
func NewScriptExecutionRecordClient(c config) *ScriptExecutionRecordClient {
	return &ScriptExecutionRecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `scriptexecutionrecord.Hooks(f(g(h())))`.
func (c *ScriptExecutionRecordClient) Use(hooks ...Hook) {
	c.hooks.ScriptExecutionRecord = append(c.hooks.ScriptExecutionRecord, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `scriptexecutionrecord.Intercept(f(g(h())))`.
func (c *ScriptExecutionRecordClient) Intercept(interceptors ...Interceptor) {
	c.inters.ScriptExecutionRecord = append(c.inters.ScriptExecutionRecord, interceptors...)
}

// Create returns a builder for creating a ScriptExecutionRecord entity.
func (c *ScriptExecutionRecordClient) Create() *ScriptExecutionRecordCreate {
	mutation := newScriptExecutionRecordMutation(c.config, OpCreate)
	return &ScriptExecutionRecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ScriptExecutionRecord entities.
func (c *ScriptExecutionRecordClient) CreateBulk(builders ...*ScriptExecutionRecordCreate) *ScriptExecutionRecordCreateBulk {
	return &ScriptExecutionRecordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ScriptExecutionRecord.
func (c *ScriptExecutionRecordClient) Update() *ScriptExecutionRecordUpdate {
	mutation := newScriptExecutionRecordMutation(c.config, OpUpdate)
	return &ScriptExecutionRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ScriptExecutionRecordClient) UpdateOne(ser *ScriptExecutionRecord) *ScriptExecutionRecordUpdateOne {
	mutation := newScriptExecutionRecordMutation(c.config, OpUpdateOne, withScriptExecutionRecord(ser))
	return &ScriptExecutionRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ScriptExecutionRecordClient) UpdateOneID(id int32) *ScriptExecutionRecordUpdateOne {
	mutation := newScriptExecutionRecordMutation(c.config, OpUpdateOne, withScriptExecutionRecordID(id))
	return &ScriptExecutionRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ScriptExecutionRecord.
func (c *ScriptExecutionRecordClient) Delete() *ScriptExecutionRecordDelete {
	mutation := newScriptExecutionRecordMutation(c.config, OpDelete)
	return &ScriptExecutionRecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ScriptExecutionRecordClient) DeleteOne(ser *ScriptExecutionRecord) *ScriptExecutionRecordDeleteOne {
	return c.DeleteOneID(ser.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ScriptExecutionRecordClient) DeleteOneID(id int32) *ScriptExecutionRecordDeleteOne {
	builder := c.Delete().Where(scriptexecutionrecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ScriptExecutionRecordDeleteOne{builder}
}

// Query returns a query builder for ScriptExecutionRecord.
func (c *ScriptExecutionRecordClient) Query() *ScriptExecutionRecordQuery {
	return &ScriptExecutionRecordQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeScriptExecutionRecord},
		inters: c.Interceptors(),
	}
}

// Get returns a ScriptExecutionRecord entity by its id.
func (c *ScriptExecutionRecordClient) Get(ctx context.Context, id int32) (*ScriptExecutionRecord, error) {
	return c.Query().Where(scriptexecutionrecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ScriptExecutionRecordClient) GetX(ctx context.Context, id int32) *ScriptExecutionRecord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryScript queries the script edge of a ScriptExecutionRecord.
func (c *ScriptExecutionRecordClient) QueryScript(ser *ScriptExecutionRecord) *ScriptQuery {
	query := (&ScriptClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ser.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(scriptexecutionrecord.Table, scriptexecutionrecord.FieldID, id),
			sqlgraph.To(script.Table, script.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, scriptexecutionrecord.ScriptTable, scriptexecutionrecord.ScriptColumn),
		)
		fromV = sqlgraph.Neighbors(ser.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ScriptExecutionRecordClient) Hooks() []Hook {
	return c.hooks.ScriptExecutionRecord
}

// Interceptors returns the client interceptors.
func (c *ScriptExecutionRecordClient) Interceptors() []Interceptor {
	return c.inters.ScriptExecutionRecord
}

func (c *ScriptExecutionRecordClient) mutate(ctx context.Context, m *ScriptExecutionRecordMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ScriptExecutionRecordCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ScriptExecutionRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ScriptExecutionRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ScriptExecutionRecordDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ScriptExecutionRecord mutation op: %q", m.Op())
	}
}

// StorageClient is a client for the Storage schema.
type StorageClient struct {
	config
}

// NewStorageClient returns a client for the Storage from the given config.
func NewStorageClient(c config) *StorageClient {
	return &StorageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `storage.Hooks(f(g(h())))`.
func (c *StorageClient) Use(hooks ...Hook) {
	c.hooks.Storage = append(c.hooks.Storage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `storage.Intercept(f(g(h())))`.
func (c *StorageClient) Intercept(interceptors ...Interceptor) {
	c.inters.Storage = append(c.inters.Storage, interceptors...)
}

// Create returns a builder for creating a Storage entity.
func (c *StorageClient) Create() *StorageCreate {
	mutation := newStorageMutation(c.config, OpCreate)
	return &StorageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Storage entities.
func (c *StorageClient) CreateBulk(builders ...*StorageCreate) *StorageCreateBulk {
	return &StorageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Storage.
func (c *StorageClient) Update() *StorageUpdate {
	mutation := newStorageMutation(c.config, OpUpdate)
	return &StorageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StorageClient) UpdateOne(s *Storage) *StorageUpdateOne {
	mutation := newStorageMutation(c.config, OpUpdateOne, withStorage(s))
	return &StorageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StorageClient) UpdateOneID(id uuid.UUID) *StorageUpdateOne {
	mutation := newStorageMutation(c.config, OpUpdateOne, withStorageID(id))
	return &StorageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Storage.
func (c *StorageClient) Delete() *StorageDelete {
	mutation := newStorageMutation(c.config, OpDelete)
	return &StorageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StorageClient) DeleteOne(s *Storage) *StorageDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StorageClient) DeleteOneID(id uuid.UUID) *StorageDeleteOne {
	builder := c.Delete().Where(storage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StorageDeleteOne{builder}
}

// Query returns a query builder for Storage.
func (c *StorageClient) Query() *StorageQuery {
	return &StorageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStorage},
		inters: c.Interceptors(),
	}
}

// Get returns a Storage entity by its id.
func (c *StorageClient) Get(ctx context.Context, id uuid.UUID) (*Storage, error) {
	return c.Query().Where(storage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StorageClient) GetX(ctx context.Context, id uuid.UUID) *Storage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *StorageClient) Hooks() []Hook {
	return c.hooks.Storage
}

// Interceptors returns the client interceptors.
func (c *StorageClient) Interceptors() []Interceptor {
	return c.inters.Storage
}

func (c *StorageClient) mutate(ctx context.Context, m *StorageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StorageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StorageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StorageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StorageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Storage mutation op: %q", m.Op())
	}
}

// TaskClient is a client for the Task schema.
type TaskClient struct {
	config
}

// NewTaskClient returns a client for the Task from the given config.
func NewTaskClient(c config) *TaskClient {
	return &TaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `task.Hooks(f(g(h())))`.
func (c *TaskClient) Use(hooks ...Hook) {
	c.hooks.Task = append(c.hooks.Task, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `task.Intercept(f(g(h())))`.
func (c *TaskClient) Intercept(interceptors ...Interceptor) {
	c.inters.Task = append(c.inters.Task, interceptors...)
}

// Create returns a builder for creating a Task entity.
func (c *TaskClient) Create() *TaskCreate {
	mutation := newTaskMutation(c.config, OpCreate)
	return &TaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Task entities.
func (c *TaskClient) CreateBulk(builders ...*TaskCreate) *TaskCreateBulk {
	return &TaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Task.
func (c *TaskClient) Update() *TaskUpdate {
	mutation := newTaskMutation(c.config, OpUpdate)
	return &TaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskClient) UpdateOne(t *Task) *TaskUpdateOne {
	mutation := newTaskMutation(c.config, OpUpdateOne, withTask(t))
	return &TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskClient) UpdateOneID(id uuid.UUID) *TaskUpdateOne {
	mutation := newTaskMutation(c.config, OpUpdateOne, withTaskID(id))
	return &TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Task.
func (c *TaskClient) Delete() *TaskDelete {
	mutation := newTaskMutation(c.config, OpDelete)
	return &TaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TaskClient) DeleteOne(t *Task) *TaskDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TaskClient) DeleteOneID(id uuid.UUID) *TaskDeleteOne {
	builder := c.Delete().Where(task.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskDeleteOne{builder}
}

// Query returns a query builder for Task.
func (c *TaskClient) Query() *TaskQuery {
	return &TaskQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTask},
		inters: c.Interceptors(),
	}
}

// Get returns a Task entity by its id.
func (c *TaskClient) Get(ctx context.Context, id uuid.UUID) (*Task, error) {
	return c.Query().Where(task.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskClient) GetX(ctx context.Context, id uuid.UUID) *Task {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TaskClient) Hooks() []Hook {
	return c.hooks.Task
}

// Interceptors returns the client interceptors.
func (c *TaskClient) Interceptors() []Interceptor {
	return c.inters.Task
}

func (c *TaskClient) mutate(ctx context.Context, m *TaskMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TaskCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TaskUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TaskDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Task mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Agent, ComputeImage, ComputeInstance, ComputeSpec, DomainBinding, Employee,
		Gateway, GatewayPort, NetworkMapping, Script, ScriptExecutionRecord, Storage,
		Task, User []ent.Hook
	}
	inters struct {
		Agent, ComputeImage, ComputeInstance, ComputeSpec, DomainBinding, Employee,
		Gateway, GatewayPort, NetworkMapping, Script, ScriptExecutionRecord, Storage,
		Task, User []ent.Interceptor
	}
)
