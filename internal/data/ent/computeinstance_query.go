// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/computeinstance"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/networkmapping"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/predicate"
)

// ComputeInstanceQuery is the builder for querying ComputeInstance entities.
type ComputeInstanceQuery struct {
	config
	ctx                 *QueryContext
	order               []computeinstance.OrderOption
	inters              []Interceptor
	predicates          []predicate.ComputeInstance
	withNetworkMappings *NetworkMappingQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ComputeInstanceQuery builder.
func (ciq *ComputeInstanceQuery) Where(ps ...predicate.ComputeInstance) *ComputeInstanceQuery {
	ciq.predicates = append(ciq.predicates, ps...)
	return ciq
}

// Limit the number of records to be returned by this query.
func (ciq *ComputeInstanceQuery) Limit(limit int) *ComputeInstanceQuery {
	ciq.ctx.Limit = &limit
	return ciq
}

// Offset to start from.
func (ciq *ComputeInstanceQuery) Offset(offset int) *ComputeInstanceQuery {
	ciq.ctx.Offset = &offset
	return ciq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ciq *ComputeInstanceQuery) Unique(unique bool) *ComputeInstanceQuery {
	ciq.ctx.Unique = &unique
	return ciq
}

// Order specifies how the records should be ordered.
func (ciq *ComputeInstanceQuery) Order(o ...computeinstance.OrderOption) *ComputeInstanceQuery {
	ciq.order = append(ciq.order, o...)
	return ciq
}

// QueryNetworkMappings chains the current query on the "networkMappings" edge.
func (ciq *ComputeInstanceQuery) QueryNetworkMappings() *NetworkMappingQuery {
	query := (&NetworkMappingClient{config: ciq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ciq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ciq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(computeinstance.Table, computeinstance.FieldID, selector),
			sqlgraph.To(networkmapping.Table, networkmapping.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, computeinstance.NetworkMappingsTable, computeinstance.NetworkMappingsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ciq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ComputeInstance entity from the query.
// Returns a *NotFoundError when no ComputeInstance was found.
func (ciq *ComputeInstanceQuery) First(ctx context.Context) (*ComputeInstance, error) {
	nodes, err := ciq.Limit(1).All(setContextOp(ctx, ciq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{computeinstance.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ciq *ComputeInstanceQuery) FirstX(ctx context.Context) *ComputeInstance {
	node, err := ciq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ComputeInstance ID from the query.
// Returns a *NotFoundError when no ComputeInstance ID was found.
func (ciq *ComputeInstanceQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ciq.Limit(1).IDs(setContextOp(ctx, ciq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{computeinstance.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ciq *ComputeInstanceQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := ciq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ComputeInstance entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ComputeInstance entity is found.
// Returns a *NotFoundError when no ComputeInstance entities are found.
func (ciq *ComputeInstanceQuery) Only(ctx context.Context) (*ComputeInstance, error) {
	nodes, err := ciq.Limit(2).All(setContextOp(ctx, ciq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{computeinstance.Label}
	default:
		return nil, &NotSingularError{computeinstance.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ciq *ComputeInstanceQuery) OnlyX(ctx context.Context) *ComputeInstance {
	node, err := ciq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ComputeInstance ID in the query.
// Returns a *NotSingularError when more than one ComputeInstance ID is found.
// Returns a *NotFoundError when no entities are found.
func (ciq *ComputeInstanceQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ciq.Limit(2).IDs(setContextOp(ctx, ciq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{computeinstance.Label}
	default:
		err = &NotSingularError{computeinstance.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ciq *ComputeInstanceQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := ciq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ComputeInstances.
func (ciq *ComputeInstanceQuery) All(ctx context.Context) ([]*ComputeInstance, error) {
	ctx = setContextOp(ctx, ciq.ctx, "All")
	if err := ciq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ComputeInstance, *ComputeInstanceQuery]()
	return withInterceptors[[]*ComputeInstance](ctx, ciq, qr, ciq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ciq *ComputeInstanceQuery) AllX(ctx context.Context) []*ComputeInstance {
	nodes, err := ciq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ComputeInstance IDs.
func (ciq *ComputeInstanceQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if ciq.ctx.Unique == nil && ciq.path != nil {
		ciq.Unique(true)
	}
	ctx = setContextOp(ctx, ciq.ctx, "IDs")
	if err = ciq.Select(computeinstance.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ciq *ComputeInstanceQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := ciq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ciq *ComputeInstanceQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ciq.ctx, "Count")
	if err := ciq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ciq, querierCount[*ComputeInstanceQuery](), ciq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ciq *ComputeInstanceQuery) CountX(ctx context.Context) int {
	count, err := ciq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ciq *ComputeInstanceQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ciq.ctx, "Exist")
	switch _, err := ciq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ciq *ComputeInstanceQuery) ExistX(ctx context.Context) bool {
	exist, err := ciq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ComputeInstanceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ciq *ComputeInstanceQuery) Clone() *ComputeInstanceQuery {
	if ciq == nil {
		return nil
	}
	return &ComputeInstanceQuery{
		config:              ciq.config,
		ctx:                 ciq.ctx.Clone(),
		order:               append([]computeinstance.OrderOption{}, ciq.order...),
		inters:              append([]Interceptor{}, ciq.inters...),
		predicates:          append([]predicate.ComputeInstance{}, ciq.predicates...),
		withNetworkMappings: ciq.withNetworkMappings.Clone(),
		// clone intermediate query.
		sql:  ciq.sql.Clone(),
		path: ciq.path,
	}
}

// WithNetworkMappings tells the query-builder to eager-load the nodes that are connected to
// the "networkMappings" edge. The optional arguments are used to configure the query builder of the edge.
func (ciq *ComputeInstanceQuery) WithNetworkMappings(opts ...func(*NetworkMappingQuery)) *ComputeInstanceQuery {
	query := (&NetworkMappingClient{config: ciq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ciq.withNetworkMappings = query
	return ciq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Owner string `json:"owner,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ComputeInstance.Query().
//		GroupBy(computeinstance.FieldOwner).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ciq *ComputeInstanceQuery) GroupBy(field string, fields ...string) *ComputeInstanceGroupBy {
	ciq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ComputeInstanceGroupBy{build: ciq}
	grbuild.flds = &ciq.ctx.Fields
	grbuild.label = computeinstance.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Owner string `json:"owner,omitempty"`
//	}
//
//	client.ComputeInstance.Query().
//		Select(computeinstance.FieldOwner).
//		Scan(ctx, &v)
func (ciq *ComputeInstanceQuery) Select(fields ...string) *ComputeInstanceSelect {
	ciq.ctx.Fields = append(ciq.ctx.Fields, fields...)
	sbuild := &ComputeInstanceSelect{ComputeInstanceQuery: ciq}
	sbuild.label = computeinstance.Label
	sbuild.flds, sbuild.scan = &ciq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ComputeInstanceSelect configured with the given aggregations.
func (ciq *ComputeInstanceQuery) Aggregate(fns ...AggregateFunc) *ComputeInstanceSelect {
	return ciq.Select().Aggregate(fns...)
}

func (ciq *ComputeInstanceQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ciq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ciq); err != nil {
				return err
			}
		}
	}
	for _, f := range ciq.ctx.Fields {
		if !computeinstance.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ciq.path != nil {
		prev, err := ciq.path(ctx)
		if err != nil {
			return err
		}
		ciq.sql = prev
	}
	return nil
}

func (ciq *ComputeInstanceQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ComputeInstance, error) {
	var (
		nodes       = []*ComputeInstance{}
		_spec       = ciq.querySpec()
		loadedTypes = [1]bool{
			ciq.withNetworkMappings != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ComputeInstance).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ComputeInstance{config: ciq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ciq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ciq.withNetworkMappings; query != nil {
		if err := ciq.loadNetworkMappings(ctx, query, nodes,
			func(n *ComputeInstance) { n.Edges.NetworkMappings = []*NetworkMapping{} },
			func(n *ComputeInstance, e *NetworkMapping) {
				n.Edges.NetworkMappings = append(n.Edges.NetworkMappings, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ciq *ComputeInstanceQuery) loadNetworkMappings(ctx context.Context, query *NetworkMappingQuery, nodes []*ComputeInstance, init func(*ComputeInstance), assign func(*ComputeInstance, *NetworkMapping)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*ComputeInstance)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.NetworkMapping(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(computeinstance.NetworkMappingsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.compute_instance_network_mappings
		if fk == nil {
			return fmt.Errorf(`foreign-key "compute_instance_network_mappings" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "compute_instance_network_mappings" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (ciq *ComputeInstanceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ciq.querySpec()
	_spec.Node.Columns = ciq.ctx.Fields
	if len(ciq.ctx.Fields) > 0 {
		_spec.Unique = ciq.ctx.Unique != nil && *ciq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ciq.driver, _spec)
}

func (ciq *ComputeInstanceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(computeinstance.Table, computeinstance.Columns, sqlgraph.NewFieldSpec(computeinstance.FieldID, field.TypeUUID))
	_spec.From = ciq.sql
	if unique := ciq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ciq.path != nil {
		_spec.Unique = true
	}
	if fields := ciq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, computeinstance.FieldID)
		for i := range fields {
			if fields[i] != computeinstance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ciq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ciq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ciq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ciq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ciq *ComputeInstanceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ciq.driver.Dialect())
	t1 := builder.Table(computeinstance.Table)
	columns := ciq.ctx.Fields
	if len(columns) == 0 {
		columns = computeinstance.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ciq.sql != nil {
		selector = ciq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ciq.ctx.Unique != nil && *ciq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ciq.predicates {
		p(selector)
	}
	for _, p := range ciq.order {
		p(selector)
	}
	if offset := ciq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ciq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ComputeInstanceGroupBy is the group-by builder for ComputeInstance entities.
type ComputeInstanceGroupBy struct {
	selector
	build *ComputeInstanceQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cigb *ComputeInstanceGroupBy) Aggregate(fns ...AggregateFunc) *ComputeInstanceGroupBy {
	cigb.fns = append(cigb.fns, fns...)
	return cigb
}

// Scan applies the selector query and scans the result into the given value.
func (cigb *ComputeInstanceGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cigb.build.ctx, "GroupBy")
	if err := cigb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ComputeInstanceQuery, *ComputeInstanceGroupBy](ctx, cigb.build, cigb, cigb.build.inters, v)
}

func (cigb *ComputeInstanceGroupBy) sqlScan(ctx context.Context, root *ComputeInstanceQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cigb.fns))
	for _, fn := range cigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cigb.flds)+len(cigb.fns))
		for _, f := range *cigb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cigb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cigb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ComputeInstanceSelect is the builder for selecting fields of ComputeInstance entities.
type ComputeInstanceSelect struct {
	*ComputeInstanceQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cis *ComputeInstanceSelect) Aggregate(fns ...AggregateFunc) *ComputeInstanceSelect {
	cis.fns = append(cis.fns, fns...)
	return cis
}

// Scan applies the selector query and scans the result into the given value.
func (cis *ComputeInstanceSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cis.ctx, "Select")
	if err := cis.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ComputeInstanceQuery, *ComputeInstanceSelect](ctx, cis.ComputeInstanceQuery, cis, cis.inters, v)
}

func (cis *ComputeInstanceSelect) sqlScan(ctx context.Context, root *ComputeInstanceQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cis.fns))
	for _, fn := range cis.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cis.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
