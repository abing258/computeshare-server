// Code generated by ent, DO NOT EDIT.

package domainbindding

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldEQ(FieldUserID, v))
}

// FkComputeInstanceID applies equality check predicate on the "fk_compute_instance_id" field. It's identical to FkComputeInstanceIDEQ.
func FkComputeInstanceID(v uuid.UUID) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldEQ(FieldFkComputeInstanceID, v))
}

// FkNetworkMappingID applies equality check predicate on the "fk_network_mapping_id" field. It's identical to FkNetworkMappingIDEQ.
func FkNetworkMappingID(v uuid.UUID) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldEQ(FieldFkNetworkMappingID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldEQ(FieldName, v))
}

// Domain applies equality check predicate on the "domain" field. It's identical to DomainEQ.
func Domain(v string) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldEQ(FieldDomain, v))
}

// GatewayPort applies equality check predicate on the "gateway_port" field. It's identical to GatewayPortEQ.
func GatewayPort(v int) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldEQ(FieldGatewayPort, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldEQ(FieldCreateTime, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldLTE(FieldUserID, v))
}

// FkComputeInstanceIDEQ applies the EQ predicate on the "fk_compute_instance_id" field.
func FkComputeInstanceIDEQ(v uuid.UUID) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldEQ(FieldFkComputeInstanceID, v))
}

// FkComputeInstanceIDNEQ applies the NEQ predicate on the "fk_compute_instance_id" field.
func FkComputeInstanceIDNEQ(v uuid.UUID) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldNEQ(FieldFkComputeInstanceID, v))
}

// FkComputeInstanceIDIn applies the In predicate on the "fk_compute_instance_id" field.
func FkComputeInstanceIDIn(vs ...uuid.UUID) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldIn(FieldFkComputeInstanceID, vs...))
}

// FkComputeInstanceIDNotIn applies the NotIn predicate on the "fk_compute_instance_id" field.
func FkComputeInstanceIDNotIn(vs ...uuid.UUID) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldNotIn(FieldFkComputeInstanceID, vs...))
}

// FkComputeInstanceIDGT applies the GT predicate on the "fk_compute_instance_id" field.
func FkComputeInstanceIDGT(v uuid.UUID) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldGT(FieldFkComputeInstanceID, v))
}

// FkComputeInstanceIDGTE applies the GTE predicate on the "fk_compute_instance_id" field.
func FkComputeInstanceIDGTE(v uuid.UUID) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldGTE(FieldFkComputeInstanceID, v))
}

// FkComputeInstanceIDLT applies the LT predicate on the "fk_compute_instance_id" field.
func FkComputeInstanceIDLT(v uuid.UUID) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldLT(FieldFkComputeInstanceID, v))
}

// FkComputeInstanceIDLTE applies the LTE predicate on the "fk_compute_instance_id" field.
func FkComputeInstanceIDLTE(v uuid.UUID) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldLTE(FieldFkComputeInstanceID, v))
}

// FkNetworkMappingIDEQ applies the EQ predicate on the "fk_network_mapping_id" field.
func FkNetworkMappingIDEQ(v uuid.UUID) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldEQ(FieldFkNetworkMappingID, v))
}

// FkNetworkMappingIDNEQ applies the NEQ predicate on the "fk_network_mapping_id" field.
func FkNetworkMappingIDNEQ(v uuid.UUID) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldNEQ(FieldFkNetworkMappingID, v))
}

// FkNetworkMappingIDIn applies the In predicate on the "fk_network_mapping_id" field.
func FkNetworkMappingIDIn(vs ...uuid.UUID) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldIn(FieldFkNetworkMappingID, vs...))
}

// FkNetworkMappingIDNotIn applies the NotIn predicate on the "fk_network_mapping_id" field.
func FkNetworkMappingIDNotIn(vs ...uuid.UUID) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldNotIn(FieldFkNetworkMappingID, vs...))
}

// FkNetworkMappingIDGT applies the GT predicate on the "fk_network_mapping_id" field.
func FkNetworkMappingIDGT(v uuid.UUID) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldGT(FieldFkNetworkMappingID, v))
}

// FkNetworkMappingIDGTE applies the GTE predicate on the "fk_network_mapping_id" field.
func FkNetworkMappingIDGTE(v uuid.UUID) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldGTE(FieldFkNetworkMappingID, v))
}

// FkNetworkMappingIDLT applies the LT predicate on the "fk_network_mapping_id" field.
func FkNetworkMappingIDLT(v uuid.UUID) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldLT(FieldFkNetworkMappingID, v))
}

// FkNetworkMappingIDLTE applies the LTE predicate on the "fk_network_mapping_id" field.
func FkNetworkMappingIDLTE(v uuid.UUID) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldLTE(FieldFkNetworkMappingID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldContainsFold(FieldName, v))
}

// DomainEQ applies the EQ predicate on the "domain" field.
func DomainEQ(v string) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldEQ(FieldDomain, v))
}

// DomainNEQ applies the NEQ predicate on the "domain" field.
func DomainNEQ(v string) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldNEQ(FieldDomain, v))
}

// DomainIn applies the In predicate on the "domain" field.
func DomainIn(vs ...string) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldIn(FieldDomain, vs...))
}

// DomainNotIn applies the NotIn predicate on the "domain" field.
func DomainNotIn(vs ...string) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldNotIn(FieldDomain, vs...))
}

// DomainGT applies the GT predicate on the "domain" field.
func DomainGT(v string) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldGT(FieldDomain, v))
}

// DomainGTE applies the GTE predicate on the "domain" field.
func DomainGTE(v string) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldGTE(FieldDomain, v))
}

// DomainLT applies the LT predicate on the "domain" field.
func DomainLT(v string) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldLT(FieldDomain, v))
}

// DomainLTE applies the LTE predicate on the "domain" field.
func DomainLTE(v string) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldLTE(FieldDomain, v))
}

// DomainContains applies the Contains predicate on the "domain" field.
func DomainContains(v string) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldContains(FieldDomain, v))
}

// DomainHasPrefix applies the HasPrefix predicate on the "domain" field.
func DomainHasPrefix(v string) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldHasPrefix(FieldDomain, v))
}

// DomainHasSuffix applies the HasSuffix predicate on the "domain" field.
func DomainHasSuffix(v string) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldHasSuffix(FieldDomain, v))
}

// DomainEqualFold applies the EqualFold predicate on the "domain" field.
func DomainEqualFold(v string) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldEqualFold(FieldDomain, v))
}

// DomainContainsFold applies the ContainsFold predicate on the "domain" field.
func DomainContainsFold(v string) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldContainsFold(FieldDomain, v))
}

// GatewayPortEQ applies the EQ predicate on the "gateway_port" field.
func GatewayPortEQ(v int) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldEQ(FieldGatewayPort, v))
}

// GatewayPortNEQ applies the NEQ predicate on the "gateway_port" field.
func GatewayPortNEQ(v int) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldNEQ(FieldGatewayPort, v))
}

// GatewayPortIn applies the In predicate on the "gateway_port" field.
func GatewayPortIn(vs ...int) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldIn(FieldGatewayPort, vs...))
}

// GatewayPortNotIn applies the NotIn predicate on the "gateway_port" field.
func GatewayPortNotIn(vs ...int) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldNotIn(FieldGatewayPort, vs...))
}

// GatewayPortGT applies the GT predicate on the "gateway_port" field.
func GatewayPortGT(v int) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldGT(FieldGatewayPort, v))
}

// GatewayPortGTE applies the GTE predicate on the "gateway_port" field.
func GatewayPortGTE(v int) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldGTE(FieldGatewayPort, v))
}

// GatewayPortLT applies the LT predicate on the "gateway_port" field.
func GatewayPortLT(v int) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldLT(FieldGatewayPort, v))
}

// GatewayPortLTE applies the LTE predicate on the "gateway_port" field.
func GatewayPortLTE(v int) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldLTE(FieldGatewayPort, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.DomainBindding {
	return predicate.DomainBindding(sql.FieldLTE(FieldCreateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DomainBindding) predicate.DomainBindding {
	return predicate.DomainBindding(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DomainBindding) predicate.DomainBindding {
	return predicate.DomainBindding(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DomainBindding) predicate.DomainBindding {
	return predicate.DomainBindding(func(s *sql.Selector) {
		p(s.Not())
	})
}
