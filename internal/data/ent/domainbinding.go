// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/domainbinding"
)

// DomainBinding is the model entity for the DomainBinding schema.
type DomainBinding struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// 用户ID
	UserID uuid.UUID `json:"user_id,omitempty"`
	// 实例ID
	FkComputeInstanceID uuid.UUID `json:"fk_compute_instance_id,omitempty"`
	// 网络映射id
	FkNetworkMappingID uuid.UUID `json:"fk_network_mapping_id,omitempty"`
	// 映射名
	Name string `json:"name,omitempty"`
	// 域名
	Domain string `json:"domain,omitempty"`
	// 映射到gateway的端口
	GatewayPort int `json:"gateway_port,omitempty"`
	// 创建时间
	CreateTime   time.Time `json:"create_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DomainBinding) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case domainbinding.FieldGatewayPort:
			values[i] = new(sql.NullInt64)
		case domainbinding.FieldName, domainbinding.FieldDomain:
			values[i] = new(sql.NullString)
		case domainbinding.FieldCreateTime:
			values[i] = new(sql.NullTime)
		case domainbinding.FieldID, domainbinding.FieldUserID, domainbinding.FieldFkComputeInstanceID, domainbinding.FieldFkNetworkMappingID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DomainBinding fields.
func (db *DomainBinding) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case domainbinding.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				db.ID = *value
			}
		case domainbinding.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				db.UserID = *value
			}
		case domainbinding.FieldFkComputeInstanceID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field fk_compute_instance_id", values[i])
			} else if value != nil {
				db.FkComputeInstanceID = *value
			}
		case domainbinding.FieldFkNetworkMappingID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field fk_network_mapping_id", values[i])
			} else if value != nil {
				db.FkNetworkMappingID = *value
			}
		case domainbinding.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				db.Name = value.String
			}
		case domainbinding.FieldDomain:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field domain", values[i])
			} else if value.Valid {
				db.Domain = value.String
			}
		case domainbinding.FieldGatewayPort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gateway_port", values[i])
			} else if value.Valid {
				db.GatewayPort = int(value.Int64)
			}
		case domainbinding.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				db.CreateTime = value.Time
			}
		default:
			db.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DomainBinding.
// This includes values selected through modifiers, order, etc.
func (db *DomainBinding) Value(name string) (ent.Value, error) {
	return db.selectValues.Get(name)
}

// Update returns a builder for updating this DomainBinding.
// Note that you need to call DomainBinding.Unwrap() before calling this method if this DomainBinding
// was returned from a transaction, and the transaction was committed or rolled back.
func (db *DomainBinding) Update() *DomainBindingUpdateOne {
	return NewDomainBindingClient(db.config).UpdateOne(db)
}

// Unwrap unwraps the DomainBinding entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (db *DomainBinding) Unwrap() *DomainBinding {
	_tx, ok := db.config.driver.(*txDriver)
	if !ok {
		panic("ent: DomainBinding is not a transactional entity")
	}
	db.config.driver = _tx.drv
	return db
}

// String implements the fmt.Stringer.
func (db *DomainBinding) String() string {
	var builder strings.Builder
	builder.WriteString("DomainBinding(")
	builder.WriteString(fmt.Sprintf("id=%v, ", db.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", db.UserID))
	builder.WriteString(", ")
	builder.WriteString("fk_compute_instance_id=")
	builder.WriteString(fmt.Sprintf("%v", db.FkComputeInstanceID))
	builder.WriteString(", ")
	builder.WriteString("fk_network_mapping_id=")
	builder.WriteString(fmt.Sprintf("%v", db.FkNetworkMappingID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(db.Name)
	builder.WriteString(", ")
	builder.WriteString("domain=")
	builder.WriteString(db.Domain)
	builder.WriteString(", ")
	builder.WriteString("gateway_port=")
	builder.WriteString(fmt.Sprintf("%v", db.GatewayPort))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(db.CreateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// DomainBindings is a parsable slice of DomainBinding.
type DomainBindings []*DomainBinding
