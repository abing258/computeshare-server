// Code generated by ent, DO NOT EDIT.

package domainbinding

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the domainbinding type in the database.
	Label = "domain_binding"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldFkComputeInstanceID holds the string denoting the fk_compute_instance_id field in the database.
	FieldFkComputeInstanceID = "fk_compute_instance_id"
	// FieldFkNetworkMappingID holds the string denoting the fk_network_mapping_id field in the database.
	FieldFkNetworkMappingID = "fk_network_mapping_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDomain holds the string denoting the domain field in the database.
	FieldDomain = "domain"
	// FieldGatewayPort holds the string denoting the gateway_port field in the database.
	FieldGatewayPort = "gateway_port"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// Table holds the table name of the domainbinding in the database.
	Table = "domain_bindings"
)

// Columns holds all SQL columns for domainbinding fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldFkComputeInstanceID,
	FieldFkNetworkMappingID,
	FieldName,
	FieldDomain,
	FieldGatewayPort,
	FieldCreateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DomainValidator is a validator for the "domain" field. It is called by the builders before save.
	DomainValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the DomainBinding queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByFkComputeInstanceID orders the results by the fk_compute_instance_id field.
func ByFkComputeInstanceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFkComputeInstanceID, opts...).ToFunc()
}

// ByFkNetworkMappingID orders the results by the fk_network_mapping_id field.
func ByFkNetworkMappingID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFkNetworkMappingID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDomain orders the results by the domain field.
func ByDomain(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDomain, opts...).ToFunc()
}

// ByGatewayPort orders the results by the gateway_port field.
func ByGatewayPort(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGatewayPort, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}
