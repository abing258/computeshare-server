// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/domainbinding"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/predicate"
)

// DomainBindingUpdate is the builder for updating DomainBinding entities.
type DomainBindingUpdate struct {
	config
	hooks    []Hook
	mutation *DomainBindingMutation
}

// Where appends a list predicates to the DomainBindingUpdate builder.
func (dbu *DomainBindingUpdate) Where(ps ...predicate.DomainBinding) *DomainBindingUpdate {
	dbu.mutation.Where(ps...)
	return dbu
}

// SetUserID sets the "user_id" field.
func (dbu *DomainBindingUpdate) SetUserID(u uuid.UUID) *DomainBindingUpdate {
	dbu.mutation.SetUserID(u)
	return dbu
}

// SetFkComputeInstanceID sets the "fk_compute_instance_id" field.
func (dbu *DomainBindingUpdate) SetFkComputeInstanceID(u uuid.UUID) *DomainBindingUpdate {
	dbu.mutation.SetFkComputeInstanceID(u)
	return dbu
}

// SetFkNetworkMappingID sets the "fk_network_mapping_id" field.
func (dbu *DomainBindingUpdate) SetFkNetworkMappingID(u uuid.UUID) *DomainBindingUpdate {
	dbu.mutation.SetFkNetworkMappingID(u)
	return dbu
}

// SetName sets the "name" field.
func (dbu *DomainBindingUpdate) SetName(s string) *DomainBindingUpdate {
	dbu.mutation.SetName(s)
	return dbu
}

// SetDomain sets the "domain" field.
func (dbu *DomainBindingUpdate) SetDomain(s string) *DomainBindingUpdate {
	dbu.mutation.SetDomain(s)
	return dbu
}

// SetGatewayPort sets the "gateway_port" field.
func (dbu *DomainBindingUpdate) SetGatewayPort(i int) *DomainBindingUpdate {
	dbu.mutation.ResetGatewayPort()
	dbu.mutation.SetGatewayPort(i)
	return dbu
}

// AddGatewayPort adds i to the "gateway_port" field.
func (dbu *DomainBindingUpdate) AddGatewayPort(i int) *DomainBindingUpdate {
	dbu.mutation.AddGatewayPort(i)
	return dbu
}

// SetCreateTime sets the "create_time" field.
func (dbu *DomainBindingUpdate) SetCreateTime(t time.Time) *DomainBindingUpdate {
	dbu.mutation.SetCreateTime(t)
	return dbu
}

// Mutation returns the DomainBindingMutation object of the builder.
func (dbu *DomainBindingUpdate) Mutation() *DomainBindingMutation {
	return dbu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dbu *DomainBindingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dbu.sqlSave, dbu.mutation, dbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dbu *DomainBindingUpdate) SaveX(ctx context.Context) int {
	affected, err := dbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dbu *DomainBindingUpdate) Exec(ctx context.Context) error {
	_, err := dbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dbu *DomainBindingUpdate) ExecX(ctx context.Context) {
	if err := dbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dbu *DomainBindingUpdate) check() error {
	if v, ok := dbu.mutation.Name(); ok {
		if err := domainbinding.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "DomainBinding.name": %w`, err)}
		}
	}
	if v, ok := dbu.mutation.Domain(); ok {
		if err := domainbinding.DomainValidator(v); err != nil {
			return &ValidationError{Name: "domain", err: fmt.Errorf(`ent: validator failed for field "DomainBinding.domain": %w`, err)}
		}
	}
	return nil
}

func (dbu *DomainBindingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dbu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(domainbinding.Table, domainbinding.Columns, sqlgraph.NewFieldSpec(domainbinding.FieldID, field.TypeUUID))
	if ps := dbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dbu.mutation.UserID(); ok {
		_spec.SetField(domainbinding.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := dbu.mutation.FkComputeInstanceID(); ok {
		_spec.SetField(domainbinding.FieldFkComputeInstanceID, field.TypeUUID, value)
	}
	if value, ok := dbu.mutation.FkNetworkMappingID(); ok {
		_spec.SetField(domainbinding.FieldFkNetworkMappingID, field.TypeUUID, value)
	}
	if value, ok := dbu.mutation.Name(); ok {
		_spec.SetField(domainbinding.FieldName, field.TypeString, value)
	}
	if value, ok := dbu.mutation.Domain(); ok {
		_spec.SetField(domainbinding.FieldDomain, field.TypeString, value)
	}
	if value, ok := dbu.mutation.GatewayPort(); ok {
		_spec.SetField(domainbinding.FieldGatewayPort, field.TypeInt, value)
	}
	if value, ok := dbu.mutation.AddedGatewayPort(); ok {
		_spec.AddField(domainbinding.FieldGatewayPort, field.TypeInt, value)
	}
	if value, ok := dbu.mutation.CreateTime(); ok {
		_spec.SetField(domainbinding.FieldCreateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{domainbinding.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dbu.mutation.done = true
	return n, nil
}

// DomainBindingUpdateOne is the builder for updating a single DomainBinding entity.
type DomainBindingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DomainBindingMutation
}

// SetUserID sets the "user_id" field.
func (dbuo *DomainBindingUpdateOne) SetUserID(u uuid.UUID) *DomainBindingUpdateOne {
	dbuo.mutation.SetUserID(u)
	return dbuo
}

// SetFkComputeInstanceID sets the "fk_compute_instance_id" field.
func (dbuo *DomainBindingUpdateOne) SetFkComputeInstanceID(u uuid.UUID) *DomainBindingUpdateOne {
	dbuo.mutation.SetFkComputeInstanceID(u)
	return dbuo
}

// SetFkNetworkMappingID sets the "fk_network_mapping_id" field.
func (dbuo *DomainBindingUpdateOne) SetFkNetworkMappingID(u uuid.UUID) *DomainBindingUpdateOne {
	dbuo.mutation.SetFkNetworkMappingID(u)
	return dbuo
}

// SetName sets the "name" field.
func (dbuo *DomainBindingUpdateOne) SetName(s string) *DomainBindingUpdateOne {
	dbuo.mutation.SetName(s)
	return dbuo
}

// SetDomain sets the "domain" field.
func (dbuo *DomainBindingUpdateOne) SetDomain(s string) *DomainBindingUpdateOne {
	dbuo.mutation.SetDomain(s)
	return dbuo
}

// SetGatewayPort sets the "gateway_port" field.
func (dbuo *DomainBindingUpdateOne) SetGatewayPort(i int) *DomainBindingUpdateOne {
	dbuo.mutation.ResetGatewayPort()
	dbuo.mutation.SetGatewayPort(i)
	return dbuo
}

// AddGatewayPort adds i to the "gateway_port" field.
func (dbuo *DomainBindingUpdateOne) AddGatewayPort(i int) *DomainBindingUpdateOne {
	dbuo.mutation.AddGatewayPort(i)
	return dbuo
}

// SetCreateTime sets the "create_time" field.
func (dbuo *DomainBindingUpdateOne) SetCreateTime(t time.Time) *DomainBindingUpdateOne {
	dbuo.mutation.SetCreateTime(t)
	return dbuo
}

// Mutation returns the DomainBindingMutation object of the builder.
func (dbuo *DomainBindingUpdateOne) Mutation() *DomainBindingMutation {
	return dbuo.mutation
}

// Where appends a list predicates to the DomainBindingUpdate builder.
func (dbuo *DomainBindingUpdateOne) Where(ps ...predicate.DomainBinding) *DomainBindingUpdateOne {
	dbuo.mutation.Where(ps...)
	return dbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dbuo *DomainBindingUpdateOne) Select(field string, fields ...string) *DomainBindingUpdateOne {
	dbuo.fields = append([]string{field}, fields...)
	return dbuo
}

// Save executes the query and returns the updated DomainBinding entity.
func (dbuo *DomainBindingUpdateOne) Save(ctx context.Context) (*DomainBinding, error) {
	return withHooks(ctx, dbuo.sqlSave, dbuo.mutation, dbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dbuo *DomainBindingUpdateOne) SaveX(ctx context.Context) *DomainBinding {
	node, err := dbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dbuo *DomainBindingUpdateOne) Exec(ctx context.Context) error {
	_, err := dbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dbuo *DomainBindingUpdateOne) ExecX(ctx context.Context) {
	if err := dbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dbuo *DomainBindingUpdateOne) check() error {
	if v, ok := dbuo.mutation.Name(); ok {
		if err := domainbinding.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "DomainBinding.name": %w`, err)}
		}
	}
	if v, ok := dbuo.mutation.Domain(); ok {
		if err := domainbinding.DomainValidator(v); err != nil {
			return &ValidationError{Name: "domain", err: fmt.Errorf(`ent: validator failed for field "DomainBinding.domain": %w`, err)}
		}
	}
	return nil
}

func (dbuo *DomainBindingUpdateOne) sqlSave(ctx context.Context) (_node *DomainBinding, err error) {
	if err := dbuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(domainbinding.Table, domainbinding.Columns, sqlgraph.NewFieldSpec(domainbinding.FieldID, field.TypeUUID))
	id, ok := dbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DomainBinding.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, domainbinding.FieldID)
		for _, f := range fields {
			if !domainbinding.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != domainbinding.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dbuo.mutation.UserID(); ok {
		_spec.SetField(domainbinding.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := dbuo.mutation.FkComputeInstanceID(); ok {
		_spec.SetField(domainbinding.FieldFkComputeInstanceID, field.TypeUUID, value)
	}
	if value, ok := dbuo.mutation.FkNetworkMappingID(); ok {
		_spec.SetField(domainbinding.FieldFkNetworkMappingID, field.TypeUUID, value)
	}
	if value, ok := dbuo.mutation.Name(); ok {
		_spec.SetField(domainbinding.FieldName, field.TypeString, value)
	}
	if value, ok := dbuo.mutation.Domain(); ok {
		_spec.SetField(domainbinding.FieldDomain, field.TypeString, value)
	}
	if value, ok := dbuo.mutation.GatewayPort(); ok {
		_spec.SetField(domainbinding.FieldGatewayPort, field.TypeInt, value)
	}
	if value, ok := dbuo.mutation.AddedGatewayPort(); ok {
		_spec.AddField(domainbinding.FieldGatewayPort, field.TypeInt, value)
	}
	if value, ok := dbuo.mutation.CreateTime(); ok {
		_spec.SetField(domainbinding.FieldCreateTime, field.TypeTime, value)
	}
	_node = &DomainBinding{config: dbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{domainbinding.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dbuo.mutation.done = true
	return _node, nil
}
