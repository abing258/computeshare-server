// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/gateway"
)

// Gateway is the model entity for the Gateway schema.
type Gateway struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// 网关ip
	IP string `json:"ip,omitempty"`
	// 端口号
	Port         int `json:"port,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Gateway) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case gateway.FieldPort:
			values[i] = new(sql.NullInt64)
		case gateway.FieldName, gateway.FieldIP:
			values[i] = new(sql.NullString)
		case gateway.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Gateway fields.
func (ga *Gateway) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case gateway.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ga.ID = *value
			}
		case gateway.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ga.Name = value.String
			}
		case gateway.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				ga.IP = value.String
			}
		case gateway.FieldPort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field port", values[i])
			} else if value.Valid {
				ga.Port = int(value.Int64)
			}
		default:
			ga.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Gateway.
// This includes values selected through modifiers, order, etc.
func (ga *Gateway) Value(name string) (ent.Value, error) {
	return ga.selectValues.Get(name)
}

// Update returns a builder for updating this Gateway.
// Note that you need to call Gateway.Unwrap() before calling this method if this Gateway
// was returned from a transaction, and the transaction was committed or rolled back.
func (ga *Gateway) Update() *GatewayUpdateOne {
	return NewGatewayClient(ga.config).UpdateOne(ga)
}

// Unwrap unwraps the Gateway entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ga *Gateway) Unwrap() *Gateway {
	_tx, ok := ga.config.driver.(*txDriver)
	if !ok {
		panic("ent: Gateway is not a transactional entity")
	}
	ga.config.driver = _tx.drv
	return ga
}

// String implements the fmt.Stringer.
func (ga *Gateway) String() string {
	var builder strings.Builder
	builder.WriteString("Gateway(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ga.ID))
	builder.WriteString("name=")
	builder.WriteString(ga.Name)
	builder.WriteString(", ")
	builder.WriteString("ip=")
	builder.WriteString(ga.IP)
	builder.WriteString(", ")
	builder.WriteString("port=")
	builder.WriteString(fmt.Sprintf("%v", ga.Port))
	builder.WriteByte(')')
	return builder.String()
}

// Gateways is a parsable slice of Gateway.
type Gateways []*Gateway
