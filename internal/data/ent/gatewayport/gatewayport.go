// Code generated by ent, DO NOT EDIT.

package gatewayport

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the gatewayport type in the database.
	Label = "gateway_port"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFkGatewayID holds the string denoting the fk_gateway_id field in the database.
	FieldFkGatewayID = "fk_gateway_id"
	// FieldPort holds the string denoting the port field in the database.
	FieldPort = "port"
	// FieldIsUse holds the string denoting the is_use field in the database.
	FieldIsUse = "is_use"
	// Table holds the table name of the gatewayport in the database.
	Table = "gateway_ports"
)

// Columns holds all SQL columns for gatewayport fields.
var Columns = []string{
	FieldID,
	FieldFkGatewayID,
	FieldPort,
	FieldIsUse,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// FkGatewayIDValidator is a validator for the "fk_gateway_id" field. It is called by the builders before save.
	FkGatewayIDValidator func(string) error
	// DefaultIsUse holds the default value on creation for the "is_use" field.
	DefaultIsUse bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the GatewayPort queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFkGatewayID orders the results by the fk_gateway_id field.
func ByFkGatewayID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFkGatewayID, opts...).ToFunc()
}

// ByPort orders the results by the port field.
func ByPort(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPort, opts...).ToFunc()
}

// ByIsUse orders the results by the is_use field.
func ByIsUse(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsUse, opts...).ToFunc()
}
