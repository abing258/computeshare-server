// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/gatewayport"
)

// GatewayPortCreate is the builder for creating a GatewayPort entity.
type GatewayPortCreate struct {
	config
	mutation *GatewayPortMutation
	hooks    []Hook
}

// SetFkGatewayID sets the "fk_gateway_id" field.
func (gpc *GatewayPortCreate) SetFkGatewayID(s string) *GatewayPortCreate {
	gpc.mutation.SetFkGatewayID(s)
	return gpc
}

// SetPort sets the "port" field.
func (gpc *GatewayPortCreate) SetPort(i int64) *GatewayPortCreate {
	gpc.mutation.SetPort(i)
	return gpc
}

// SetIsUse sets the "is_use" field.
func (gpc *GatewayPortCreate) SetIsUse(b bool) *GatewayPortCreate {
	gpc.mutation.SetIsUse(b)
	return gpc
}

// SetNillableIsUse sets the "is_use" field if the given value is not nil.
func (gpc *GatewayPortCreate) SetNillableIsUse(b *bool) *GatewayPortCreate {
	if b != nil {
		gpc.SetIsUse(*b)
	}
	return gpc
}

// SetID sets the "id" field.
func (gpc *GatewayPortCreate) SetID(u uuid.UUID) *GatewayPortCreate {
	gpc.mutation.SetID(u)
	return gpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (gpc *GatewayPortCreate) SetNillableID(u *uuid.UUID) *GatewayPortCreate {
	if u != nil {
		gpc.SetID(*u)
	}
	return gpc
}

// Mutation returns the GatewayPortMutation object of the builder.
func (gpc *GatewayPortCreate) Mutation() *GatewayPortMutation {
	return gpc.mutation
}

// Save creates the GatewayPort in the database.
func (gpc *GatewayPortCreate) Save(ctx context.Context) (*GatewayPort, error) {
	gpc.defaults()
	return withHooks(ctx, gpc.sqlSave, gpc.mutation, gpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gpc *GatewayPortCreate) SaveX(ctx context.Context) *GatewayPort {
	v, err := gpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gpc *GatewayPortCreate) Exec(ctx context.Context) error {
	_, err := gpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gpc *GatewayPortCreate) ExecX(ctx context.Context) {
	if err := gpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gpc *GatewayPortCreate) defaults() {
	if _, ok := gpc.mutation.IsUse(); !ok {
		v := gatewayport.DefaultIsUse
		gpc.mutation.SetIsUse(v)
	}
	if _, ok := gpc.mutation.ID(); !ok {
		v := gatewayport.DefaultID()
		gpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gpc *GatewayPortCreate) check() error {
	if _, ok := gpc.mutation.FkGatewayID(); !ok {
		return &ValidationError{Name: "fk_gateway_id", err: errors.New(`ent: missing required field "GatewayPort.fk_gateway_id"`)}
	}
	if v, ok := gpc.mutation.FkGatewayID(); ok {
		if err := gatewayport.FkGatewayIDValidator(v); err != nil {
			return &ValidationError{Name: "fk_gateway_id", err: fmt.Errorf(`ent: validator failed for field "GatewayPort.fk_gateway_id": %w`, err)}
		}
	}
	if _, ok := gpc.mutation.Port(); !ok {
		return &ValidationError{Name: "port", err: errors.New(`ent: missing required field "GatewayPort.port"`)}
	}
	if _, ok := gpc.mutation.IsUse(); !ok {
		return &ValidationError{Name: "is_use", err: errors.New(`ent: missing required field "GatewayPort.is_use"`)}
	}
	return nil
}

func (gpc *GatewayPortCreate) sqlSave(ctx context.Context) (*GatewayPort, error) {
	if err := gpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	gpc.mutation.id = &_node.ID
	gpc.mutation.done = true
	return _node, nil
}

func (gpc *GatewayPortCreate) createSpec() (*GatewayPort, *sqlgraph.CreateSpec) {
	var (
		_node = &GatewayPort{config: gpc.config}
		_spec = sqlgraph.NewCreateSpec(gatewayport.Table, sqlgraph.NewFieldSpec(gatewayport.FieldID, field.TypeUUID))
	)
	if id, ok := gpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := gpc.mutation.FkGatewayID(); ok {
		_spec.SetField(gatewayport.FieldFkGatewayID, field.TypeString, value)
		_node.FkGatewayID = value
	}
	if value, ok := gpc.mutation.Port(); ok {
		_spec.SetField(gatewayport.FieldPort, field.TypeInt64, value)
		_node.Port = value
	}
	if value, ok := gpc.mutation.IsUse(); ok {
		_spec.SetField(gatewayport.FieldIsUse, field.TypeBool, value)
		_node.IsUse = value
	}
	return _node, _spec
}

// GatewayPortCreateBulk is the builder for creating many GatewayPort entities in bulk.
type GatewayPortCreateBulk struct {
	config
	builders []*GatewayPortCreate
}

// Save creates the GatewayPort entities in the database.
func (gpcb *GatewayPortCreateBulk) Save(ctx context.Context) ([]*GatewayPort, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gpcb.builders))
	nodes := make([]*GatewayPort, len(gpcb.builders))
	mutators := make([]Mutator, len(gpcb.builders))
	for i := range gpcb.builders {
		func(i int, root context.Context) {
			builder := gpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GatewayPortMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gpcb *GatewayPortCreateBulk) SaveX(ctx context.Context) []*GatewayPort {
	v, err := gpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gpcb *GatewayPortCreateBulk) Exec(ctx context.Context) error {
	_, err := gpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gpcb *GatewayPortCreateBulk) ExecX(ctx context.Context) {
	if err := gpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
