// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/gatewayport"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/predicate"
)

// GatewayPortUpdate is the builder for updating GatewayPort entities.
type GatewayPortUpdate struct {
	config
	hooks    []Hook
	mutation *GatewayPortMutation
}

// Where appends a list predicates to the GatewayPortUpdate builder.
func (gpu *GatewayPortUpdate) Where(ps ...predicate.GatewayPort) *GatewayPortUpdate {
	gpu.mutation.Where(ps...)
	return gpu
}

// SetFkGatewayID sets the "fk_gateway_id" field.
func (gpu *GatewayPortUpdate) SetFkGatewayID(u uuid.UUID) *GatewayPortUpdate {
	gpu.mutation.SetFkGatewayID(u)
	return gpu
}

// SetPort sets the "port" field.
func (gpu *GatewayPortUpdate) SetPort(i int32) *GatewayPortUpdate {
	gpu.mutation.ResetPort()
	gpu.mutation.SetPort(i)
	return gpu
}

// AddPort adds i to the "port" field.
func (gpu *GatewayPortUpdate) AddPort(i int32) *GatewayPortUpdate {
	gpu.mutation.AddPort(i)
	return gpu
}

// SetIsUse sets the "is_use" field.
func (gpu *GatewayPortUpdate) SetIsUse(b bool) *GatewayPortUpdate {
	gpu.mutation.SetIsUse(b)
	return gpu
}

// SetNillableIsUse sets the "is_use" field if the given value is not nil.
func (gpu *GatewayPortUpdate) SetNillableIsUse(b *bool) *GatewayPortUpdate {
	if b != nil {
		gpu.SetIsUse(*b)
	}
	return gpu
}

// Mutation returns the GatewayPortMutation object of the builder.
func (gpu *GatewayPortUpdate) Mutation() *GatewayPortMutation {
	return gpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gpu *GatewayPortUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, gpu.sqlSave, gpu.mutation, gpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gpu *GatewayPortUpdate) SaveX(ctx context.Context) int {
	affected, err := gpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gpu *GatewayPortUpdate) Exec(ctx context.Context) error {
	_, err := gpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gpu *GatewayPortUpdate) ExecX(ctx context.Context) {
	if err := gpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gpu *GatewayPortUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(gatewayport.Table, gatewayport.Columns, sqlgraph.NewFieldSpec(gatewayport.FieldID, field.TypeUUID))
	if ps := gpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gpu.mutation.FkGatewayID(); ok {
		_spec.SetField(gatewayport.FieldFkGatewayID, field.TypeUUID, value)
	}
	if value, ok := gpu.mutation.Port(); ok {
		_spec.SetField(gatewayport.FieldPort, field.TypeInt32, value)
	}
	if value, ok := gpu.mutation.AddedPort(); ok {
		_spec.AddField(gatewayport.FieldPort, field.TypeInt32, value)
	}
	if value, ok := gpu.mutation.IsUse(); ok {
		_spec.SetField(gatewayport.FieldIsUse, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gatewayport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gpu.mutation.done = true
	return n, nil
}

// GatewayPortUpdateOne is the builder for updating a single GatewayPort entity.
type GatewayPortUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GatewayPortMutation
}

// SetFkGatewayID sets the "fk_gateway_id" field.
func (gpuo *GatewayPortUpdateOne) SetFkGatewayID(u uuid.UUID) *GatewayPortUpdateOne {
	gpuo.mutation.SetFkGatewayID(u)
	return gpuo
}

// SetPort sets the "port" field.
func (gpuo *GatewayPortUpdateOne) SetPort(i int32) *GatewayPortUpdateOne {
	gpuo.mutation.ResetPort()
	gpuo.mutation.SetPort(i)
	return gpuo
}

// AddPort adds i to the "port" field.
func (gpuo *GatewayPortUpdateOne) AddPort(i int32) *GatewayPortUpdateOne {
	gpuo.mutation.AddPort(i)
	return gpuo
}

// SetIsUse sets the "is_use" field.
func (gpuo *GatewayPortUpdateOne) SetIsUse(b bool) *GatewayPortUpdateOne {
	gpuo.mutation.SetIsUse(b)
	return gpuo
}

// SetNillableIsUse sets the "is_use" field if the given value is not nil.
func (gpuo *GatewayPortUpdateOne) SetNillableIsUse(b *bool) *GatewayPortUpdateOne {
	if b != nil {
		gpuo.SetIsUse(*b)
	}
	return gpuo
}

// Mutation returns the GatewayPortMutation object of the builder.
func (gpuo *GatewayPortUpdateOne) Mutation() *GatewayPortMutation {
	return gpuo.mutation
}

// Where appends a list predicates to the GatewayPortUpdate builder.
func (gpuo *GatewayPortUpdateOne) Where(ps ...predicate.GatewayPort) *GatewayPortUpdateOne {
	gpuo.mutation.Where(ps...)
	return gpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gpuo *GatewayPortUpdateOne) Select(field string, fields ...string) *GatewayPortUpdateOne {
	gpuo.fields = append([]string{field}, fields...)
	return gpuo
}

// Save executes the query and returns the updated GatewayPort entity.
func (gpuo *GatewayPortUpdateOne) Save(ctx context.Context) (*GatewayPort, error) {
	return withHooks(ctx, gpuo.sqlSave, gpuo.mutation, gpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gpuo *GatewayPortUpdateOne) SaveX(ctx context.Context) *GatewayPort {
	node, err := gpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gpuo *GatewayPortUpdateOne) Exec(ctx context.Context) error {
	_, err := gpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gpuo *GatewayPortUpdateOne) ExecX(ctx context.Context) {
	if err := gpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gpuo *GatewayPortUpdateOne) sqlSave(ctx context.Context) (_node *GatewayPort, err error) {
	_spec := sqlgraph.NewUpdateSpec(gatewayport.Table, gatewayport.Columns, sqlgraph.NewFieldSpec(gatewayport.FieldID, field.TypeUUID))
	id, ok := gpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GatewayPort.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gatewayport.FieldID)
		for _, f := range fields {
			if !gatewayport.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != gatewayport.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gpuo.mutation.FkGatewayID(); ok {
		_spec.SetField(gatewayport.FieldFkGatewayID, field.TypeUUID, value)
	}
	if value, ok := gpuo.mutation.Port(); ok {
		_spec.SetField(gatewayport.FieldPort, field.TypeInt32, value)
	}
	if value, ok := gpuo.mutation.AddedPort(); ok {
		_spec.AddField(gatewayport.FieldPort, field.TypeInt32, value)
	}
	if value, ok := gpuo.mutation.IsUse(); ok {
		_spec.SetField(gatewayport.FieldIsUse, field.TypeBool, value)
	}
	_node = &GatewayPort{config: gpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gatewayport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gpuo.mutation.done = true
	return _node, nil
}
