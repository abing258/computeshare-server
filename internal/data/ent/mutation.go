// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/agent"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/computeimage"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/computeinstance"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/computespec"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/domainbinding"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/employee"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/gateway"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/gatewayport"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/networkmapping"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/predicate"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/s3bucket"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/s3user"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/script"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/scriptexecutionrecord"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/storage"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/storageprovider"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/task"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/user"
	"github.com/mohaijiang/computeshare-server/internal/global/consts"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAgent                 = "Agent"
	TypeComputeImage          = "ComputeImage"
	TypeComputeInstance       = "ComputeInstance"
	TypeComputeSpec           = "ComputeSpec"
	TypeDomainBinding         = "DomainBinding"
	TypeEmployee              = "Employee"
	TypeGateway               = "Gateway"
	TypeGatewayPort           = "GatewayPort"
	TypeNetworkMapping        = "NetworkMapping"
	TypeS3Bucket              = "S3Bucket"
	TypeS3User                = "S3User"
	TypeScript                = "Script"
	TypeScriptExecutionRecord = "ScriptExecutionRecord"
	TypeStorage               = "Storage"
	TypeStorageProvider       = "StorageProvider"
	TypeTask                  = "Task"
	TypeUser                  = "User"
)

// AgentMutation represents an operation that mutates the Agent nodes in the graph.
type AgentMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	peer_id          *string
	active           *bool
	last_update_time *time.Time
	clearedFields    map[string]struct{}
	done             bool
	oldValue         func(context.Context) (*Agent, error)
	predicates       []predicate.Agent
}

var _ ent.Mutation = (*AgentMutation)(nil)

// agentOption allows management of the mutation configuration using functional options.
type agentOption func(*AgentMutation)

// newAgentMutation creates new mutation for the Agent entity.
func newAgentMutation(c config, op Op, opts ...agentOption) *AgentMutation {
	m := &AgentMutation{
		config:        c,
		op:            op,
		typ:           TypeAgent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAgentID sets the ID field of the mutation.
func withAgentID(id uuid.UUID) agentOption {
	return func(m *AgentMutation) {
		var (
			err   error
			once  sync.Once
			value *Agent
		)
		m.oldValue = func(ctx context.Context) (*Agent, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Agent.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAgent sets the old Agent of the mutation.
func withAgent(node *Agent) agentOption {
	return func(m *AgentMutation) {
		m.oldValue = func(context.Context) (*Agent, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AgentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AgentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Agent entities.
func (m *AgentMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AgentMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AgentMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Agent.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPeerID sets the "peer_id" field.
func (m *AgentMutation) SetPeerID(s string) {
	m.peer_id = &s
}

// PeerID returns the value of the "peer_id" field in the mutation.
func (m *AgentMutation) PeerID() (r string, exists bool) {
	v := m.peer_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPeerID returns the old "peer_id" field's value of the Agent entity.
// If the Agent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AgentMutation) OldPeerID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPeerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPeerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPeerID: %w", err)
	}
	return oldValue.PeerID, nil
}

// ResetPeerID resets all changes to the "peer_id" field.
func (m *AgentMutation) ResetPeerID() {
	m.peer_id = nil
}

// SetActive sets the "active" field.
func (m *AgentMutation) SetActive(b bool) {
	m.active = &b
}

// Active returns the value of the "active" field in the mutation.
func (m *AgentMutation) Active() (r bool, exists bool) {
	v := m.active
	if v == nil {
		return
	}
	return *v, true
}

// OldActive returns the old "active" field's value of the Agent entity.
// If the Agent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AgentMutation) OldActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActive: %w", err)
	}
	return oldValue.Active, nil
}

// ResetActive resets all changes to the "active" field.
func (m *AgentMutation) ResetActive() {
	m.active = nil
}

// SetLastUpdateTime sets the "last_update_time" field.
func (m *AgentMutation) SetLastUpdateTime(t time.Time) {
	m.last_update_time = &t
}

// LastUpdateTime returns the value of the "last_update_time" field in the mutation.
func (m *AgentMutation) LastUpdateTime() (r time.Time, exists bool) {
	v := m.last_update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldLastUpdateTime returns the old "last_update_time" field's value of the Agent entity.
// If the Agent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AgentMutation) OldLastUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastUpdateTime: %w", err)
	}
	return oldValue.LastUpdateTime, nil
}

// ResetLastUpdateTime resets all changes to the "last_update_time" field.
func (m *AgentMutation) ResetLastUpdateTime() {
	m.last_update_time = nil
}

// Where appends a list predicates to the AgentMutation builder.
func (m *AgentMutation) Where(ps ...predicate.Agent) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AgentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AgentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Agent, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AgentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AgentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Agent).
func (m *AgentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AgentMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.peer_id != nil {
		fields = append(fields, agent.FieldPeerID)
	}
	if m.active != nil {
		fields = append(fields, agent.FieldActive)
	}
	if m.last_update_time != nil {
		fields = append(fields, agent.FieldLastUpdateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AgentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case agent.FieldPeerID:
		return m.PeerID()
	case agent.FieldActive:
		return m.Active()
	case agent.FieldLastUpdateTime:
		return m.LastUpdateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AgentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case agent.FieldPeerID:
		return m.OldPeerID(ctx)
	case agent.FieldActive:
		return m.OldActive(ctx)
	case agent.FieldLastUpdateTime:
		return m.OldLastUpdateTime(ctx)
	}
	return nil, fmt.Errorf("unknown Agent field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AgentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case agent.FieldPeerID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPeerID(v)
		return nil
	case agent.FieldActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActive(v)
		return nil
	case agent.FieldLastUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastUpdateTime(v)
		return nil
	}
	return fmt.Errorf("unknown Agent field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AgentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AgentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AgentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Agent numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AgentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AgentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AgentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Agent nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AgentMutation) ResetField(name string) error {
	switch name {
	case agent.FieldPeerID:
		m.ResetPeerID()
		return nil
	case agent.FieldActive:
		m.ResetActive()
		return nil
	case agent.FieldLastUpdateTime:
		m.ResetLastUpdateTime()
		return nil
	}
	return fmt.Errorf("unknown Agent field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AgentMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AgentMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AgentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AgentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AgentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AgentMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AgentMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Agent unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AgentMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Agent edge %s", name)
}

// ComputeImageMutation represents an operation that mutates the ComputeImage nodes in the graph.
type ComputeImageMutation struct {
	config
	op            Op
	typ           string
	id            *int32
	name          *string
	image         *string
	tag           *string
	port          *int32
	addport       *int32
	command       *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*ComputeImage, error)
	predicates    []predicate.ComputeImage
}

var _ ent.Mutation = (*ComputeImageMutation)(nil)

// computeimageOption allows management of the mutation configuration using functional options.
type computeimageOption func(*ComputeImageMutation)

// newComputeImageMutation creates new mutation for the ComputeImage entity.
func newComputeImageMutation(c config, op Op, opts ...computeimageOption) *ComputeImageMutation {
	m := &ComputeImageMutation{
		config:        c,
		op:            op,
		typ:           TypeComputeImage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withComputeImageID sets the ID field of the mutation.
func withComputeImageID(id int32) computeimageOption {
	return func(m *ComputeImageMutation) {
		var (
			err   error
			once  sync.Once
			value *ComputeImage
		)
		m.oldValue = func(ctx context.Context) (*ComputeImage, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ComputeImage.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withComputeImage sets the old ComputeImage of the mutation.
func withComputeImage(node *ComputeImage) computeimageOption {
	return func(m *ComputeImageMutation) {
		m.oldValue = func(context.Context) (*ComputeImage, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ComputeImageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ComputeImageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ComputeImage entities.
func (m *ComputeImageMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ComputeImageMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ComputeImageMutation) IDs(ctx context.Context) ([]int32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ComputeImage.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ComputeImageMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ComputeImageMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the ComputeImage entity.
// If the ComputeImage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeImageMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ComputeImageMutation) ResetName() {
	m.name = nil
}

// SetImage sets the "image" field.
func (m *ComputeImageMutation) SetImage(s string) {
	m.image = &s
}

// Image returns the value of the "image" field in the mutation.
func (m *ComputeImageMutation) Image() (r string, exists bool) {
	v := m.image
	if v == nil {
		return
	}
	return *v, true
}

// OldImage returns the old "image" field's value of the ComputeImage entity.
// If the ComputeImage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeImageMutation) OldImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImage: %w", err)
	}
	return oldValue.Image, nil
}

// ResetImage resets all changes to the "image" field.
func (m *ComputeImageMutation) ResetImage() {
	m.image = nil
}

// SetTag sets the "tag" field.
func (m *ComputeImageMutation) SetTag(s string) {
	m.tag = &s
}

// Tag returns the value of the "tag" field in the mutation.
func (m *ComputeImageMutation) Tag() (r string, exists bool) {
	v := m.tag
	if v == nil {
		return
	}
	return *v, true
}

// OldTag returns the old "tag" field's value of the ComputeImage entity.
// If the ComputeImage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeImageMutation) OldTag(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTag is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTag requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTag: %w", err)
	}
	return oldValue.Tag, nil
}

// ResetTag resets all changes to the "tag" field.
func (m *ComputeImageMutation) ResetTag() {
	m.tag = nil
}

// SetPort sets the "port" field.
func (m *ComputeImageMutation) SetPort(i int32) {
	m.port = &i
	m.addport = nil
}

// Port returns the value of the "port" field in the mutation.
func (m *ComputeImageMutation) Port() (r int32, exists bool) {
	v := m.port
	if v == nil {
		return
	}
	return *v, true
}

// OldPort returns the old "port" field's value of the ComputeImage entity.
// If the ComputeImage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeImageMutation) OldPort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPort: %w", err)
	}
	return oldValue.Port, nil
}

// AddPort adds i to the "port" field.
func (m *ComputeImageMutation) AddPort(i int32) {
	if m.addport != nil {
		*m.addport += i
	} else {
		m.addport = &i
	}
}

// AddedPort returns the value that was added to the "port" field in this mutation.
func (m *ComputeImageMutation) AddedPort() (r int32, exists bool) {
	v := m.addport
	if v == nil {
		return
	}
	return *v, true
}

// ResetPort resets all changes to the "port" field.
func (m *ComputeImageMutation) ResetPort() {
	m.port = nil
	m.addport = nil
}

// SetCommand sets the "command" field.
func (m *ComputeImageMutation) SetCommand(s string) {
	m.command = &s
}

// Command returns the value of the "command" field in the mutation.
func (m *ComputeImageMutation) Command() (r string, exists bool) {
	v := m.command
	if v == nil {
		return
	}
	return *v, true
}

// OldCommand returns the old "command" field's value of the ComputeImage entity.
// If the ComputeImage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeImageMutation) OldCommand(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCommand is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCommand requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCommand: %w", err)
	}
	return oldValue.Command, nil
}

// ResetCommand resets all changes to the "command" field.
func (m *ComputeImageMutation) ResetCommand() {
	m.command = nil
}

// Where appends a list predicates to the ComputeImageMutation builder.
func (m *ComputeImageMutation) Where(ps ...predicate.ComputeImage) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ComputeImageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ComputeImageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ComputeImage, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ComputeImageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ComputeImageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ComputeImage).
func (m *ComputeImageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ComputeImageMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, computeimage.FieldName)
	}
	if m.image != nil {
		fields = append(fields, computeimage.FieldImage)
	}
	if m.tag != nil {
		fields = append(fields, computeimage.FieldTag)
	}
	if m.port != nil {
		fields = append(fields, computeimage.FieldPort)
	}
	if m.command != nil {
		fields = append(fields, computeimage.FieldCommand)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ComputeImageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case computeimage.FieldName:
		return m.Name()
	case computeimage.FieldImage:
		return m.Image()
	case computeimage.FieldTag:
		return m.Tag()
	case computeimage.FieldPort:
		return m.Port()
	case computeimage.FieldCommand:
		return m.Command()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ComputeImageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case computeimage.FieldName:
		return m.OldName(ctx)
	case computeimage.FieldImage:
		return m.OldImage(ctx)
	case computeimage.FieldTag:
		return m.OldTag(ctx)
	case computeimage.FieldPort:
		return m.OldPort(ctx)
	case computeimage.FieldCommand:
		return m.OldCommand(ctx)
	}
	return nil, fmt.Errorf("unknown ComputeImage field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ComputeImageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case computeimage.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case computeimage.FieldImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImage(v)
		return nil
	case computeimage.FieldTag:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTag(v)
		return nil
	case computeimage.FieldPort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPort(v)
		return nil
	case computeimage.FieldCommand:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCommand(v)
		return nil
	}
	return fmt.Errorf("unknown ComputeImage field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ComputeImageMutation) AddedFields() []string {
	var fields []string
	if m.addport != nil {
		fields = append(fields, computeimage.FieldPort)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ComputeImageMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case computeimage.FieldPort:
		return m.AddedPort()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ComputeImageMutation) AddField(name string, value ent.Value) error {
	switch name {
	case computeimage.FieldPort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPort(v)
		return nil
	}
	return fmt.Errorf("unknown ComputeImage numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ComputeImageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ComputeImageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ComputeImageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ComputeImage nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ComputeImageMutation) ResetField(name string) error {
	switch name {
	case computeimage.FieldName:
		m.ResetName()
		return nil
	case computeimage.FieldImage:
		m.ResetImage()
		return nil
	case computeimage.FieldTag:
		m.ResetTag()
		return nil
	case computeimage.FieldPort:
		m.ResetPort()
		return nil
	case computeimage.FieldCommand:
		m.ResetCommand()
		return nil
	}
	return fmt.Errorf("unknown ComputeImage field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ComputeImageMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ComputeImageMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ComputeImageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ComputeImageMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ComputeImageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ComputeImageMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ComputeImageMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ComputeImage unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ComputeImageMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ComputeImage edge %s", name)
}

// ComputeInstanceMutation represents an operation that mutates the ComputeInstance nodes in the graph.
type ComputeInstanceMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	owner           *string
	name            *string
	core            *string
	memory          *string
	image           *string
	port            *string
	expiration_time *time.Time
	status          *consts.InstanceStatus
	addstatus       *consts.InstanceStatus
	container_id    *string
	agent_id        *string
	command         *string
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*ComputeInstance, error)
	predicates      []predicate.ComputeInstance
}

var _ ent.Mutation = (*ComputeInstanceMutation)(nil)

// computeinstanceOption allows management of the mutation configuration using functional options.
type computeinstanceOption func(*ComputeInstanceMutation)

// newComputeInstanceMutation creates new mutation for the ComputeInstance entity.
func newComputeInstanceMutation(c config, op Op, opts ...computeinstanceOption) *ComputeInstanceMutation {
	m := &ComputeInstanceMutation{
		config:        c,
		op:            op,
		typ:           TypeComputeInstance,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withComputeInstanceID sets the ID field of the mutation.
func withComputeInstanceID(id uuid.UUID) computeinstanceOption {
	return func(m *ComputeInstanceMutation) {
		var (
			err   error
			once  sync.Once
			value *ComputeInstance
		)
		m.oldValue = func(ctx context.Context) (*ComputeInstance, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ComputeInstance.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withComputeInstance sets the old ComputeInstance of the mutation.
func withComputeInstance(node *ComputeInstance) computeinstanceOption {
	return func(m *ComputeInstanceMutation) {
		m.oldValue = func(context.Context) (*ComputeInstance, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ComputeInstanceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ComputeInstanceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ComputeInstance entities.
func (m *ComputeInstanceMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ComputeInstanceMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ComputeInstanceMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ComputeInstance.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOwner sets the "owner" field.
func (m *ComputeInstanceMutation) SetOwner(s string) {
	m.owner = &s
}

// Owner returns the value of the "owner" field in the mutation.
func (m *ComputeInstanceMutation) Owner() (r string, exists bool) {
	v := m.owner
	if v == nil {
		return
	}
	return *v, true
}

// OldOwner returns the old "owner" field's value of the ComputeInstance entity.
// If the ComputeInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeInstanceMutation) OldOwner(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwner is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwner requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwner: %w", err)
	}
	return oldValue.Owner, nil
}

// ResetOwner resets all changes to the "owner" field.
func (m *ComputeInstanceMutation) ResetOwner() {
	m.owner = nil
}

// SetName sets the "name" field.
func (m *ComputeInstanceMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ComputeInstanceMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the ComputeInstance entity.
// If the ComputeInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeInstanceMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ComputeInstanceMutation) ResetName() {
	m.name = nil
}

// SetCore sets the "core" field.
func (m *ComputeInstanceMutation) SetCore(s string) {
	m.core = &s
}

// Core returns the value of the "core" field in the mutation.
func (m *ComputeInstanceMutation) Core() (r string, exists bool) {
	v := m.core
	if v == nil {
		return
	}
	return *v, true
}

// OldCore returns the old "core" field's value of the ComputeInstance entity.
// If the ComputeInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeInstanceMutation) OldCore(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCore: %w", err)
	}
	return oldValue.Core, nil
}

// ResetCore resets all changes to the "core" field.
func (m *ComputeInstanceMutation) ResetCore() {
	m.core = nil
}

// SetMemory sets the "memory" field.
func (m *ComputeInstanceMutation) SetMemory(s string) {
	m.memory = &s
}

// Memory returns the value of the "memory" field in the mutation.
func (m *ComputeInstanceMutation) Memory() (r string, exists bool) {
	v := m.memory
	if v == nil {
		return
	}
	return *v, true
}

// OldMemory returns the old "memory" field's value of the ComputeInstance entity.
// If the ComputeInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeInstanceMutation) OldMemory(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemory: %w", err)
	}
	return oldValue.Memory, nil
}

// ResetMemory resets all changes to the "memory" field.
func (m *ComputeInstanceMutation) ResetMemory() {
	m.memory = nil
}

// SetImage sets the "image" field.
func (m *ComputeInstanceMutation) SetImage(s string) {
	m.image = &s
}

// Image returns the value of the "image" field in the mutation.
func (m *ComputeInstanceMutation) Image() (r string, exists bool) {
	v := m.image
	if v == nil {
		return
	}
	return *v, true
}

// OldImage returns the old "image" field's value of the ComputeInstance entity.
// If the ComputeInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeInstanceMutation) OldImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImage: %w", err)
	}
	return oldValue.Image, nil
}

// ResetImage resets all changes to the "image" field.
func (m *ComputeInstanceMutation) ResetImage() {
	m.image = nil
}

// SetPort sets the "port" field.
func (m *ComputeInstanceMutation) SetPort(s string) {
	m.port = &s
}

// Port returns the value of the "port" field in the mutation.
func (m *ComputeInstanceMutation) Port() (r string, exists bool) {
	v := m.port
	if v == nil {
		return
	}
	return *v, true
}

// OldPort returns the old "port" field's value of the ComputeInstance entity.
// If the ComputeInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeInstanceMutation) OldPort(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPort: %w", err)
	}
	return oldValue.Port, nil
}

// ClearPort clears the value of the "port" field.
func (m *ComputeInstanceMutation) ClearPort() {
	m.port = nil
	m.clearedFields[computeinstance.FieldPort] = struct{}{}
}

// PortCleared returns if the "port" field was cleared in this mutation.
func (m *ComputeInstanceMutation) PortCleared() bool {
	_, ok := m.clearedFields[computeinstance.FieldPort]
	return ok
}

// ResetPort resets all changes to the "port" field.
func (m *ComputeInstanceMutation) ResetPort() {
	m.port = nil
	delete(m.clearedFields, computeinstance.FieldPort)
}

// SetExpirationTime sets the "expiration_time" field.
func (m *ComputeInstanceMutation) SetExpirationTime(t time.Time) {
	m.expiration_time = &t
}

// ExpirationTime returns the value of the "expiration_time" field in the mutation.
func (m *ComputeInstanceMutation) ExpirationTime() (r time.Time, exists bool) {
	v := m.expiration_time
	if v == nil {
		return
	}
	return *v, true
}

// OldExpirationTime returns the old "expiration_time" field's value of the ComputeInstance entity.
// If the ComputeInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeInstanceMutation) OldExpirationTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpirationTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpirationTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpirationTime: %w", err)
	}
	return oldValue.ExpirationTime, nil
}

// ResetExpirationTime resets all changes to the "expiration_time" field.
func (m *ComputeInstanceMutation) ResetExpirationTime() {
	m.expiration_time = nil
}

// SetStatus sets the "status" field.
func (m *ComputeInstanceMutation) SetStatus(cs consts.InstanceStatus) {
	m.status = &cs
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *ComputeInstanceMutation) Status() (r consts.InstanceStatus, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the ComputeInstance entity.
// If the ComputeInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeInstanceMutation) OldStatus(ctx context.Context) (v consts.InstanceStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds cs to the "status" field.
func (m *ComputeInstanceMutation) AddStatus(cs consts.InstanceStatus) {
	if m.addstatus != nil {
		*m.addstatus += cs
	} else {
		m.addstatus = &cs
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *ComputeInstanceMutation) AddedStatus() (r consts.InstanceStatus, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *ComputeInstanceMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetContainerID sets the "container_id" field.
func (m *ComputeInstanceMutation) SetContainerID(s string) {
	m.container_id = &s
}

// ContainerID returns the value of the "container_id" field in the mutation.
func (m *ComputeInstanceMutation) ContainerID() (r string, exists bool) {
	v := m.container_id
	if v == nil {
		return
	}
	return *v, true
}

// OldContainerID returns the old "container_id" field's value of the ComputeInstance entity.
// If the ComputeInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeInstanceMutation) OldContainerID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContainerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContainerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContainerID: %w", err)
	}
	return oldValue.ContainerID, nil
}

// ClearContainerID clears the value of the "container_id" field.
func (m *ComputeInstanceMutation) ClearContainerID() {
	m.container_id = nil
	m.clearedFields[computeinstance.FieldContainerID] = struct{}{}
}

// ContainerIDCleared returns if the "container_id" field was cleared in this mutation.
func (m *ComputeInstanceMutation) ContainerIDCleared() bool {
	_, ok := m.clearedFields[computeinstance.FieldContainerID]
	return ok
}

// ResetContainerID resets all changes to the "container_id" field.
func (m *ComputeInstanceMutation) ResetContainerID() {
	m.container_id = nil
	delete(m.clearedFields, computeinstance.FieldContainerID)
}

// SetAgentID sets the "agent_id" field.
func (m *ComputeInstanceMutation) SetAgentID(s string) {
	m.agent_id = &s
}

// AgentID returns the value of the "agent_id" field in the mutation.
func (m *ComputeInstanceMutation) AgentID() (r string, exists bool) {
	v := m.agent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAgentID returns the old "agent_id" field's value of the ComputeInstance entity.
// If the ComputeInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeInstanceMutation) OldAgentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAgentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAgentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAgentID: %w", err)
	}
	return oldValue.AgentID, nil
}

// ClearAgentID clears the value of the "agent_id" field.
func (m *ComputeInstanceMutation) ClearAgentID() {
	m.agent_id = nil
	m.clearedFields[computeinstance.FieldAgentID] = struct{}{}
}

// AgentIDCleared returns if the "agent_id" field was cleared in this mutation.
func (m *ComputeInstanceMutation) AgentIDCleared() bool {
	_, ok := m.clearedFields[computeinstance.FieldAgentID]
	return ok
}

// ResetAgentID resets all changes to the "agent_id" field.
func (m *ComputeInstanceMutation) ResetAgentID() {
	m.agent_id = nil
	delete(m.clearedFields, computeinstance.FieldAgentID)
}

// SetCommand sets the "command" field.
func (m *ComputeInstanceMutation) SetCommand(s string) {
	m.command = &s
}

// Command returns the value of the "command" field in the mutation.
func (m *ComputeInstanceMutation) Command() (r string, exists bool) {
	v := m.command
	if v == nil {
		return
	}
	return *v, true
}

// OldCommand returns the old "command" field's value of the ComputeInstance entity.
// If the ComputeInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeInstanceMutation) OldCommand(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCommand is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCommand requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCommand: %w", err)
	}
	return oldValue.Command, nil
}

// ClearCommand clears the value of the "command" field.
func (m *ComputeInstanceMutation) ClearCommand() {
	m.command = nil
	m.clearedFields[computeinstance.FieldCommand] = struct{}{}
}

// CommandCleared returns if the "command" field was cleared in this mutation.
func (m *ComputeInstanceMutation) CommandCleared() bool {
	_, ok := m.clearedFields[computeinstance.FieldCommand]
	return ok
}

// ResetCommand resets all changes to the "command" field.
func (m *ComputeInstanceMutation) ResetCommand() {
	m.command = nil
	delete(m.clearedFields, computeinstance.FieldCommand)
}

// Where appends a list predicates to the ComputeInstanceMutation builder.
func (m *ComputeInstanceMutation) Where(ps ...predicate.ComputeInstance) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ComputeInstanceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ComputeInstanceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ComputeInstance, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ComputeInstanceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ComputeInstanceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ComputeInstance).
func (m *ComputeInstanceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ComputeInstanceMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.owner != nil {
		fields = append(fields, computeinstance.FieldOwner)
	}
	if m.name != nil {
		fields = append(fields, computeinstance.FieldName)
	}
	if m.core != nil {
		fields = append(fields, computeinstance.FieldCore)
	}
	if m.memory != nil {
		fields = append(fields, computeinstance.FieldMemory)
	}
	if m.image != nil {
		fields = append(fields, computeinstance.FieldImage)
	}
	if m.port != nil {
		fields = append(fields, computeinstance.FieldPort)
	}
	if m.expiration_time != nil {
		fields = append(fields, computeinstance.FieldExpirationTime)
	}
	if m.status != nil {
		fields = append(fields, computeinstance.FieldStatus)
	}
	if m.container_id != nil {
		fields = append(fields, computeinstance.FieldContainerID)
	}
	if m.agent_id != nil {
		fields = append(fields, computeinstance.FieldAgentID)
	}
	if m.command != nil {
		fields = append(fields, computeinstance.FieldCommand)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ComputeInstanceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case computeinstance.FieldOwner:
		return m.Owner()
	case computeinstance.FieldName:
		return m.Name()
	case computeinstance.FieldCore:
		return m.Core()
	case computeinstance.FieldMemory:
		return m.Memory()
	case computeinstance.FieldImage:
		return m.Image()
	case computeinstance.FieldPort:
		return m.Port()
	case computeinstance.FieldExpirationTime:
		return m.ExpirationTime()
	case computeinstance.FieldStatus:
		return m.Status()
	case computeinstance.FieldContainerID:
		return m.ContainerID()
	case computeinstance.FieldAgentID:
		return m.AgentID()
	case computeinstance.FieldCommand:
		return m.Command()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ComputeInstanceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case computeinstance.FieldOwner:
		return m.OldOwner(ctx)
	case computeinstance.FieldName:
		return m.OldName(ctx)
	case computeinstance.FieldCore:
		return m.OldCore(ctx)
	case computeinstance.FieldMemory:
		return m.OldMemory(ctx)
	case computeinstance.FieldImage:
		return m.OldImage(ctx)
	case computeinstance.FieldPort:
		return m.OldPort(ctx)
	case computeinstance.FieldExpirationTime:
		return m.OldExpirationTime(ctx)
	case computeinstance.FieldStatus:
		return m.OldStatus(ctx)
	case computeinstance.FieldContainerID:
		return m.OldContainerID(ctx)
	case computeinstance.FieldAgentID:
		return m.OldAgentID(ctx)
	case computeinstance.FieldCommand:
		return m.OldCommand(ctx)
	}
	return nil, fmt.Errorf("unknown ComputeInstance field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ComputeInstanceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case computeinstance.FieldOwner:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwner(v)
		return nil
	case computeinstance.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case computeinstance.FieldCore:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCore(v)
		return nil
	case computeinstance.FieldMemory:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemory(v)
		return nil
	case computeinstance.FieldImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImage(v)
		return nil
	case computeinstance.FieldPort:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPort(v)
		return nil
	case computeinstance.FieldExpirationTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpirationTime(v)
		return nil
	case computeinstance.FieldStatus:
		v, ok := value.(consts.InstanceStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case computeinstance.FieldContainerID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContainerID(v)
		return nil
	case computeinstance.FieldAgentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAgentID(v)
		return nil
	case computeinstance.FieldCommand:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCommand(v)
		return nil
	}
	return fmt.Errorf("unknown ComputeInstance field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ComputeInstanceMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, computeinstance.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ComputeInstanceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case computeinstance.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ComputeInstanceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case computeinstance.FieldStatus:
		v, ok := value.(consts.InstanceStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown ComputeInstance numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ComputeInstanceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(computeinstance.FieldPort) {
		fields = append(fields, computeinstance.FieldPort)
	}
	if m.FieldCleared(computeinstance.FieldContainerID) {
		fields = append(fields, computeinstance.FieldContainerID)
	}
	if m.FieldCleared(computeinstance.FieldAgentID) {
		fields = append(fields, computeinstance.FieldAgentID)
	}
	if m.FieldCleared(computeinstance.FieldCommand) {
		fields = append(fields, computeinstance.FieldCommand)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ComputeInstanceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ComputeInstanceMutation) ClearField(name string) error {
	switch name {
	case computeinstance.FieldPort:
		m.ClearPort()
		return nil
	case computeinstance.FieldContainerID:
		m.ClearContainerID()
		return nil
	case computeinstance.FieldAgentID:
		m.ClearAgentID()
		return nil
	case computeinstance.FieldCommand:
		m.ClearCommand()
		return nil
	}
	return fmt.Errorf("unknown ComputeInstance nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ComputeInstanceMutation) ResetField(name string) error {
	switch name {
	case computeinstance.FieldOwner:
		m.ResetOwner()
		return nil
	case computeinstance.FieldName:
		m.ResetName()
		return nil
	case computeinstance.FieldCore:
		m.ResetCore()
		return nil
	case computeinstance.FieldMemory:
		m.ResetMemory()
		return nil
	case computeinstance.FieldImage:
		m.ResetImage()
		return nil
	case computeinstance.FieldPort:
		m.ResetPort()
		return nil
	case computeinstance.FieldExpirationTime:
		m.ResetExpirationTime()
		return nil
	case computeinstance.FieldStatus:
		m.ResetStatus()
		return nil
	case computeinstance.FieldContainerID:
		m.ResetContainerID()
		return nil
	case computeinstance.FieldAgentID:
		m.ResetAgentID()
		return nil
	case computeinstance.FieldCommand:
		m.ResetCommand()
		return nil
	}
	return fmt.Errorf("unknown ComputeInstance field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ComputeInstanceMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ComputeInstanceMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ComputeInstanceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ComputeInstanceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ComputeInstanceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ComputeInstanceMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ComputeInstanceMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ComputeInstance unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ComputeInstanceMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ComputeInstance edge %s", name)
}

// ComputeSpecMutation represents an operation that mutates the ComputeSpec nodes in the graph.
type ComputeSpecMutation struct {
	config
	op            Op
	typ           string
	id            *int32
	core          *string
	memory        *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*ComputeSpec, error)
	predicates    []predicate.ComputeSpec
}

var _ ent.Mutation = (*ComputeSpecMutation)(nil)

// computespecOption allows management of the mutation configuration using functional options.
type computespecOption func(*ComputeSpecMutation)

// newComputeSpecMutation creates new mutation for the ComputeSpec entity.
func newComputeSpecMutation(c config, op Op, opts ...computespecOption) *ComputeSpecMutation {
	m := &ComputeSpecMutation{
		config:        c,
		op:            op,
		typ:           TypeComputeSpec,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withComputeSpecID sets the ID field of the mutation.
func withComputeSpecID(id int32) computespecOption {
	return func(m *ComputeSpecMutation) {
		var (
			err   error
			once  sync.Once
			value *ComputeSpec
		)
		m.oldValue = func(ctx context.Context) (*ComputeSpec, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ComputeSpec.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withComputeSpec sets the old ComputeSpec of the mutation.
func withComputeSpec(node *ComputeSpec) computespecOption {
	return func(m *ComputeSpecMutation) {
		m.oldValue = func(context.Context) (*ComputeSpec, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ComputeSpecMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ComputeSpecMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ComputeSpec entities.
func (m *ComputeSpecMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ComputeSpecMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ComputeSpecMutation) IDs(ctx context.Context) ([]int32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ComputeSpec.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCore sets the "core" field.
func (m *ComputeSpecMutation) SetCore(s string) {
	m.core = &s
}

// Core returns the value of the "core" field in the mutation.
func (m *ComputeSpecMutation) Core() (r string, exists bool) {
	v := m.core
	if v == nil {
		return
	}
	return *v, true
}

// OldCore returns the old "core" field's value of the ComputeSpec entity.
// If the ComputeSpec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeSpecMutation) OldCore(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCore: %w", err)
	}
	return oldValue.Core, nil
}

// ResetCore resets all changes to the "core" field.
func (m *ComputeSpecMutation) ResetCore() {
	m.core = nil
}

// SetMemory sets the "memory" field.
func (m *ComputeSpecMutation) SetMemory(s string) {
	m.memory = &s
}

// Memory returns the value of the "memory" field in the mutation.
func (m *ComputeSpecMutation) Memory() (r string, exists bool) {
	v := m.memory
	if v == nil {
		return
	}
	return *v, true
}

// OldMemory returns the old "memory" field's value of the ComputeSpec entity.
// If the ComputeSpec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeSpecMutation) OldMemory(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemory: %w", err)
	}
	return oldValue.Memory, nil
}

// ResetMemory resets all changes to the "memory" field.
func (m *ComputeSpecMutation) ResetMemory() {
	m.memory = nil
}

// Where appends a list predicates to the ComputeSpecMutation builder.
func (m *ComputeSpecMutation) Where(ps ...predicate.ComputeSpec) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ComputeSpecMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ComputeSpecMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ComputeSpec, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ComputeSpecMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ComputeSpecMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ComputeSpec).
func (m *ComputeSpecMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ComputeSpecMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.core != nil {
		fields = append(fields, computespec.FieldCore)
	}
	if m.memory != nil {
		fields = append(fields, computespec.FieldMemory)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ComputeSpecMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case computespec.FieldCore:
		return m.Core()
	case computespec.FieldMemory:
		return m.Memory()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ComputeSpecMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case computespec.FieldCore:
		return m.OldCore(ctx)
	case computespec.FieldMemory:
		return m.OldMemory(ctx)
	}
	return nil, fmt.Errorf("unknown ComputeSpec field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ComputeSpecMutation) SetField(name string, value ent.Value) error {
	switch name {
	case computespec.FieldCore:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCore(v)
		return nil
	case computespec.FieldMemory:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemory(v)
		return nil
	}
	return fmt.Errorf("unknown ComputeSpec field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ComputeSpecMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ComputeSpecMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ComputeSpecMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ComputeSpec numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ComputeSpecMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ComputeSpecMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ComputeSpecMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ComputeSpec nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ComputeSpecMutation) ResetField(name string) error {
	switch name {
	case computespec.FieldCore:
		m.ResetCore()
		return nil
	case computespec.FieldMemory:
		m.ResetMemory()
		return nil
	}
	return fmt.Errorf("unknown ComputeSpec field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ComputeSpecMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ComputeSpecMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ComputeSpecMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ComputeSpecMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ComputeSpecMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ComputeSpecMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ComputeSpecMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ComputeSpec unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ComputeSpecMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ComputeSpec edge %s", name)
}

// DomainBindingMutation represents an operation that mutates the DomainBinding nodes in the graph.
type DomainBindingMutation struct {
	config
	op                     Op
	typ                    string
	id                     *uuid.UUID
	user_id                *uuid.UUID
	fk_compute_instance_id *uuid.UUID
	fk_network_mapping_id  *uuid.UUID
	name                   *string
	domain                 *string
	gateway_port           *int32
	addgateway_port        *int32
	create_time            *time.Time
	clearedFields          map[string]struct{}
	done                   bool
	oldValue               func(context.Context) (*DomainBinding, error)
	predicates             []predicate.DomainBinding
}

var _ ent.Mutation = (*DomainBindingMutation)(nil)

// domainbindingOption allows management of the mutation configuration using functional options.
type domainbindingOption func(*DomainBindingMutation)

// newDomainBindingMutation creates new mutation for the DomainBinding entity.
func newDomainBindingMutation(c config, op Op, opts ...domainbindingOption) *DomainBindingMutation {
	m := &DomainBindingMutation{
		config:        c,
		op:            op,
		typ:           TypeDomainBinding,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDomainBindingID sets the ID field of the mutation.
func withDomainBindingID(id uuid.UUID) domainbindingOption {
	return func(m *DomainBindingMutation) {
		var (
			err   error
			once  sync.Once
			value *DomainBinding
		)
		m.oldValue = func(ctx context.Context) (*DomainBinding, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DomainBinding.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDomainBinding sets the old DomainBinding of the mutation.
func withDomainBinding(node *DomainBinding) domainbindingOption {
	return func(m *DomainBindingMutation) {
		m.oldValue = func(context.Context) (*DomainBinding, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DomainBindingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DomainBindingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of DomainBinding entities.
func (m *DomainBindingMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DomainBindingMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DomainBindingMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DomainBinding.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *DomainBindingMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *DomainBindingMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the DomainBinding entity.
// If the DomainBinding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DomainBindingMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *DomainBindingMutation) ResetUserID() {
	m.user_id = nil
}

// SetFkComputeInstanceID sets the "fk_compute_instance_id" field.
func (m *DomainBindingMutation) SetFkComputeInstanceID(u uuid.UUID) {
	m.fk_compute_instance_id = &u
}

// FkComputeInstanceID returns the value of the "fk_compute_instance_id" field in the mutation.
func (m *DomainBindingMutation) FkComputeInstanceID() (r uuid.UUID, exists bool) {
	v := m.fk_compute_instance_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFkComputeInstanceID returns the old "fk_compute_instance_id" field's value of the DomainBinding entity.
// If the DomainBinding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DomainBindingMutation) OldFkComputeInstanceID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFkComputeInstanceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFkComputeInstanceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFkComputeInstanceID: %w", err)
	}
	return oldValue.FkComputeInstanceID, nil
}

// ResetFkComputeInstanceID resets all changes to the "fk_compute_instance_id" field.
func (m *DomainBindingMutation) ResetFkComputeInstanceID() {
	m.fk_compute_instance_id = nil
}

// SetFkNetworkMappingID sets the "fk_network_mapping_id" field.
func (m *DomainBindingMutation) SetFkNetworkMappingID(u uuid.UUID) {
	m.fk_network_mapping_id = &u
}

// FkNetworkMappingID returns the value of the "fk_network_mapping_id" field in the mutation.
func (m *DomainBindingMutation) FkNetworkMappingID() (r uuid.UUID, exists bool) {
	v := m.fk_network_mapping_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFkNetworkMappingID returns the old "fk_network_mapping_id" field's value of the DomainBinding entity.
// If the DomainBinding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DomainBindingMutation) OldFkNetworkMappingID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFkNetworkMappingID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFkNetworkMappingID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFkNetworkMappingID: %w", err)
	}
	return oldValue.FkNetworkMappingID, nil
}

// ResetFkNetworkMappingID resets all changes to the "fk_network_mapping_id" field.
func (m *DomainBindingMutation) ResetFkNetworkMappingID() {
	m.fk_network_mapping_id = nil
}

// SetName sets the "name" field.
func (m *DomainBindingMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DomainBindingMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the DomainBinding entity.
// If the DomainBinding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DomainBindingMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *DomainBindingMutation) ResetName() {
	m.name = nil
}

// SetDomain sets the "domain" field.
func (m *DomainBindingMutation) SetDomain(s string) {
	m.domain = &s
}

// Domain returns the value of the "domain" field in the mutation.
func (m *DomainBindingMutation) Domain() (r string, exists bool) {
	v := m.domain
	if v == nil {
		return
	}
	return *v, true
}

// OldDomain returns the old "domain" field's value of the DomainBinding entity.
// If the DomainBinding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DomainBindingMutation) OldDomain(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDomain is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDomain requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDomain: %w", err)
	}
	return oldValue.Domain, nil
}

// ResetDomain resets all changes to the "domain" field.
func (m *DomainBindingMutation) ResetDomain() {
	m.domain = nil
}

// SetGatewayPort sets the "gateway_port" field.
func (m *DomainBindingMutation) SetGatewayPort(i int32) {
	m.gateway_port = &i
	m.addgateway_port = nil
}

// GatewayPort returns the value of the "gateway_port" field in the mutation.
func (m *DomainBindingMutation) GatewayPort() (r int32, exists bool) {
	v := m.gateway_port
	if v == nil {
		return
	}
	return *v, true
}

// OldGatewayPort returns the old "gateway_port" field's value of the DomainBinding entity.
// If the DomainBinding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DomainBindingMutation) OldGatewayPort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGatewayPort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGatewayPort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGatewayPort: %w", err)
	}
	return oldValue.GatewayPort, nil
}

// AddGatewayPort adds i to the "gateway_port" field.
func (m *DomainBindingMutation) AddGatewayPort(i int32) {
	if m.addgateway_port != nil {
		*m.addgateway_port += i
	} else {
		m.addgateway_port = &i
	}
}

// AddedGatewayPort returns the value that was added to the "gateway_port" field in this mutation.
func (m *DomainBindingMutation) AddedGatewayPort() (r int32, exists bool) {
	v := m.addgateway_port
	if v == nil {
		return
	}
	return *v, true
}

// ResetGatewayPort resets all changes to the "gateway_port" field.
func (m *DomainBindingMutation) ResetGatewayPort() {
	m.gateway_port = nil
	m.addgateway_port = nil
}

// SetCreateTime sets the "create_time" field.
func (m *DomainBindingMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *DomainBindingMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the DomainBinding entity.
// If the DomainBinding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DomainBindingMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *DomainBindingMutation) ResetCreateTime() {
	m.create_time = nil
}

// Where appends a list predicates to the DomainBindingMutation builder.
func (m *DomainBindingMutation) Where(ps ...predicate.DomainBinding) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DomainBindingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DomainBindingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DomainBinding, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DomainBindingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DomainBindingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DomainBinding).
func (m *DomainBindingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DomainBindingMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.user_id != nil {
		fields = append(fields, domainbinding.FieldUserID)
	}
	if m.fk_compute_instance_id != nil {
		fields = append(fields, domainbinding.FieldFkComputeInstanceID)
	}
	if m.fk_network_mapping_id != nil {
		fields = append(fields, domainbinding.FieldFkNetworkMappingID)
	}
	if m.name != nil {
		fields = append(fields, domainbinding.FieldName)
	}
	if m.domain != nil {
		fields = append(fields, domainbinding.FieldDomain)
	}
	if m.gateway_port != nil {
		fields = append(fields, domainbinding.FieldGatewayPort)
	}
	if m.create_time != nil {
		fields = append(fields, domainbinding.FieldCreateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DomainBindingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case domainbinding.FieldUserID:
		return m.UserID()
	case domainbinding.FieldFkComputeInstanceID:
		return m.FkComputeInstanceID()
	case domainbinding.FieldFkNetworkMappingID:
		return m.FkNetworkMappingID()
	case domainbinding.FieldName:
		return m.Name()
	case domainbinding.FieldDomain:
		return m.Domain()
	case domainbinding.FieldGatewayPort:
		return m.GatewayPort()
	case domainbinding.FieldCreateTime:
		return m.CreateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DomainBindingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case domainbinding.FieldUserID:
		return m.OldUserID(ctx)
	case domainbinding.FieldFkComputeInstanceID:
		return m.OldFkComputeInstanceID(ctx)
	case domainbinding.FieldFkNetworkMappingID:
		return m.OldFkNetworkMappingID(ctx)
	case domainbinding.FieldName:
		return m.OldName(ctx)
	case domainbinding.FieldDomain:
		return m.OldDomain(ctx)
	case domainbinding.FieldGatewayPort:
		return m.OldGatewayPort(ctx)
	case domainbinding.FieldCreateTime:
		return m.OldCreateTime(ctx)
	}
	return nil, fmt.Errorf("unknown DomainBinding field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DomainBindingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case domainbinding.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case domainbinding.FieldFkComputeInstanceID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFkComputeInstanceID(v)
		return nil
	case domainbinding.FieldFkNetworkMappingID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFkNetworkMappingID(v)
		return nil
	case domainbinding.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case domainbinding.FieldDomain:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDomain(v)
		return nil
	case domainbinding.FieldGatewayPort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGatewayPort(v)
		return nil
	case domainbinding.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	}
	return fmt.Errorf("unknown DomainBinding field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DomainBindingMutation) AddedFields() []string {
	var fields []string
	if m.addgateway_port != nil {
		fields = append(fields, domainbinding.FieldGatewayPort)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DomainBindingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case domainbinding.FieldGatewayPort:
		return m.AddedGatewayPort()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DomainBindingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case domainbinding.FieldGatewayPort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGatewayPort(v)
		return nil
	}
	return fmt.Errorf("unknown DomainBinding numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DomainBindingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DomainBindingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DomainBindingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown DomainBinding nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DomainBindingMutation) ResetField(name string) error {
	switch name {
	case domainbinding.FieldUserID:
		m.ResetUserID()
		return nil
	case domainbinding.FieldFkComputeInstanceID:
		m.ResetFkComputeInstanceID()
		return nil
	case domainbinding.FieldFkNetworkMappingID:
		m.ResetFkNetworkMappingID()
		return nil
	case domainbinding.FieldName:
		m.ResetName()
		return nil
	case domainbinding.FieldDomain:
		m.ResetDomain()
		return nil
	case domainbinding.FieldGatewayPort:
		m.ResetGatewayPort()
		return nil
	case domainbinding.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	}
	return fmt.Errorf("unknown DomainBinding field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DomainBindingMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DomainBindingMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DomainBindingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DomainBindingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DomainBindingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DomainBindingMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DomainBindingMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown DomainBinding unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DomainBindingMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown DomainBinding edge %s", name)
}

// EmployeeMutation represents an operation that mutates the Employee nodes in the graph.
type EmployeeMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	age           *int32
	addage        *int32
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Employee, error)
	predicates    []predicate.Employee
}

var _ ent.Mutation = (*EmployeeMutation)(nil)

// employeeOption allows management of the mutation configuration using functional options.
type employeeOption func(*EmployeeMutation)

// newEmployeeMutation creates new mutation for the Employee entity.
func newEmployeeMutation(c config, op Op, opts ...employeeOption) *EmployeeMutation {
	m := &EmployeeMutation{
		config:        c,
		op:            op,
		typ:           TypeEmployee,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEmployeeID sets the ID field of the mutation.
func withEmployeeID(id int) employeeOption {
	return func(m *EmployeeMutation) {
		var (
			err   error
			once  sync.Once
			value *Employee
		)
		m.oldValue = func(ctx context.Context) (*Employee, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Employee.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEmployee sets the old Employee of the mutation.
func withEmployee(node *Employee) employeeOption {
	return func(m *EmployeeMutation) {
		m.oldValue = func(context.Context) (*Employee, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EmployeeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EmployeeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EmployeeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EmployeeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Employee.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *EmployeeMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *EmployeeMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Employee entity.
// If the Employee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmployeeMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *EmployeeMutation) ResetName() {
	m.name = nil
}

// SetAge sets the "age" field.
func (m *EmployeeMutation) SetAge(i int32) {
	m.age = &i
	m.addage = nil
}

// Age returns the value of the "age" field in the mutation.
func (m *EmployeeMutation) Age() (r int32, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// OldAge returns the old "age" field's value of the Employee entity.
// If the Employee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmployeeMutation) OldAge(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAge: %w", err)
	}
	return oldValue.Age, nil
}

// AddAge adds i to the "age" field.
func (m *EmployeeMutation) AddAge(i int32) {
	if m.addage != nil {
		*m.addage += i
	} else {
		m.addage = &i
	}
}

// AddedAge returns the value that was added to the "age" field in this mutation.
func (m *EmployeeMutation) AddedAge() (r int32, exists bool) {
	v := m.addage
	if v == nil {
		return
	}
	return *v, true
}

// ClearAge clears the value of the "age" field.
func (m *EmployeeMutation) ClearAge() {
	m.age = nil
	m.addage = nil
	m.clearedFields[employee.FieldAge] = struct{}{}
}

// AgeCleared returns if the "age" field was cleared in this mutation.
func (m *EmployeeMutation) AgeCleared() bool {
	_, ok := m.clearedFields[employee.FieldAge]
	return ok
}

// ResetAge resets all changes to the "age" field.
func (m *EmployeeMutation) ResetAge() {
	m.age = nil
	m.addage = nil
	delete(m.clearedFields, employee.FieldAge)
}

// Where appends a list predicates to the EmployeeMutation builder.
func (m *EmployeeMutation) Where(ps ...predicate.Employee) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EmployeeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EmployeeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Employee, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EmployeeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EmployeeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Employee).
func (m *EmployeeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EmployeeMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, employee.FieldName)
	}
	if m.age != nil {
		fields = append(fields, employee.FieldAge)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EmployeeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case employee.FieldName:
		return m.Name()
	case employee.FieldAge:
		return m.Age()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EmployeeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case employee.FieldName:
		return m.OldName(ctx)
	case employee.FieldAge:
		return m.OldAge(ctx)
	}
	return nil, fmt.Errorf("unknown Employee field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmployeeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case employee.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case employee.FieldAge:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	}
	return fmt.Errorf("unknown Employee field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EmployeeMutation) AddedFields() []string {
	var fields []string
	if m.addage != nil {
		fields = append(fields, employee.FieldAge)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EmployeeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case employee.FieldAge:
		return m.AddedAge()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmployeeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case employee.FieldAge:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAge(v)
		return nil
	}
	return fmt.Errorf("unknown Employee numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EmployeeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(employee.FieldAge) {
		fields = append(fields, employee.FieldAge)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EmployeeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EmployeeMutation) ClearField(name string) error {
	switch name {
	case employee.FieldAge:
		m.ClearAge()
		return nil
	}
	return fmt.Errorf("unknown Employee nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EmployeeMutation) ResetField(name string) error {
	switch name {
	case employee.FieldName:
		m.ResetName()
		return nil
	case employee.FieldAge:
		m.ResetAge()
		return nil
	}
	return fmt.Errorf("unknown Employee field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EmployeeMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EmployeeMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EmployeeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EmployeeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EmployeeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EmployeeMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EmployeeMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Employee unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EmployeeMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Employee edge %s", name)
}

// GatewayMutation represents an operation that mutates the Gateway nodes in the graph.
type GatewayMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	name          *string
	ip            *string
	port          *int32
	addport       *int32
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Gateway, error)
	predicates    []predicate.Gateway
}

var _ ent.Mutation = (*GatewayMutation)(nil)

// gatewayOption allows management of the mutation configuration using functional options.
type gatewayOption func(*GatewayMutation)

// newGatewayMutation creates new mutation for the Gateway entity.
func newGatewayMutation(c config, op Op, opts ...gatewayOption) *GatewayMutation {
	m := &GatewayMutation{
		config:        c,
		op:            op,
		typ:           TypeGateway,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGatewayID sets the ID field of the mutation.
func withGatewayID(id uuid.UUID) gatewayOption {
	return func(m *GatewayMutation) {
		var (
			err   error
			once  sync.Once
			value *Gateway
		)
		m.oldValue = func(ctx context.Context) (*Gateway, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Gateway.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGateway sets the old Gateway of the mutation.
func withGateway(node *Gateway) gatewayOption {
	return func(m *GatewayMutation) {
		m.oldValue = func(context.Context) (*Gateway, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GatewayMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GatewayMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Gateway entities.
func (m *GatewayMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GatewayMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GatewayMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Gateway.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *GatewayMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *GatewayMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Gateway entity.
// If the Gateway object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GatewayMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *GatewayMutation) ResetName() {
	m.name = nil
}

// SetIP sets the "ip" field.
func (m *GatewayMutation) SetIP(s string) {
	m.ip = &s
}

// IP returns the value of the "ip" field in the mutation.
func (m *GatewayMutation) IP() (r string, exists bool) {
	v := m.ip
	if v == nil {
		return
	}
	return *v, true
}

// OldIP returns the old "ip" field's value of the Gateway entity.
// If the Gateway object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GatewayMutation) OldIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIP: %w", err)
	}
	return oldValue.IP, nil
}

// ResetIP resets all changes to the "ip" field.
func (m *GatewayMutation) ResetIP() {
	m.ip = nil
}

// SetPort sets the "port" field.
func (m *GatewayMutation) SetPort(i int32) {
	m.port = &i
	m.addport = nil
}

// Port returns the value of the "port" field in the mutation.
func (m *GatewayMutation) Port() (r int32, exists bool) {
	v := m.port
	if v == nil {
		return
	}
	return *v, true
}

// OldPort returns the old "port" field's value of the Gateway entity.
// If the Gateway object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GatewayMutation) OldPort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPort: %w", err)
	}
	return oldValue.Port, nil
}

// AddPort adds i to the "port" field.
func (m *GatewayMutation) AddPort(i int32) {
	if m.addport != nil {
		*m.addport += i
	} else {
		m.addport = &i
	}
}

// AddedPort returns the value that was added to the "port" field in this mutation.
func (m *GatewayMutation) AddedPort() (r int32, exists bool) {
	v := m.addport
	if v == nil {
		return
	}
	return *v, true
}

// ResetPort resets all changes to the "port" field.
func (m *GatewayMutation) ResetPort() {
	m.port = nil
	m.addport = nil
}

// Where appends a list predicates to the GatewayMutation builder.
func (m *GatewayMutation) Where(ps ...predicate.Gateway) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GatewayMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GatewayMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Gateway, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GatewayMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GatewayMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Gateway).
func (m *GatewayMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GatewayMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, gateway.FieldName)
	}
	if m.ip != nil {
		fields = append(fields, gateway.FieldIP)
	}
	if m.port != nil {
		fields = append(fields, gateway.FieldPort)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GatewayMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case gateway.FieldName:
		return m.Name()
	case gateway.FieldIP:
		return m.IP()
	case gateway.FieldPort:
		return m.Port()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GatewayMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case gateway.FieldName:
		return m.OldName(ctx)
	case gateway.FieldIP:
		return m.OldIP(ctx)
	case gateway.FieldPort:
		return m.OldPort(ctx)
	}
	return nil, fmt.Errorf("unknown Gateway field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GatewayMutation) SetField(name string, value ent.Value) error {
	switch name {
	case gateway.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case gateway.FieldIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIP(v)
		return nil
	case gateway.FieldPort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPort(v)
		return nil
	}
	return fmt.Errorf("unknown Gateway field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GatewayMutation) AddedFields() []string {
	var fields []string
	if m.addport != nil {
		fields = append(fields, gateway.FieldPort)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GatewayMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case gateway.FieldPort:
		return m.AddedPort()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GatewayMutation) AddField(name string, value ent.Value) error {
	switch name {
	case gateway.FieldPort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPort(v)
		return nil
	}
	return fmt.Errorf("unknown Gateway numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GatewayMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GatewayMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GatewayMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Gateway nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GatewayMutation) ResetField(name string) error {
	switch name {
	case gateway.FieldName:
		m.ResetName()
		return nil
	case gateway.FieldIP:
		m.ResetIP()
		return nil
	case gateway.FieldPort:
		m.ResetPort()
		return nil
	}
	return fmt.Errorf("unknown Gateway field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GatewayMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GatewayMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GatewayMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GatewayMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GatewayMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GatewayMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GatewayMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Gateway unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GatewayMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Gateway edge %s", name)
}

// GatewayPortMutation represents an operation that mutates the GatewayPort nodes in the graph.
type GatewayPortMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	fk_gateway_id *uuid.UUID
	port          *int32
	addport       *int32
	is_use        *bool
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*GatewayPort, error)
	predicates    []predicate.GatewayPort
}

var _ ent.Mutation = (*GatewayPortMutation)(nil)

// gatewayportOption allows management of the mutation configuration using functional options.
type gatewayportOption func(*GatewayPortMutation)

// newGatewayPortMutation creates new mutation for the GatewayPort entity.
func newGatewayPortMutation(c config, op Op, opts ...gatewayportOption) *GatewayPortMutation {
	m := &GatewayPortMutation{
		config:        c,
		op:            op,
		typ:           TypeGatewayPort,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGatewayPortID sets the ID field of the mutation.
func withGatewayPortID(id uuid.UUID) gatewayportOption {
	return func(m *GatewayPortMutation) {
		var (
			err   error
			once  sync.Once
			value *GatewayPort
		)
		m.oldValue = func(ctx context.Context) (*GatewayPort, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GatewayPort.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGatewayPort sets the old GatewayPort of the mutation.
func withGatewayPort(node *GatewayPort) gatewayportOption {
	return func(m *GatewayPortMutation) {
		m.oldValue = func(context.Context) (*GatewayPort, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GatewayPortMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GatewayPortMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GatewayPort entities.
func (m *GatewayPortMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GatewayPortMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GatewayPortMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GatewayPort.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFkGatewayID sets the "fk_gateway_id" field.
func (m *GatewayPortMutation) SetFkGatewayID(u uuid.UUID) {
	m.fk_gateway_id = &u
}

// FkGatewayID returns the value of the "fk_gateway_id" field in the mutation.
func (m *GatewayPortMutation) FkGatewayID() (r uuid.UUID, exists bool) {
	v := m.fk_gateway_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFkGatewayID returns the old "fk_gateway_id" field's value of the GatewayPort entity.
// If the GatewayPort object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GatewayPortMutation) OldFkGatewayID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFkGatewayID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFkGatewayID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFkGatewayID: %w", err)
	}
	return oldValue.FkGatewayID, nil
}

// ResetFkGatewayID resets all changes to the "fk_gateway_id" field.
func (m *GatewayPortMutation) ResetFkGatewayID() {
	m.fk_gateway_id = nil
}

// SetPort sets the "port" field.
func (m *GatewayPortMutation) SetPort(i int32) {
	m.port = &i
	m.addport = nil
}

// Port returns the value of the "port" field in the mutation.
func (m *GatewayPortMutation) Port() (r int32, exists bool) {
	v := m.port
	if v == nil {
		return
	}
	return *v, true
}

// OldPort returns the old "port" field's value of the GatewayPort entity.
// If the GatewayPort object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GatewayPortMutation) OldPort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPort: %w", err)
	}
	return oldValue.Port, nil
}

// AddPort adds i to the "port" field.
func (m *GatewayPortMutation) AddPort(i int32) {
	if m.addport != nil {
		*m.addport += i
	} else {
		m.addport = &i
	}
}

// AddedPort returns the value that was added to the "port" field in this mutation.
func (m *GatewayPortMutation) AddedPort() (r int32, exists bool) {
	v := m.addport
	if v == nil {
		return
	}
	return *v, true
}

// ResetPort resets all changes to the "port" field.
func (m *GatewayPortMutation) ResetPort() {
	m.port = nil
	m.addport = nil
}

// SetIsUse sets the "is_use" field.
func (m *GatewayPortMutation) SetIsUse(b bool) {
	m.is_use = &b
}

// IsUse returns the value of the "is_use" field in the mutation.
func (m *GatewayPortMutation) IsUse() (r bool, exists bool) {
	v := m.is_use
	if v == nil {
		return
	}
	return *v, true
}

// OldIsUse returns the old "is_use" field's value of the GatewayPort entity.
// If the GatewayPort object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GatewayPortMutation) OldIsUse(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsUse is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsUse requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsUse: %w", err)
	}
	return oldValue.IsUse, nil
}

// ResetIsUse resets all changes to the "is_use" field.
func (m *GatewayPortMutation) ResetIsUse() {
	m.is_use = nil
}

// Where appends a list predicates to the GatewayPortMutation builder.
func (m *GatewayPortMutation) Where(ps ...predicate.GatewayPort) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GatewayPortMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GatewayPortMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.GatewayPort, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GatewayPortMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GatewayPortMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (GatewayPort).
func (m *GatewayPortMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GatewayPortMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.fk_gateway_id != nil {
		fields = append(fields, gatewayport.FieldFkGatewayID)
	}
	if m.port != nil {
		fields = append(fields, gatewayport.FieldPort)
	}
	if m.is_use != nil {
		fields = append(fields, gatewayport.FieldIsUse)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GatewayPortMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case gatewayport.FieldFkGatewayID:
		return m.FkGatewayID()
	case gatewayport.FieldPort:
		return m.Port()
	case gatewayport.FieldIsUse:
		return m.IsUse()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GatewayPortMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case gatewayport.FieldFkGatewayID:
		return m.OldFkGatewayID(ctx)
	case gatewayport.FieldPort:
		return m.OldPort(ctx)
	case gatewayport.FieldIsUse:
		return m.OldIsUse(ctx)
	}
	return nil, fmt.Errorf("unknown GatewayPort field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GatewayPortMutation) SetField(name string, value ent.Value) error {
	switch name {
	case gatewayport.FieldFkGatewayID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFkGatewayID(v)
		return nil
	case gatewayport.FieldPort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPort(v)
		return nil
	case gatewayport.FieldIsUse:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsUse(v)
		return nil
	}
	return fmt.Errorf("unknown GatewayPort field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GatewayPortMutation) AddedFields() []string {
	var fields []string
	if m.addport != nil {
		fields = append(fields, gatewayport.FieldPort)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GatewayPortMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case gatewayport.FieldPort:
		return m.AddedPort()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GatewayPortMutation) AddField(name string, value ent.Value) error {
	switch name {
	case gatewayport.FieldPort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPort(v)
		return nil
	}
	return fmt.Errorf("unknown GatewayPort numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GatewayPortMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GatewayPortMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GatewayPortMutation) ClearField(name string) error {
	return fmt.Errorf("unknown GatewayPort nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GatewayPortMutation) ResetField(name string) error {
	switch name {
	case gatewayport.FieldFkGatewayID:
		m.ResetFkGatewayID()
		return nil
	case gatewayport.FieldPort:
		m.ResetPort()
		return nil
	case gatewayport.FieldIsUse:
		m.ResetIsUse()
		return nil
	}
	return fmt.Errorf("unknown GatewayPort field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GatewayPortMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GatewayPortMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GatewayPortMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GatewayPortMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GatewayPortMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GatewayPortMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GatewayPortMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown GatewayPort unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GatewayPortMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown GatewayPort edge %s", name)
}

// NetworkMappingMutation represents an operation that mutates the NetworkMapping nodes in the graph.
type NetworkMappingMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	name             *string
	fk_gateway_id    *uuid.UUID
	gateway_port     *int32
	addgateway_port  *int32
	gateway_ip       *string
	computer_port    *int32
	addcomputer_port *int32
	status           *int
	addstatus        *int
	fk_computer_id   *uuid.UUID
	fk_user_id       *uuid.UUID
	clearedFields    map[string]struct{}
	done             bool
	oldValue         func(context.Context) (*NetworkMapping, error)
	predicates       []predicate.NetworkMapping
}

var _ ent.Mutation = (*NetworkMappingMutation)(nil)

// networkmappingOption allows management of the mutation configuration using functional options.
type networkmappingOption func(*NetworkMappingMutation)

// newNetworkMappingMutation creates new mutation for the NetworkMapping entity.
func newNetworkMappingMutation(c config, op Op, opts ...networkmappingOption) *NetworkMappingMutation {
	m := &NetworkMappingMutation{
		config:        c,
		op:            op,
		typ:           TypeNetworkMapping,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNetworkMappingID sets the ID field of the mutation.
func withNetworkMappingID(id uuid.UUID) networkmappingOption {
	return func(m *NetworkMappingMutation) {
		var (
			err   error
			once  sync.Once
			value *NetworkMapping
		)
		m.oldValue = func(ctx context.Context) (*NetworkMapping, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().NetworkMapping.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNetworkMapping sets the old NetworkMapping of the mutation.
func withNetworkMapping(node *NetworkMapping) networkmappingOption {
	return func(m *NetworkMappingMutation) {
		m.oldValue = func(context.Context) (*NetworkMapping, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NetworkMappingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NetworkMappingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of NetworkMapping entities.
func (m *NetworkMappingMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NetworkMappingMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NetworkMappingMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().NetworkMapping.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *NetworkMappingMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *NetworkMappingMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the NetworkMapping entity.
// If the NetworkMapping object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetworkMappingMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *NetworkMappingMutation) ResetName() {
	m.name = nil
}

// SetFkGatewayID sets the "fk_gateway_id" field.
func (m *NetworkMappingMutation) SetFkGatewayID(u uuid.UUID) {
	m.fk_gateway_id = &u
}

// FkGatewayID returns the value of the "fk_gateway_id" field in the mutation.
func (m *NetworkMappingMutation) FkGatewayID() (r uuid.UUID, exists bool) {
	v := m.fk_gateway_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFkGatewayID returns the old "fk_gateway_id" field's value of the NetworkMapping entity.
// If the NetworkMapping object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetworkMappingMutation) OldFkGatewayID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFkGatewayID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFkGatewayID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFkGatewayID: %w", err)
	}
	return oldValue.FkGatewayID, nil
}

// ResetFkGatewayID resets all changes to the "fk_gateway_id" field.
func (m *NetworkMappingMutation) ResetFkGatewayID() {
	m.fk_gateway_id = nil
}

// SetGatewayPort sets the "gateway_port" field.
func (m *NetworkMappingMutation) SetGatewayPort(i int32) {
	m.gateway_port = &i
	m.addgateway_port = nil
}

// GatewayPort returns the value of the "gateway_port" field in the mutation.
func (m *NetworkMappingMutation) GatewayPort() (r int32, exists bool) {
	v := m.gateway_port
	if v == nil {
		return
	}
	return *v, true
}

// OldGatewayPort returns the old "gateway_port" field's value of the NetworkMapping entity.
// If the NetworkMapping object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetworkMappingMutation) OldGatewayPort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGatewayPort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGatewayPort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGatewayPort: %w", err)
	}
	return oldValue.GatewayPort, nil
}

// AddGatewayPort adds i to the "gateway_port" field.
func (m *NetworkMappingMutation) AddGatewayPort(i int32) {
	if m.addgateway_port != nil {
		*m.addgateway_port += i
	} else {
		m.addgateway_port = &i
	}
}

// AddedGatewayPort returns the value that was added to the "gateway_port" field in this mutation.
func (m *NetworkMappingMutation) AddedGatewayPort() (r int32, exists bool) {
	v := m.addgateway_port
	if v == nil {
		return
	}
	return *v, true
}

// ResetGatewayPort resets all changes to the "gateway_port" field.
func (m *NetworkMappingMutation) ResetGatewayPort() {
	m.gateway_port = nil
	m.addgateway_port = nil
}

// SetGatewayIP sets the "gateway_ip" field.
func (m *NetworkMappingMutation) SetGatewayIP(s string) {
	m.gateway_ip = &s
}

// GatewayIP returns the value of the "gateway_ip" field in the mutation.
func (m *NetworkMappingMutation) GatewayIP() (r string, exists bool) {
	v := m.gateway_ip
	if v == nil {
		return
	}
	return *v, true
}

// OldGatewayIP returns the old "gateway_ip" field's value of the NetworkMapping entity.
// If the NetworkMapping object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetworkMappingMutation) OldGatewayIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGatewayIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGatewayIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGatewayIP: %w", err)
	}
	return oldValue.GatewayIP, nil
}

// ResetGatewayIP resets all changes to the "gateway_ip" field.
func (m *NetworkMappingMutation) ResetGatewayIP() {
	m.gateway_ip = nil
}

// SetComputerPort sets the "computer_port" field.
func (m *NetworkMappingMutation) SetComputerPort(i int32) {
	m.computer_port = &i
	m.addcomputer_port = nil
}

// ComputerPort returns the value of the "computer_port" field in the mutation.
func (m *NetworkMappingMutation) ComputerPort() (r int32, exists bool) {
	v := m.computer_port
	if v == nil {
		return
	}
	return *v, true
}

// OldComputerPort returns the old "computer_port" field's value of the NetworkMapping entity.
// If the NetworkMapping object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetworkMappingMutation) OldComputerPort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldComputerPort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldComputerPort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComputerPort: %w", err)
	}
	return oldValue.ComputerPort, nil
}

// AddComputerPort adds i to the "computer_port" field.
func (m *NetworkMappingMutation) AddComputerPort(i int32) {
	if m.addcomputer_port != nil {
		*m.addcomputer_port += i
	} else {
		m.addcomputer_port = &i
	}
}

// AddedComputerPort returns the value that was added to the "computer_port" field in this mutation.
func (m *NetworkMappingMutation) AddedComputerPort() (r int32, exists bool) {
	v := m.addcomputer_port
	if v == nil {
		return
	}
	return *v, true
}

// ResetComputerPort resets all changes to the "computer_port" field.
func (m *NetworkMappingMutation) ResetComputerPort() {
	m.computer_port = nil
	m.addcomputer_port = nil
}

// SetStatus sets the "status" field.
func (m *NetworkMappingMutation) SetStatus(i int) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *NetworkMappingMutation) Status() (r int, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the NetworkMapping entity.
// If the NetworkMapping object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetworkMappingMutation) OldStatus(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *NetworkMappingMutation) AddStatus(i int) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *NetworkMappingMutation) AddedStatus() (r int, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *NetworkMappingMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetFkComputerID sets the "fk_computer_id" field.
func (m *NetworkMappingMutation) SetFkComputerID(u uuid.UUID) {
	m.fk_computer_id = &u
}

// FkComputerID returns the value of the "fk_computer_id" field in the mutation.
func (m *NetworkMappingMutation) FkComputerID() (r uuid.UUID, exists bool) {
	v := m.fk_computer_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFkComputerID returns the old "fk_computer_id" field's value of the NetworkMapping entity.
// If the NetworkMapping object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetworkMappingMutation) OldFkComputerID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFkComputerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFkComputerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFkComputerID: %w", err)
	}
	return oldValue.FkComputerID, nil
}

// ResetFkComputerID resets all changes to the "fk_computer_id" field.
func (m *NetworkMappingMutation) ResetFkComputerID() {
	m.fk_computer_id = nil
}

// SetFkUserID sets the "fk_user_id" field.
func (m *NetworkMappingMutation) SetFkUserID(u uuid.UUID) {
	m.fk_user_id = &u
}

// FkUserID returns the value of the "fk_user_id" field in the mutation.
func (m *NetworkMappingMutation) FkUserID() (r uuid.UUID, exists bool) {
	v := m.fk_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFkUserID returns the old "fk_user_id" field's value of the NetworkMapping entity.
// If the NetworkMapping object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetworkMappingMutation) OldFkUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFkUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFkUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFkUserID: %w", err)
	}
	return oldValue.FkUserID, nil
}

// ResetFkUserID resets all changes to the "fk_user_id" field.
func (m *NetworkMappingMutation) ResetFkUserID() {
	m.fk_user_id = nil
}

// Where appends a list predicates to the NetworkMappingMutation builder.
func (m *NetworkMappingMutation) Where(ps ...predicate.NetworkMapping) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the NetworkMappingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *NetworkMappingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.NetworkMapping, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *NetworkMappingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *NetworkMappingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (NetworkMapping).
func (m *NetworkMappingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NetworkMappingMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.name != nil {
		fields = append(fields, networkmapping.FieldName)
	}
	if m.fk_gateway_id != nil {
		fields = append(fields, networkmapping.FieldFkGatewayID)
	}
	if m.gateway_port != nil {
		fields = append(fields, networkmapping.FieldGatewayPort)
	}
	if m.gateway_ip != nil {
		fields = append(fields, networkmapping.FieldGatewayIP)
	}
	if m.computer_port != nil {
		fields = append(fields, networkmapping.FieldComputerPort)
	}
	if m.status != nil {
		fields = append(fields, networkmapping.FieldStatus)
	}
	if m.fk_computer_id != nil {
		fields = append(fields, networkmapping.FieldFkComputerID)
	}
	if m.fk_user_id != nil {
		fields = append(fields, networkmapping.FieldFkUserID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NetworkMappingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case networkmapping.FieldName:
		return m.Name()
	case networkmapping.FieldFkGatewayID:
		return m.FkGatewayID()
	case networkmapping.FieldGatewayPort:
		return m.GatewayPort()
	case networkmapping.FieldGatewayIP:
		return m.GatewayIP()
	case networkmapping.FieldComputerPort:
		return m.ComputerPort()
	case networkmapping.FieldStatus:
		return m.Status()
	case networkmapping.FieldFkComputerID:
		return m.FkComputerID()
	case networkmapping.FieldFkUserID:
		return m.FkUserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NetworkMappingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case networkmapping.FieldName:
		return m.OldName(ctx)
	case networkmapping.FieldFkGatewayID:
		return m.OldFkGatewayID(ctx)
	case networkmapping.FieldGatewayPort:
		return m.OldGatewayPort(ctx)
	case networkmapping.FieldGatewayIP:
		return m.OldGatewayIP(ctx)
	case networkmapping.FieldComputerPort:
		return m.OldComputerPort(ctx)
	case networkmapping.FieldStatus:
		return m.OldStatus(ctx)
	case networkmapping.FieldFkComputerID:
		return m.OldFkComputerID(ctx)
	case networkmapping.FieldFkUserID:
		return m.OldFkUserID(ctx)
	}
	return nil, fmt.Errorf("unknown NetworkMapping field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NetworkMappingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case networkmapping.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case networkmapping.FieldFkGatewayID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFkGatewayID(v)
		return nil
	case networkmapping.FieldGatewayPort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGatewayPort(v)
		return nil
	case networkmapping.FieldGatewayIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGatewayIP(v)
		return nil
	case networkmapping.FieldComputerPort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComputerPort(v)
		return nil
	case networkmapping.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case networkmapping.FieldFkComputerID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFkComputerID(v)
		return nil
	case networkmapping.FieldFkUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFkUserID(v)
		return nil
	}
	return fmt.Errorf("unknown NetworkMapping field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NetworkMappingMutation) AddedFields() []string {
	var fields []string
	if m.addgateway_port != nil {
		fields = append(fields, networkmapping.FieldGatewayPort)
	}
	if m.addcomputer_port != nil {
		fields = append(fields, networkmapping.FieldComputerPort)
	}
	if m.addstatus != nil {
		fields = append(fields, networkmapping.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NetworkMappingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case networkmapping.FieldGatewayPort:
		return m.AddedGatewayPort()
	case networkmapping.FieldComputerPort:
		return m.AddedComputerPort()
	case networkmapping.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NetworkMappingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case networkmapping.FieldGatewayPort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGatewayPort(v)
		return nil
	case networkmapping.FieldComputerPort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddComputerPort(v)
		return nil
	case networkmapping.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown NetworkMapping numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NetworkMappingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NetworkMappingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NetworkMappingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown NetworkMapping nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NetworkMappingMutation) ResetField(name string) error {
	switch name {
	case networkmapping.FieldName:
		m.ResetName()
		return nil
	case networkmapping.FieldFkGatewayID:
		m.ResetFkGatewayID()
		return nil
	case networkmapping.FieldGatewayPort:
		m.ResetGatewayPort()
		return nil
	case networkmapping.FieldGatewayIP:
		m.ResetGatewayIP()
		return nil
	case networkmapping.FieldComputerPort:
		m.ResetComputerPort()
		return nil
	case networkmapping.FieldStatus:
		m.ResetStatus()
		return nil
	case networkmapping.FieldFkComputerID:
		m.ResetFkComputerID()
		return nil
	case networkmapping.FieldFkUserID:
		m.ResetFkUserID()
		return nil
	}
	return fmt.Errorf("unknown NetworkMapping field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NetworkMappingMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NetworkMappingMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NetworkMappingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NetworkMappingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NetworkMappingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NetworkMappingMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NetworkMappingMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown NetworkMapping unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NetworkMappingMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown NetworkMapping edge %s", name)
}

// S3BucketMutation represents an operation that mutates the S3Bucket nodes in the graph.
type S3BucketMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	bucket         *string
	createdTime    *time.Time
	clearedFields  map[string]struct{}
	s3_user        *uuid.UUID
	cleareds3_user bool
	done           bool
	oldValue       func(context.Context) (*S3Bucket, error)
	predicates     []predicate.S3Bucket
}

var _ ent.Mutation = (*S3BucketMutation)(nil)

// s3bucketOption allows management of the mutation configuration using functional options.
type s3bucketOption func(*S3BucketMutation)

// newS3BucketMutation creates new mutation for the S3Bucket entity.
func newS3BucketMutation(c config, op Op, opts ...s3bucketOption) *S3BucketMutation {
	m := &S3BucketMutation{
		config:        c,
		op:            op,
		typ:           TypeS3Bucket,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withS3BucketID sets the ID field of the mutation.
func withS3BucketID(id uuid.UUID) s3bucketOption {
	return func(m *S3BucketMutation) {
		var (
			err   error
			once  sync.Once
			value *S3Bucket
		)
		m.oldValue = func(ctx context.Context) (*S3Bucket, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().S3Bucket.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withS3Bucket sets the old S3Bucket of the mutation.
func withS3Bucket(node *S3Bucket) s3bucketOption {
	return func(m *S3BucketMutation) {
		m.oldValue = func(context.Context) (*S3Bucket, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m S3BucketMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m S3BucketMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of S3Bucket entities.
func (m *S3BucketMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *S3BucketMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *S3BucketMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().S3Bucket.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetBucket sets the "bucket" field.
func (m *S3BucketMutation) SetBucket(s string) {
	m.bucket = &s
}

// Bucket returns the value of the "bucket" field in the mutation.
func (m *S3BucketMutation) Bucket() (r string, exists bool) {
	v := m.bucket
	if v == nil {
		return
	}
	return *v, true
}

// OldBucket returns the old "bucket" field's value of the S3Bucket entity.
// If the S3Bucket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *S3BucketMutation) OldBucket(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBucket is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBucket requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBucket: %w", err)
	}
	return oldValue.Bucket, nil
}

// ResetBucket resets all changes to the "bucket" field.
func (m *S3BucketMutation) ResetBucket() {
	m.bucket = nil
}

// SetCreatedTime sets the "createdTime" field.
func (m *S3BucketMutation) SetCreatedTime(t time.Time) {
	m.createdTime = &t
}

// CreatedTime returns the value of the "createdTime" field in the mutation.
func (m *S3BucketMutation) CreatedTime() (r time.Time, exists bool) {
	v := m.createdTime
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedTime returns the old "createdTime" field's value of the S3Bucket entity.
// If the S3Bucket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *S3BucketMutation) OldCreatedTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedTime: %w", err)
	}
	return oldValue.CreatedTime, nil
}

// ResetCreatedTime resets all changes to the "createdTime" field.
func (m *S3BucketMutation) ResetCreatedTime() {
	m.createdTime = nil
}

// SetS3UserID sets the "s3_user" edge to the S3User entity by id.
func (m *S3BucketMutation) SetS3UserID(id uuid.UUID) {
	m.s3_user = &id
}

// ClearS3User clears the "s3_user" edge to the S3User entity.
func (m *S3BucketMutation) ClearS3User() {
	m.cleareds3_user = true
}

// S3UserCleared reports if the "s3_user" edge to the S3User entity was cleared.
func (m *S3BucketMutation) S3UserCleared() bool {
	return m.cleareds3_user
}

// S3UserID returns the "s3_user" edge ID in the mutation.
func (m *S3BucketMutation) S3UserID() (id uuid.UUID, exists bool) {
	if m.s3_user != nil {
		return *m.s3_user, true
	}
	return
}

// S3UserIDs returns the "s3_user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// S3UserID instead. It exists only for internal usage by the builders.
func (m *S3BucketMutation) S3UserIDs() (ids []uuid.UUID) {
	if id := m.s3_user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetS3User resets all changes to the "s3_user" edge.
func (m *S3BucketMutation) ResetS3User() {
	m.s3_user = nil
	m.cleareds3_user = false
}

// Where appends a list predicates to the S3BucketMutation builder.
func (m *S3BucketMutation) Where(ps ...predicate.S3Bucket) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the S3BucketMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *S3BucketMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.S3Bucket, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *S3BucketMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *S3BucketMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (S3Bucket).
func (m *S3BucketMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *S3BucketMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.bucket != nil {
		fields = append(fields, s3bucket.FieldBucket)
	}
	if m.createdTime != nil {
		fields = append(fields, s3bucket.FieldCreatedTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *S3BucketMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case s3bucket.FieldBucket:
		return m.Bucket()
	case s3bucket.FieldCreatedTime:
		return m.CreatedTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *S3BucketMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case s3bucket.FieldBucket:
		return m.OldBucket(ctx)
	case s3bucket.FieldCreatedTime:
		return m.OldCreatedTime(ctx)
	}
	return nil, fmt.Errorf("unknown S3Bucket field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *S3BucketMutation) SetField(name string, value ent.Value) error {
	switch name {
	case s3bucket.FieldBucket:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBucket(v)
		return nil
	case s3bucket.FieldCreatedTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedTime(v)
		return nil
	}
	return fmt.Errorf("unknown S3Bucket field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *S3BucketMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *S3BucketMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *S3BucketMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown S3Bucket numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *S3BucketMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *S3BucketMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *S3BucketMutation) ClearField(name string) error {
	return fmt.Errorf("unknown S3Bucket nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *S3BucketMutation) ResetField(name string) error {
	switch name {
	case s3bucket.FieldBucket:
		m.ResetBucket()
		return nil
	case s3bucket.FieldCreatedTime:
		m.ResetCreatedTime()
		return nil
	}
	return fmt.Errorf("unknown S3Bucket field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *S3BucketMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.s3_user != nil {
		edges = append(edges, s3bucket.EdgeS3User)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *S3BucketMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case s3bucket.EdgeS3User:
		if id := m.s3_user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *S3BucketMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *S3BucketMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *S3BucketMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareds3_user {
		edges = append(edges, s3bucket.EdgeS3User)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *S3BucketMutation) EdgeCleared(name string) bool {
	switch name {
	case s3bucket.EdgeS3User:
		return m.cleareds3_user
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *S3BucketMutation) ClearEdge(name string) error {
	switch name {
	case s3bucket.EdgeS3User:
		m.ClearS3User()
		return nil
	}
	return fmt.Errorf("unknown S3Bucket unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *S3BucketMutation) ResetEdge(name string) error {
	switch name {
	case s3bucket.EdgeS3User:
		m.ResetS3User()
		return nil
	}
	return fmt.Errorf("unknown S3Bucket edge %s", name)
}

// S3UserMutation represents an operation that mutates the S3User nodes in the graph.
type S3UserMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	fk_user_id     *uuid.UUID
	access_key     *string
	secret_key     *string
	clearedFields  map[string]struct{}
	buckets        map[uuid.UUID]struct{}
	removedbuckets map[uuid.UUID]struct{}
	clearedbuckets bool
	done           bool
	oldValue       func(context.Context) (*S3User, error)
	predicates     []predicate.S3User
}

var _ ent.Mutation = (*S3UserMutation)(nil)

// s3userOption allows management of the mutation configuration using functional options.
type s3userOption func(*S3UserMutation)

// newS3UserMutation creates new mutation for the S3User entity.
func newS3UserMutation(c config, op Op, opts ...s3userOption) *S3UserMutation {
	m := &S3UserMutation{
		config:        c,
		op:            op,
		typ:           TypeS3User,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withS3UserID sets the ID field of the mutation.
func withS3UserID(id uuid.UUID) s3userOption {
	return func(m *S3UserMutation) {
		var (
			err   error
			once  sync.Once
			value *S3User
		)
		m.oldValue = func(ctx context.Context) (*S3User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().S3User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withS3User sets the old S3User of the mutation.
func withS3User(node *S3User) s3userOption {
	return func(m *S3UserMutation) {
		m.oldValue = func(context.Context) (*S3User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m S3UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m S3UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of S3User entities.
func (m *S3UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *S3UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *S3UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().S3User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFkUserID sets the "fk_user_id" field.
func (m *S3UserMutation) SetFkUserID(u uuid.UUID) {
	m.fk_user_id = &u
}

// FkUserID returns the value of the "fk_user_id" field in the mutation.
func (m *S3UserMutation) FkUserID() (r uuid.UUID, exists bool) {
	v := m.fk_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFkUserID returns the old "fk_user_id" field's value of the S3User entity.
// If the S3User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *S3UserMutation) OldFkUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFkUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFkUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFkUserID: %w", err)
	}
	return oldValue.FkUserID, nil
}

// ResetFkUserID resets all changes to the "fk_user_id" field.
func (m *S3UserMutation) ResetFkUserID() {
	m.fk_user_id = nil
}

// SetAccessKey sets the "access_key" field.
func (m *S3UserMutation) SetAccessKey(s string) {
	m.access_key = &s
}

// AccessKey returns the value of the "access_key" field in the mutation.
func (m *S3UserMutation) AccessKey() (r string, exists bool) {
	v := m.access_key
	if v == nil {
		return
	}
	return *v, true
}

// OldAccessKey returns the old "access_key" field's value of the S3User entity.
// If the S3User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *S3UserMutation) OldAccessKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccessKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccessKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccessKey: %w", err)
	}
	return oldValue.AccessKey, nil
}

// ResetAccessKey resets all changes to the "access_key" field.
func (m *S3UserMutation) ResetAccessKey() {
	m.access_key = nil
}

// SetSecretKey sets the "secret_key" field.
func (m *S3UserMutation) SetSecretKey(s string) {
	m.secret_key = &s
}

// SecretKey returns the value of the "secret_key" field in the mutation.
func (m *S3UserMutation) SecretKey() (r string, exists bool) {
	v := m.secret_key
	if v == nil {
		return
	}
	return *v, true
}

// OldSecretKey returns the old "secret_key" field's value of the S3User entity.
// If the S3User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *S3UserMutation) OldSecretKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSecretKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSecretKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSecretKey: %w", err)
	}
	return oldValue.SecretKey, nil
}

// ResetSecretKey resets all changes to the "secret_key" field.
func (m *S3UserMutation) ResetSecretKey() {
	m.secret_key = nil
}

// AddBucketIDs adds the "buckets" edge to the S3Bucket entity by ids.
func (m *S3UserMutation) AddBucketIDs(ids ...uuid.UUID) {
	if m.buckets == nil {
		m.buckets = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.buckets[ids[i]] = struct{}{}
	}
}

// ClearBuckets clears the "buckets" edge to the S3Bucket entity.
func (m *S3UserMutation) ClearBuckets() {
	m.clearedbuckets = true
}

// BucketsCleared reports if the "buckets" edge to the S3Bucket entity was cleared.
func (m *S3UserMutation) BucketsCleared() bool {
	return m.clearedbuckets
}

// RemoveBucketIDs removes the "buckets" edge to the S3Bucket entity by IDs.
func (m *S3UserMutation) RemoveBucketIDs(ids ...uuid.UUID) {
	if m.removedbuckets == nil {
		m.removedbuckets = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.buckets, ids[i])
		m.removedbuckets[ids[i]] = struct{}{}
	}
}

// RemovedBuckets returns the removed IDs of the "buckets" edge to the S3Bucket entity.
func (m *S3UserMutation) RemovedBucketsIDs() (ids []uuid.UUID) {
	for id := range m.removedbuckets {
		ids = append(ids, id)
	}
	return
}

// BucketsIDs returns the "buckets" edge IDs in the mutation.
func (m *S3UserMutation) BucketsIDs() (ids []uuid.UUID) {
	for id := range m.buckets {
		ids = append(ids, id)
	}
	return
}

// ResetBuckets resets all changes to the "buckets" edge.
func (m *S3UserMutation) ResetBuckets() {
	m.buckets = nil
	m.clearedbuckets = false
	m.removedbuckets = nil
}

// Where appends a list predicates to the S3UserMutation builder.
func (m *S3UserMutation) Where(ps ...predicate.S3User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the S3UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *S3UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.S3User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *S3UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *S3UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (S3User).
func (m *S3UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *S3UserMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.fk_user_id != nil {
		fields = append(fields, s3user.FieldFkUserID)
	}
	if m.access_key != nil {
		fields = append(fields, s3user.FieldAccessKey)
	}
	if m.secret_key != nil {
		fields = append(fields, s3user.FieldSecretKey)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *S3UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case s3user.FieldFkUserID:
		return m.FkUserID()
	case s3user.FieldAccessKey:
		return m.AccessKey()
	case s3user.FieldSecretKey:
		return m.SecretKey()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *S3UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case s3user.FieldFkUserID:
		return m.OldFkUserID(ctx)
	case s3user.FieldAccessKey:
		return m.OldAccessKey(ctx)
	case s3user.FieldSecretKey:
		return m.OldSecretKey(ctx)
	}
	return nil, fmt.Errorf("unknown S3User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *S3UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case s3user.FieldFkUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFkUserID(v)
		return nil
	case s3user.FieldAccessKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccessKey(v)
		return nil
	case s3user.FieldSecretKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSecretKey(v)
		return nil
	}
	return fmt.Errorf("unknown S3User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *S3UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *S3UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *S3UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown S3User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *S3UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *S3UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *S3UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown S3User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *S3UserMutation) ResetField(name string) error {
	switch name {
	case s3user.FieldFkUserID:
		m.ResetFkUserID()
		return nil
	case s3user.FieldAccessKey:
		m.ResetAccessKey()
		return nil
	case s3user.FieldSecretKey:
		m.ResetSecretKey()
		return nil
	}
	return fmt.Errorf("unknown S3User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *S3UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.buckets != nil {
		edges = append(edges, s3user.EdgeBuckets)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *S3UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case s3user.EdgeBuckets:
		ids := make([]ent.Value, 0, len(m.buckets))
		for id := range m.buckets {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *S3UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedbuckets != nil {
		edges = append(edges, s3user.EdgeBuckets)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *S3UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case s3user.EdgeBuckets:
		ids := make([]ent.Value, 0, len(m.removedbuckets))
		for id := range m.removedbuckets {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *S3UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedbuckets {
		edges = append(edges, s3user.EdgeBuckets)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *S3UserMutation) EdgeCleared(name string) bool {
	switch name {
	case s3user.EdgeBuckets:
		return m.clearedbuckets
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *S3UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown S3User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *S3UserMutation) ResetEdge(name string) error {
	switch name {
	case s3user.EdgeBuckets:
		m.ResetBuckets()
		return nil
	}
	return fmt.Errorf("unknown S3User edge %s", name)
}

// ScriptMutation represents an operation that mutates the Script nodes in the graph.
type ScriptMutation struct {
	config
	op                            Op
	typ                           string
	id                            *int32
	user_id                       *string
	task_number                   *int32
	addtask_number                *int32
	script_name                   *string
	file_address                  *string
	script_content                *string
	create_time                   *time.Time
	update_time                   *time.Time
	clearedFields                 map[string]struct{}
	scriptExecutionRecords        map[int32]struct{}
	removedscriptExecutionRecords map[int32]struct{}
	clearedscriptExecutionRecords bool
	done                          bool
	oldValue                      func(context.Context) (*Script, error)
	predicates                    []predicate.Script
}

var _ ent.Mutation = (*ScriptMutation)(nil)

// scriptOption allows management of the mutation configuration using functional options.
type scriptOption func(*ScriptMutation)

// newScriptMutation creates new mutation for the Script entity.
func newScriptMutation(c config, op Op, opts ...scriptOption) *ScriptMutation {
	m := &ScriptMutation{
		config:        c,
		op:            op,
		typ:           TypeScript,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withScriptID sets the ID field of the mutation.
func withScriptID(id int32) scriptOption {
	return func(m *ScriptMutation) {
		var (
			err   error
			once  sync.Once
			value *Script
		)
		m.oldValue = func(ctx context.Context) (*Script, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Script.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withScript sets the old Script of the mutation.
func withScript(node *Script) scriptOption {
	return func(m *ScriptMutation) {
		m.oldValue = func(context.Context) (*Script, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ScriptMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ScriptMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Script entities.
func (m *ScriptMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ScriptMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ScriptMutation) IDs(ctx context.Context) ([]int32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Script.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *ScriptMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *ScriptMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Script entity.
// If the Script object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScriptMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *ScriptMutation) ResetUserID() {
	m.user_id = nil
}

// SetTaskNumber sets the "task_number" field.
func (m *ScriptMutation) SetTaskNumber(i int32) {
	m.task_number = &i
	m.addtask_number = nil
}

// TaskNumber returns the value of the "task_number" field in the mutation.
func (m *ScriptMutation) TaskNumber() (r int32, exists bool) {
	v := m.task_number
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskNumber returns the old "task_number" field's value of the Script entity.
// If the Script object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScriptMutation) OldTaskNumber(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskNumber: %w", err)
	}
	return oldValue.TaskNumber, nil
}

// AddTaskNumber adds i to the "task_number" field.
func (m *ScriptMutation) AddTaskNumber(i int32) {
	if m.addtask_number != nil {
		*m.addtask_number += i
	} else {
		m.addtask_number = &i
	}
}

// AddedTaskNumber returns the value that was added to the "task_number" field in this mutation.
func (m *ScriptMutation) AddedTaskNumber() (r int32, exists bool) {
	v := m.addtask_number
	if v == nil {
		return
	}
	return *v, true
}

// ResetTaskNumber resets all changes to the "task_number" field.
func (m *ScriptMutation) ResetTaskNumber() {
	m.task_number = nil
	m.addtask_number = nil
}

// SetScriptName sets the "script_name" field.
func (m *ScriptMutation) SetScriptName(s string) {
	m.script_name = &s
}

// ScriptName returns the value of the "script_name" field in the mutation.
func (m *ScriptMutation) ScriptName() (r string, exists bool) {
	v := m.script_name
	if v == nil {
		return
	}
	return *v, true
}

// OldScriptName returns the old "script_name" field's value of the Script entity.
// If the Script object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScriptMutation) OldScriptName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScriptName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScriptName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScriptName: %w", err)
	}
	return oldValue.ScriptName, nil
}

// ResetScriptName resets all changes to the "script_name" field.
func (m *ScriptMutation) ResetScriptName() {
	m.script_name = nil
}

// SetFileAddress sets the "file_address" field.
func (m *ScriptMutation) SetFileAddress(s string) {
	m.file_address = &s
}

// FileAddress returns the value of the "file_address" field in the mutation.
func (m *ScriptMutation) FileAddress() (r string, exists bool) {
	v := m.file_address
	if v == nil {
		return
	}
	return *v, true
}

// OldFileAddress returns the old "file_address" field's value of the Script entity.
// If the Script object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScriptMutation) OldFileAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileAddress: %w", err)
	}
	return oldValue.FileAddress, nil
}

// ResetFileAddress resets all changes to the "file_address" field.
func (m *ScriptMutation) ResetFileAddress() {
	m.file_address = nil
}

// SetScriptContent sets the "script_content" field.
func (m *ScriptMutation) SetScriptContent(s string) {
	m.script_content = &s
}

// ScriptContent returns the value of the "script_content" field in the mutation.
func (m *ScriptMutation) ScriptContent() (r string, exists bool) {
	v := m.script_content
	if v == nil {
		return
	}
	return *v, true
}

// OldScriptContent returns the old "script_content" field's value of the Script entity.
// If the Script object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScriptMutation) OldScriptContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScriptContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScriptContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScriptContent: %w", err)
	}
	return oldValue.ScriptContent, nil
}

// ResetScriptContent resets all changes to the "script_content" field.
func (m *ScriptMutation) ResetScriptContent() {
	m.script_content = nil
}

// SetCreateTime sets the "create_time" field.
func (m *ScriptMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ScriptMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Script entity.
// If the Script object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScriptMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ScriptMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ScriptMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ScriptMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Script entity.
// If the Script object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScriptMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ScriptMutation) ResetUpdateTime() {
	m.update_time = nil
}

// AddScriptExecutionRecordIDs adds the "scriptExecutionRecords" edge to the ScriptExecutionRecord entity by ids.
func (m *ScriptMutation) AddScriptExecutionRecordIDs(ids ...int32) {
	if m.scriptExecutionRecords == nil {
		m.scriptExecutionRecords = make(map[int32]struct{})
	}
	for i := range ids {
		m.scriptExecutionRecords[ids[i]] = struct{}{}
	}
}

// ClearScriptExecutionRecords clears the "scriptExecutionRecords" edge to the ScriptExecutionRecord entity.
func (m *ScriptMutation) ClearScriptExecutionRecords() {
	m.clearedscriptExecutionRecords = true
}

// ScriptExecutionRecordsCleared reports if the "scriptExecutionRecords" edge to the ScriptExecutionRecord entity was cleared.
func (m *ScriptMutation) ScriptExecutionRecordsCleared() bool {
	return m.clearedscriptExecutionRecords
}

// RemoveScriptExecutionRecordIDs removes the "scriptExecutionRecords" edge to the ScriptExecutionRecord entity by IDs.
func (m *ScriptMutation) RemoveScriptExecutionRecordIDs(ids ...int32) {
	if m.removedscriptExecutionRecords == nil {
		m.removedscriptExecutionRecords = make(map[int32]struct{})
	}
	for i := range ids {
		delete(m.scriptExecutionRecords, ids[i])
		m.removedscriptExecutionRecords[ids[i]] = struct{}{}
	}
}

// RemovedScriptExecutionRecords returns the removed IDs of the "scriptExecutionRecords" edge to the ScriptExecutionRecord entity.
func (m *ScriptMutation) RemovedScriptExecutionRecordsIDs() (ids []int32) {
	for id := range m.removedscriptExecutionRecords {
		ids = append(ids, id)
	}
	return
}

// ScriptExecutionRecordsIDs returns the "scriptExecutionRecords" edge IDs in the mutation.
func (m *ScriptMutation) ScriptExecutionRecordsIDs() (ids []int32) {
	for id := range m.scriptExecutionRecords {
		ids = append(ids, id)
	}
	return
}

// ResetScriptExecutionRecords resets all changes to the "scriptExecutionRecords" edge.
func (m *ScriptMutation) ResetScriptExecutionRecords() {
	m.scriptExecutionRecords = nil
	m.clearedscriptExecutionRecords = false
	m.removedscriptExecutionRecords = nil
}

// Where appends a list predicates to the ScriptMutation builder.
func (m *ScriptMutation) Where(ps ...predicate.Script) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ScriptMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ScriptMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Script, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ScriptMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ScriptMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Script).
func (m *ScriptMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ScriptMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.user_id != nil {
		fields = append(fields, script.FieldUserID)
	}
	if m.task_number != nil {
		fields = append(fields, script.FieldTaskNumber)
	}
	if m.script_name != nil {
		fields = append(fields, script.FieldScriptName)
	}
	if m.file_address != nil {
		fields = append(fields, script.FieldFileAddress)
	}
	if m.script_content != nil {
		fields = append(fields, script.FieldScriptContent)
	}
	if m.create_time != nil {
		fields = append(fields, script.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, script.FieldUpdateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ScriptMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case script.FieldUserID:
		return m.UserID()
	case script.FieldTaskNumber:
		return m.TaskNumber()
	case script.FieldScriptName:
		return m.ScriptName()
	case script.FieldFileAddress:
		return m.FileAddress()
	case script.FieldScriptContent:
		return m.ScriptContent()
	case script.FieldCreateTime:
		return m.CreateTime()
	case script.FieldUpdateTime:
		return m.UpdateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ScriptMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case script.FieldUserID:
		return m.OldUserID(ctx)
	case script.FieldTaskNumber:
		return m.OldTaskNumber(ctx)
	case script.FieldScriptName:
		return m.OldScriptName(ctx)
	case script.FieldFileAddress:
		return m.OldFileAddress(ctx)
	case script.FieldScriptContent:
		return m.OldScriptContent(ctx)
	case script.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case script.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	}
	return nil, fmt.Errorf("unknown Script field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ScriptMutation) SetField(name string, value ent.Value) error {
	switch name {
	case script.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case script.FieldTaskNumber:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskNumber(v)
		return nil
	case script.FieldScriptName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScriptName(v)
		return nil
	case script.FieldFileAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileAddress(v)
		return nil
	case script.FieldScriptContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScriptContent(v)
		return nil
	case script.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case script.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	}
	return fmt.Errorf("unknown Script field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ScriptMutation) AddedFields() []string {
	var fields []string
	if m.addtask_number != nil {
		fields = append(fields, script.FieldTaskNumber)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ScriptMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case script.FieldTaskNumber:
		return m.AddedTaskNumber()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ScriptMutation) AddField(name string, value ent.Value) error {
	switch name {
	case script.FieldTaskNumber:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTaskNumber(v)
		return nil
	}
	return fmt.Errorf("unknown Script numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ScriptMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ScriptMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ScriptMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Script nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ScriptMutation) ResetField(name string) error {
	switch name {
	case script.FieldUserID:
		m.ResetUserID()
		return nil
	case script.FieldTaskNumber:
		m.ResetTaskNumber()
		return nil
	case script.FieldScriptName:
		m.ResetScriptName()
		return nil
	case script.FieldFileAddress:
		m.ResetFileAddress()
		return nil
	case script.FieldScriptContent:
		m.ResetScriptContent()
		return nil
	case script.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case script.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	}
	return fmt.Errorf("unknown Script field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ScriptMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.scriptExecutionRecords != nil {
		edges = append(edges, script.EdgeScriptExecutionRecords)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ScriptMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case script.EdgeScriptExecutionRecords:
		ids := make([]ent.Value, 0, len(m.scriptExecutionRecords))
		for id := range m.scriptExecutionRecords {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ScriptMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedscriptExecutionRecords != nil {
		edges = append(edges, script.EdgeScriptExecutionRecords)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ScriptMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case script.EdgeScriptExecutionRecords:
		ids := make([]ent.Value, 0, len(m.removedscriptExecutionRecords))
		for id := range m.removedscriptExecutionRecords {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ScriptMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedscriptExecutionRecords {
		edges = append(edges, script.EdgeScriptExecutionRecords)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ScriptMutation) EdgeCleared(name string) bool {
	switch name {
	case script.EdgeScriptExecutionRecords:
		return m.clearedscriptExecutionRecords
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ScriptMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Script unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ScriptMutation) ResetEdge(name string) error {
	switch name {
	case script.EdgeScriptExecutionRecords:
		m.ResetScriptExecutionRecords()
		return nil
	}
	return fmt.Errorf("unknown Script edge %s", name)
}

// ScriptExecutionRecordMutation represents an operation that mutates the ScriptExecutionRecord nodes in the graph.
type ScriptExecutionRecordMutation struct {
	config
	op               Op
	typ              string
	id               *int32
	user_id          *string
	fk_script_id     *int32
	addfk_script_id  *int32
	script_content   *string
	task_number      *int32
	addtask_number   *int32
	script_name      *string
	file_address     *string
	execute_state    *int32
	addexecute_state *int32
	execute_result   *string
	create_time      *time.Time
	update_time      *time.Time
	clearedFields    map[string]struct{}
	script           *int32
	clearedscript    bool
	done             bool
	oldValue         func(context.Context) (*ScriptExecutionRecord, error)
	predicates       []predicate.ScriptExecutionRecord
}

var _ ent.Mutation = (*ScriptExecutionRecordMutation)(nil)

// scriptexecutionrecordOption allows management of the mutation configuration using functional options.
type scriptexecutionrecordOption func(*ScriptExecutionRecordMutation)

// newScriptExecutionRecordMutation creates new mutation for the ScriptExecutionRecord entity.
func newScriptExecutionRecordMutation(c config, op Op, opts ...scriptexecutionrecordOption) *ScriptExecutionRecordMutation {
	m := &ScriptExecutionRecordMutation{
		config:        c,
		op:            op,
		typ:           TypeScriptExecutionRecord,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withScriptExecutionRecordID sets the ID field of the mutation.
func withScriptExecutionRecordID(id int32) scriptexecutionrecordOption {
	return func(m *ScriptExecutionRecordMutation) {
		var (
			err   error
			once  sync.Once
			value *ScriptExecutionRecord
		)
		m.oldValue = func(ctx context.Context) (*ScriptExecutionRecord, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ScriptExecutionRecord.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withScriptExecutionRecord sets the old ScriptExecutionRecord of the mutation.
func withScriptExecutionRecord(node *ScriptExecutionRecord) scriptexecutionrecordOption {
	return func(m *ScriptExecutionRecordMutation) {
		m.oldValue = func(context.Context) (*ScriptExecutionRecord, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ScriptExecutionRecordMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ScriptExecutionRecordMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ScriptExecutionRecord entities.
func (m *ScriptExecutionRecordMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ScriptExecutionRecordMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ScriptExecutionRecordMutation) IDs(ctx context.Context) ([]int32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ScriptExecutionRecord.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *ScriptExecutionRecordMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *ScriptExecutionRecordMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the ScriptExecutionRecord entity.
// If the ScriptExecutionRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScriptExecutionRecordMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *ScriptExecutionRecordMutation) ResetUserID() {
	m.user_id = nil
}

// SetFkScriptID sets the "fk_script_id" field.
func (m *ScriptExecutionRecordMutation) SetFkScriptID(i int32) {
	m.fk_script_id = &i
	m.addfk_script_id = nil
}

// FkScriptID returns the value of the "fk_script_id" field in the mutation.
func (m *ScriptExecutionRecordMutation) FkScriptID() (r int32, exists bool) {
	v := m.fk_script_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFkScriptID returns the old "fk_script_id" field's value of the ScriptExecutionRecord entity.
// If the ScriptExecutionRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScriptExecutionRecordMutation) OldFkScriptID(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFkScriptID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFkScriptID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFkScriptID: %w", err)
	}
	return oldValue.FkScriptID, nil
}

// AddFkScriptID adds i to the "fk_script_id" field.
func (m *ScriptExecutionRecordMutation) AddFkScriptID(i int32) {
	if m.addfk_script_id != nil {
		*m.addfk_script_id += i
	} else {
		m.addfk_script_id = &i
	}
}

// AddedFkScriptID returns the value that was added to the "fk_script_id" field in this mutation.
func (m *ScriptExecutionRecordMutation) AddedFkScriptID() (r int32, exists bool) {
	v := m.addfk_script_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetFkScriptID resets all changes to the "fk_script_id" field.
func (m *ScriptExecutionRecordMutation) ResetFkScriptID() {
	m.fk_script_id = nil
	m.addfk_script_id = nil
}

// SetScriptContent sets the "script_content" field.
func (m *ScriptExecutionRecordMutation) SetScriptContent(s string) {
	m.script_content = &s
}

// ScriptContent returns the value of the "script_content" field in the mutation.
func (m *ScriptExecutionRecordMutation) ScriptContent() (r string, exists bool) {
	v := m.script_content
	if v == nil {
		return
	}
	return *v, true
}

// OldScriptContent returns the old "script_content" field's value of the ScriptExecutionRecord entity.
// If the ScriptExecutionRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScriptExecutionRecordMutation) OldScriptContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScriptContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScriptContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScriptContent: %w", err)
	}
	return oldValue.ScriptContent, nil
}

// ResetScriptContent resets all changes to the "script_content" field.
func (m *ScriptExecutionRecordMutation) ResetScriptContent() {
	m.script_content = nil
}

// SetTaskNumber sets the "task_number" field.
func (m *ScriptExecutionRecordMutation) SetTaskNumber(i int32) {
	m.task_number = &i
	m.addtask_number = nil
}

// TaskNumber returns the value of the "task_number" field in the mutation.
func (m *ScriptExecutionRecordMutation) TaskNumber() (r int32, exists bool) {
	v := m.task_number
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskNumber returns the old "task_number" field's value of the ScriptExecutionRecord entity.
// If the ScriptExecutionRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScriptExecutionRecordMutation) OldTaskNumber(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskNumber: %w", err)
	}
	return oldValue.TaskNumber, nil
}

// AddTaskNumber adds i to the "task_number" field.
func (m *ScriptExecutionRecordMutation) AddTaskNumber(i int32) {
	if m.addtask_number != nil {
		*m.addtask_number += i
	} else {
		m.addtask_number = &i
	}
}

// AddedTaskNumber returns the value that was added to the "task_number" field in this mutation.
func (m *ScriptExecutionRecordMutation) AddedTaskNumber() (r int32, exists bool) {
	v := m.addtask_number
	if v == nil {
		return
	}
	return *v, true
}

// ResetTaskNumber resets all changes to the "task_number" field.
func (m *ScriptExecutionRecordMutation) ResetTaskNumber() {
	m.task_number = nil
	m.addtask_number = nil
}

// SetScriptName sets the "script_name" field.
func (m *ScriptExecutionRecordMutation) SetScriptName(s string) {
	m.script_name = &s
}

// ScriptName returns the value of the "script_name" field in the mutation.
func (m *ScriptExecutionRecordMutation) ScriptName() (r string, exists bool) {
	v := m.script_name
	if v == nil {
		return
	}
	return *v, true
}

// OldScriptName returns the old "script_name" field's value of the ScriptExecutionRecord entity.
// If the ScriptExecutionRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScriptExecutionRecordMutation) OldScriptName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScriptName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScriptName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScriptName: %w", err)
	}
	return oldValue.ScriptName, nil
}

// ResetScriptName resets all changes to the "script_name" field.
func (m *ScriptExecutionRecordMutation) ResetScriptName() {
	m.script_name = nil
}

// SetFileAddress sets the "file_address" field.
func (m *ScriptExecutionRecordMutation) SetFileAddress(s string) {
	m.file_address = &s
}

// FileAddress returns the value of the "file_address" field in the mutation.
func (m *ScriptExecutionRecordMutation) FileAddress() (r string, exists bool) {
	v := m.file_address
	if v == nil {
		return
	}
	return *v, true
}

// OldFileAddress returns the old "file_address" field's value of the ScriptExecutionRecord entity.
// If the ScriptExecutionRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScriptExecutionRecordMutation) OldFileAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileAddress: %w", err)
	}
	return oldValue.FileAddress, nil
}

// ResetFileAddress resets all changes to the "file_address" field.
func (m *ScriptExecutionRecordMutation) ResetFileAddress() {
	m.file_address = nil
}

// SetExecuteState sets the "execute_state" field.
func (m *ScriptExecutionRecordMutation) SetExecuteState(i int32) {
	m.execute_state = &i
	m.addexecute_state = nil
}

// ExecuteState returns the value of the "execute_state" field in the mutation.
func (m *ScriptExecutionRecordMutation) ExecuteState() (r int32, exists bool) {
	v := m.execute_state
	if v == nil {
		return
	}
	return *v, true
}

// OldExecuteState returns the old "execute_state" field's value of the ScriptExecutionRecord entity.
// If the ScriptExecutionRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScriptExecutionRecordMutation) OldExecuteState(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExecuteState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExecuteState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExecuteState: %w", err)
	}
	return oldValue.ExecuteState, nil
}

// AddExecuteState adds i to the "execute_state" field.
func (m *ScriptExecutionRecordMutation) AddExecuteState(i int32) {
	if m.addexecute_state != nil {
		*m.addexecute_state += i
	} else {
		m.addexecute_state = &i
	}
}

// AddedExecuteState returns the value that was added to the "execute_state" field in this mutation.
func (m *ScriptExecutionRecordMutation) AddedExecuteState() (r int32, exists bool) {
	v := m.addexecute_state
	if v == nil {
		return
	}
	return *v, true
}

// ResetExecuteState resets all changes to the "execute_state" field.
func (m *ScriptExecutionRecordMutation) ResetExecuteState() {
	m.execute_state = nil
	m.addexecute_state = nil
}

// SetExecuteResult sets the "execute_result" field.
func (m *ScriptExecutionRecordMutation) SetExecuteResult(s string) {
	m.execute_result = &s
}

// ExecuteResult returns the value of the "execute_result" field in the mutation.
func (m *ScriptExecutionRecordMutation) ExecuteResult() (r string, exists bool) {
	v := m.execute_result
	if v == nil {
		return
	}
	return *v, true
}

// OldExecuteResult returns the old "execute_result" field's value of the ScriptExecutionRecord entity.
// If the ScriptExecutionRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScriptExecutionRecordMutation) OldExecuteResult(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExecuteResult is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExecuteResult requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExecuteResult: %w", err)
	}
	return oldValue.ExecuteResult, nil
}

// ResetExecuteResult resets all changes to the "execute_result" field.
func (m *ScriptExecutionRecordMutation) ResetExecuteResult() {
	m.execute_result = nil
}

// SetCreateTime sets the "create_time" field.
func (m *ScriptExecutionRecordMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ScriptExecutionRecordMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the ScriptExecutionRecord entity.
// If the ScriptExecutionRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScriptExecutionRecordMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ScriptExecutionRecordMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ScriptExecutionRecordMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ScriptExecutionRecordMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the ScriptExecutionRecord entity.
// If the ScriptExecutionRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScriptExecutionRecordMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ScriptExecutionRecordMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetScriptID sets the "script" edge to the Script entity by id.
func (m *ScriptExecutionRecordMutation) SetScriptID(id int32) {
	m.script = &id
}

// ClearScript clears the "script" edge to the Script entity.
func (m *ScriptExecutionRecordMutation) ClearScript() {
	m.clearedscript = true
}

// ScriptCleared reports if the "script" edge to the Script entity was cleared.
func (m *ScriptExecutionRecordMutation) ScriptCleared() bool {
	return m.clearedscript
}

// ScriptID returns the "script" edge ID in the mutation.
func (m *ScriptExecutionRecordMutation) ScriptID() (id int32, exists bool) {
	if m.script != nil {
		return *m.script, true
	}
	return
}

// ScriptIDs returns the "script" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ScriptID instead. It exists only for internal usage by the builders.
func (m *ScriptExecutionRecordMutation) ScriptIDs() (ids []int32) {
	if id := m.script; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetScript resets all changes to the "script" edge.
func (m *ScriptExecutionRecordMutation) ResetScript() {
	m.script = nil
	m.clearedscript = false
}

// Where appends a list predicates to the ScriptExecutionRecordMutation builder.
func (m *ScriptExecutionRecordMutation) Where(ps ...predicate.ScriptExecutionRecord) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ScriptExecutionRecordMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ScriptExecutionRecordMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ScriptExecutionRecord, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ScriptExecutionRecordMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ScriptExecutionRecordMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ScriptExecutionRecord).
func (m *ScriptExecutionRecordMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ScriptExecutionRecordMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.user_id != nil {
		fields = append(fields, scriptexecutionrecord.FieldUserID)
	}
	if m.fk_script_id != nil {
		fields = append(fields, scriptexecutionrecord.FieldFkScriptID)
	}
	if m.script_content != nil {
		fields = append(fields, scriptexecutionrecord.FieldScriptContent)
	}
	if m.task_number != nil {
		fields = append(fields, scriptexecutionrecord.FieldTaskNumber)
	}
	if m.script_name != nil {
		fields = append(fields, scriptexecutionrecord.FieldScriptName)
	}
	if m.file_address != nil {
		fields = append(fields, scriptexecutionrecord.FieldFileAddress)
	}
	if m.execute_state != nil {
		fields = append(fields, scriptexecutionrecord.FieldExecuteState)
	}
	if m.execute_result != nil {
		fields = append(fields, scriptexecutionrecord.FieldExecuteResult)
	}
	if m.create_time != nil {
		fields = append(fields, scriptexecutionrecord.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, scriptexecutionrecord.FieldUpdateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ScriptExecutionRecordMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case scriptexecutionrecord.FieldUserID:
		return m.UserID()
	case scriptexecutionrecord.FieldFkScriptID:
		return m.FkScriptID()
	case scriptexecutionrecord.FieldScriptContent:
		return m.ScriptContent()
	case scriptexecutionrecord.FieldTaskNumber:
		return m.TaskNumber()
	case scriptexecutionrecord.FieldScriptName:
		return m.ScriptName()
	case scriptexecutionrecord.FieldFileAddress:
		return m.FileAddress()
	case scriptexecutionrecord.FieldExecuteState:
		return m.ExecuteState()
	case scriptexecutionrecord.FieldExecuteResult:
		return m.ExecuteResult()
	case scriptexecutionrecord.FieldCreateTime:
		return m.CreateTime()
	case scriptexecutionrecord.FieldUpdateTime:
		return m.UpdateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ScriptExecutionRecordMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case scriptexecutionrecord.FieldUserID:
		return m.OldUserID(ctx)
	case scriptexecutionrecord.FieldFkScriptID:
		return m.OldFkScriptID(ctx)
	case scriptexecutionrecord.FieldScriptContent:
		return m.OldScriptContent(ctx)
	case scriptexecutionrecord.FieldTaskNumber:
		return m.OldTaskNumber(ctx)
	case scriptexecutionrecord.FieldScriptName:
		return m.OldScriptName(ctx)
	case scriptexecutionrecord.FieldFileAddress:
		return m.OldFileAddress(ctx)
	case scriptexecutionrecord.FieldExecuteState:
		return m.OldExecuteState(ctx)
	case scriptexecutionrecord.FieldExecuteResult:
		return m.OldExecuteResult(ctx)
	case scriptexecutionrecord.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case scriptexecutionrecord.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	}
	return nil, fmt.Errorf("unknown ScriptExecutionRecord field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ScriptExecutionRecordMutation) SetField(name string, value ent.Value) error {
	switch name {
	case scriptexecutionrecord.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case scriptexecutionrecord.FieldFkScriptID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFkScriptID(v)
		return nil
	case scriptexecutionrecord.FieldScriptContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScriptContent(v)
		return nil
	case scriptexecutionrecord.FieldTaskNumber:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskNumber(v)
		return nil
	case scriptexecutionrecord.FieldScriptName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScriptName(v)
		return nil
	case scriptexecutionrecord.FieldFileAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileAddress(v)
		return nil
	case scriptexecutionrecord.FieldExecuteState:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExecuteState(v)
		return nil
	case scriptexecutionrecord.FieldExecuteResult:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExecuteResult(v)
		return nil
	case scriptexecutionrecord.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case scriptexecutionrecord.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	}
	return fmt.Errorf("unknown ScriptExecutionRecord field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ScriptExecutionRecordMutation) AddedFields() []string {
	var fields []string
	if m.addfk_script_id != nil {
		fields = append(fields, scriptexecutionrecord.FieldFkScriptID)
	}
	if m.addtask_number != nil {
		fields = append(fields, scriptexecutionrecord.FieldTaskNumber)
	}
	if m.addexecute_state != nil {
		fields = append(fields, scriptexecutionrecord.FieldExecuteState)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ScriptExecutionRecordMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case scriptexecutionrecord.FieldFkScriptID:
		return m.AddedFkScriptID()
	case scriptexecutionrecord.FieldTaskNumber:
		return m.AddedTaskNumber()
	case scriptexecutionrecord.FieldExecuteState:
		return m.AddedExecuteState()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ScriptExecutionRecordMutation) AddField(name string, value ent.Value) error {
	switch name {
	case scriptexecutionrecord.FieldFkScriptID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFkScriptID(v)
		return nil
	case scriptexecutionrecord.FieldTaskNumber:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTaskNumber(v)
		return nil
	case scriptexecutionrecord.FieldExecuteState:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddExecuteState(v)
		return nil
	}
	return fmt.Errorf("unknown ScriptExecutionRecord numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ScriptExecutionRecordMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ScriptExecutionRecordMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ScriptExecutionRecordMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ScriptExecutionRecord nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ScriptExecutionRecordMutation) ResetField(name string) error {
	switch name {
	case scriptexecutionrecord.FieldUserID:
		m.ResetUserID()
		return nil
	case scriptexecutionrecord.FieldFkScriptID:
		m.ResetFkScriptID()
		return nil
	case scriptexecutionrecord.FieldScriptContent:
		m.ResetScriptContent()
		return nil
	case scriptexecutionrecord.FieldTaskNumber:
		m.ResetTaskNumber()
		return nil
	case scriptexecutionrecord.FieldScriptName:
		m.ResetScriptName()
		return nil
	case scriptexecutionrecord.FieldFileAddress:
		m.ResetFileAddress()
		return nil
	case scriptexecutionrecord.FieldExecuteState:
		m.ResetExecuteState()
		return nil
	case scriptexecutionrecord.FieldExecuteResult:
		m.ResetExecuteResult()
		return nil
	case scriptexecutionrecord.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case scriptexecutionrecord.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	}
	return fmt.Errorf("unknown ScriptExecutionRecord field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ScriptExecutionRecordMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.script != nil {
		edges = append(edges, scriptexecutionrecord.EdgeScript)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ScriptExecutionRecordMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case scriptexecutionrecord.EdgeScript:
		if id := m.script; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ScriptExecutionRecordMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ScriptExecutionRecordMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ScriptExecutionRecordMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedscript {
		edges = append(edges, scriptexecutionrecord.EdgeScript)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ScriptExecutionRecordMutation) EdgeCleared(name string) bool {
	switch name {
	case scriptexecutionrecord.EdgeScript:
		return m.clearedscript
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ScriptExecutionRecordMutation) ClearEdge(name string) error {
	switch name {
	case scriptexecutionrecord.EdgeScript:
		m.ClearScript()
		return nil
	}
	return fmt.Errorf("unknown ScriptExecutionRecord unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ScriptExecutionRecordMutation) ResetEdge(name string) error {
	switch name {
	case scriptexecutionrecord.EdgeScript:
		m.ResetScript()
		return nil
	}
	return fmt.Errorf("unknown ScriptExecutionRecord edge %s", name)
}

// StorageMutation represents an operation that mutates the Storage nodes in the graph.
type StorageMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	owner         *string
	_type         *int32
	add_type      *int32
	name          *string
	cid           *string
	size          *int32
	addsize       *int32
	last_modify   *time.Time
	parent_id     *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Storage, error)
	predicates    []predicate.Storage
}

var _ ent.Mutation = (*StorageMutation)(nil)

// storageOption allows management of the mutation configuration using functional options.
type storageOption func(*StorageMutation)

// newStorageMutation creates new mutation for the Storage entity.
func newStorageMutation(c config, op Op, opts ...storageOption) *StorageMutation {
	m := &StorageMutation{
		config:        c,
		op:            op,
		typ:           TypeStorage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStorageID sets the ID field of the mutation.
func withStorageID(id uuid.UUID) storageOption {
	return func(m *StorageMutation) {
		var (
			err   error
			once  sync.Once
			value *Storage
		)
		m.oldValue = func(ctx context.Context) (*Storage, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Storage.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStorage sets the old Storage of the mutation.
func withStorage(node *Storage) storageOption {
	return func(m *StorageMutation) {
		m.oldValue = func(context.Context) (*Storage, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StorageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StorageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Storage entities.
func (m *StorageMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StorageMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StorageMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Storage.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOwner sets the "owner" field.
func (m *StorageMutation) SetOwner(s string) {
	m.owner = &s
}

// Owner returns the value of the "owner" field in the mutation.
func (m *StorageMutation) Owner() (r string, exists bool) {
	v := m.owner
	if v == nil {
		return
	}
	return *v, true
}

// OldOwner returns the old "owner" field's value of the Storage entity.
// If the Storage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StorageMutation) OldOwner(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwner is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwner requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwner: %w", err)
	}
	return oldValue.Owner, nil
}

// ResetOwner resets all changes to the "owner" field.
func (m *StorageMutation) ResetOwner() {
	m.owner = nil
}

// SetType sets the "type" field.
func (m *StorageMutation) SetType(i int32) {
	m._type = &i
	m.add_type = nil
}

// GetType returns the value of the "type" field in the mutation.
func (m *StorageMutation) GetType() (r int32, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Storage entity.
// If the Storage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StorageMutation) OldType(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// AddType adds i to the "type" field.
func (m *StorageMutation) AddType(i int32) {
	if m.add_type != nil {
		*m.add_type += i
	} else {
		m.add_type = &i
	}
}

// AddedType returns the value that was added to the "type" field in this mutation.
func (m *StorageMutation) AddedType() (r int32, exists bool) {
	v := m.add_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetType resets all changes to the "type" field.
func (m *StorageMutation) ResetType() {
	m._type = nil
	m.add_type = nil
}

// SetName sets the "name" field.
func (m *StorageMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *StorageMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Storage entity.
// If the Storage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StorageMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *StorageMutation) ResetName() {
	m.name = nil
}

// SetCid sets the "cid" field.
func (m *StorageMutation) SetCid(s string) {
	m.cid = &s
}

// Cid returns the value of the "cid" field in the mutation.
func (m *StorageMutation) Cid() (r string, exists bool) {
	v := m.cid
	if v == nil {
		return
	}
	return *v, true
}

// OldCid returns the old "cid" field's value of the Storage entity.
// If the Storage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StorageMutation) OldCid(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCid: %w", err)
	}
	return oldValue.Cid, nil
}

// ResetCid resets all changes to the "cid" field.
func (m *StorageMutation) ResetCid() {
	m.cid = nil
}

// SetSize sets the "size" field.
func (m *StorageMutation) SetSize(i int32) {
	m.size = &i
	m.addsize = nil
}

// Size returns the value of the "size" field in the mutation.
func (m *StorageMutation) Size() (r int32, exists bool) {
	v := m.size
	if v == nil {
		return
	}
	return *v, true
}

// OldSize returns the old "size" field's value of the Storage entity.
// If the Storage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StorageMutation) OldSize(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSize: %w", err)
	}
	return oldValue.Size, nil
}

// AddSize adds i to the "size" field.
func (m *StorageMutation) AddSize(i int32) {
	if m.addsize != nil {
		*m.addsize += i
	} else {
		m.addsize = &i
	}
}

// AddedSize returns the value that was added to the "size" field in this mutation.
func (m *StorageMutation) AddedSize() (r int32, exists bool) {
	v := m.addsize
	if v == nil {
		return
	}
	return *v, true
}

// ResetSize resets all changes to the "size" field.
func (m *StorageMutation) ResetSize() {
	m.size = nil
	m.addsize = nil
}

// SetLastModify sets the "last_modify" field.
func (m *StorageMutation) SetLastModify(t time.Time) {
	m.last_modify = &t
}

// LastModify returns the value of the "last_modify" field in the mutation.
func (m *StorageMutation) LastModify() (r time.Time, exists bool) {
	v := m.last_modify
	if v == nil {
		return
	}
	return *v, true
}

// OldLastModify returns the old "last_modify" field's value of the Storage entity.
// If the Storage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StorageMutation) OldLastModify(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastModify is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastModify requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastModify: %w", err)
	}
	return oldValue.LastModify, nil
}

// ResetLastModify resets all changes to the "last_modify" field.
func (m *StorageMutation) ResetLastModify() {
	m.last_modify = nil
}

// SetParentID sets the "parent_id" field.
func (m *StorageMutation) SetParentID(s string) {
	m.parent_id = &s
}

// ParentID returns the value of the "parent_id" field in the mutation.
func (m *StorageMutation) ParentID() (r string, exists bool) {
	v := m.parent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldParentID returns the old "parent_id" field's value of the Storage entity.
// If the Storage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StorageMutation) OldParentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentID: %w", err)
	}
	return oldValue.ParentID, nil
}

// ResetParentID resets all changes to the "parent_id" field.
func (m *StorageMutation) ResetParentID() {
	m.parent_id = nil
}

// Where appends a list predicates to the StorageMutation builder.
func (m *StorageMutation) Where(ps ...predicate.Storage) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the StorageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *StorageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Storage, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *StorageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *StorageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Storage).
func (m *StorageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StorageMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.owner != nil {
		fields = append(fields, storage.FieldOwner)
	}
	if m._type != nil {
		fields = append(fields, storage.FieldType)
	}
	if m.name != nil {
		fields = append(fields, storage.FieldName)
	}
	if m.cid != nil {
		fields = append(fields, storage.FieldCid)
	}
	if m.size != nil {
		fields = append(fields, storage.FieldSize)
	}
	if m.last_modify != nil {
		fields = append(fields, storage.FieldLastModify)
	}
	if m.parent_id != nil {
		fields = append(fields, storage.FieldParentID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StorageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case storage.FieldOwner:
		return m.Owner()
	case storage.FieldType:
		return m.GetType()
	case storage.FieldName:
		return m.Name()
	case storage.FieldCid:
		return m.Cid()
	case storage.FieldSize:
		return m.Size()
	case storage.FieldLastModify:
		return m.LastModify()
	case storage.FieldParentID:
		return m.ParentID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StorageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case storage.FieldOwner:
		return m.OldOwner(ctx)
	case storage.FieldType:
		return m.OldType(ctx)
	case storage.FieldName:
		return m.OldName(ctx)
	case storage.FieldCid:
		return m.OldCid(ctx)
	case storage.FieldSize:
		return m.OldSize(ctx)
	case storage.FieldLastModify:
		return m.OldLastModify(ctx)
	case storage.FieldParentID:
		return m.OldParentID(ctx)
	}
	return nil, fmt.Errorf("unknown Storage field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StorageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case storage.FieldOwner:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwner(v)
		return nil
	case storage.FieldType:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case storage.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case storage.FieldCid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCid(v)
		return nil
	case storage.FieldSize:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSize(v)
		return nil
	case storage.FieldLastModify:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastModify(v)
		return nil
	case storage.FieldParentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentID(v)
		return nil
	}
	return fmt.Errorf("unknown Storage field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StorageMutation) AddedFields() []string {
	var fields []string
	if m.add_type != nil {
		fields = append(fields, storage.FieldType)
	}
	if m.addsize != nil {
		fields = append(fields, storage.FieldSize)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StorageMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case storage.FieldType:
		return m.AddedType()
	case storage.FieldSize:
		return m.AddedSize()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StorageMutation) AddField(name string, value ent.Value) error {
	switch name {
	case storage.FieldType:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddType(v)
		return nil
	case storage.FieldSize:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSize(v)
		return nil
	}
	return fmt.Errorf("unknown Storage numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StorageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StorageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StorageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Storage nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StorageMutation) ResetField(name string) error {
	switch name {
	case storage.FieldOwner:
		m.ResetOwner()
		return nil
	case storage.FieldType:
		m.ResetType()
		return nil
	case storage.FieldName:
		m.ResetName()
		return nil
	case storage.FieldCid:
		m.ResetCid()
		return nil
	case storage.FieldSize:
		m.ResetSize()
		return nil
	case storage.FieldLastModify:
		m.ResetLastModify()
		return nil
	case storage.FieldParentID:
		m.ResetParentID()
		return nil
	}
	return fmt.Errorf("unknown Storage field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StorageMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StorageMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StorageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StorageMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StorageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StorageMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StorageMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Storage unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StorageMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Storage edge %s", name)
}

// StorageProviderMutation represents an operation that mutates the StorageProvider nodes in the graph.
type StorageProviderMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	agent_id       *uuid.UUID
	status         *consts.StorageProviderStatus
	addstatus      *consts.StorageProviderStatus
	master_server  *string
	public_ip      *string
	public_port    *int32
	addpublic_port *int32
	grpc_port      *int32
	addgrpc_port   *int32
	created_time   *time.Time
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*StorageProvider, error)
	predicates     []predicate.StorageProvider
}

var _ ent.Mutation = (*StorageProviderMutation)(nil)

// storageproviderOption allows management of the mutation configuration using functional options.
type storageproviderOption func(*StorageProviderMutation)

// newStorageProviderMutation creates new mutation for the StorageProvider entity.
func newStorageProviderMutation(c config, op Op, opts ...storageproviderOption) *StorageProviderMutation {
	m := &StorageProviderMutation{
		config:        c,
		op:            op,
		typ:           TypeStorageProvider,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStorageProviderID sets the ID field of the mutation.
func withStorageProviderID(id uuid.UUID) storageproviderOption {
	return func(m *StorageProviderMutation) {
		var (
			err   error
			once  sync.Once
			value *StorageProvider
		)
		m.oldValue = func(ctx context.Context) (*StorageProvider, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().StorageProvider.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStorageProvider sets the old StorageProvider of the mutation.
func withStorageProvider(node *StorageProvider) storageproviderOption {
	return func(m *StorageProviderMutation) {
		m.oldValue = func(context.Context) (*StorageProvider, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StorageProviderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StorageProviderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of StorageProvider entities.
func (m *StorageProviderMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StorageProviderMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StorageProviderMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().StorageProvider.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAgentID sets the "agent_id" field.
func (m *StorageProviderMutation) SetAgentID(u uuid.UUID) {
	m.agent_id = &u
}

// AgentID returns the value of the "agent_id" field in the mutation.
func (m *StorageProviderMutation) AgentID() (r uuid.UUID, exists bool) {
	v := m.agent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAgentID returns the old "agent_id" field's value of the StorageProvider entity.
// If the StorageProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StorageProviderMutation) OldAgentID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAgentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAgentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAgentID: %w", err)
	}
	return oldValue.AgentID, nil
}

// ResetAgentID resets all changes to the "agent_id" field.
func (m *StorageProviderMutation) ResetAgentID() {
	m.agent_id = nil
}

// SetStatus sets the "status" field.
func (m *StorageProviderMutation) SetStatus(cps consts.StorageProviderStatus) {
	m.status = &cps
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *StorageProviderMutation) Status() (r consts.StorageProviderStatus, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the StorageProvider entity.
// If the StorageProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StorageProviderMutation) OldStatus(ctx context.Context) (v consts.StorageProviderStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds cps to the "status" field.
func (m *StorageProviderMutation) AddStatus(cps consts.StorageProviderStatus) {
	if m.addstatus != nil {
		*m.addstatus += cps
	} else {
		m.addstatus = &cps
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *StorageProviderMutation) AddedStatus() (r consts.StorageProviderStatus, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *StorageProviderMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetMasterServer sets the "master_server" field.
func (m *StorageProviderMutation) SetMasterServer(s string) {
	m.master_server = &s
}

// MasterServer returns the value of the "master_server" field in the mutation.
func (m *StorageProviderMutation) MasterServer() (r string, exists bool) {
	v := m.master_server
	if v == nil {
		return
	}
	return *v, true
}

// OldMasterServer returns the old "master_server" field's value of the StorageProvider entity.
// If the StorageProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StorageProviderMutation) OldMasterServer(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMasterServer is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMasterServer requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMasterServer: %w", err)
	}
	return oldValue.MasterServer, nil
}

// ResetMasterServer resets all changes to the "master_server" field.
func (m *StorageProviderMutation) ResetMasterServer() {
	m.master_server = nil
}

// SetPublicIP sets the "public_ip" field.
func (m *StorageProviderMutation) SetPublicIP(s string) {
	m.public_ip = &s
}

// PublicIP returns the value of the "public_ip" field in the mutation.
func (m *StorageProviderMutation) PublicIP() (r string, exists bool) {
	v := m.public_ip
	if v == nil {
		return
	}
	return *v, true
}

// OldPublicIP returns the old "public_ip" field's value of the StorageProvider entity.
// If the StorageProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StorageProviderMutation) OldPublicIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublicIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublicIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublicIP: %w", err)
	}
	return oldValue.PublicIP, nil
}

// ResetPublicIP resets all changes to the "public_ip" field.
func (m *StorageProviderMutation) ResetPublicIP() {
	m.public_ip = nil
}

// SetPublicPort sets the "public_port" field.
func (m *StorageProviderMutation) SetPublicPort(i int32) {
	m.public_port = &i
	m.addpublic_port = nil
}

// PublicPort returns the value of the "public_port" field in the mutation.
func (m *StorageProviderMutation) PublicPort() (r int32, exists bool) {
	v := m.public_port
	if v == nil {
		return
	}
	return *v, true
}

// OldPublicPort returns the old "public_port" field's value of the StorageProvider entity.
// If the StorageProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StorageProviderMutation) OldPublicPort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublicPort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublicPort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublicPort: %w", err)
	}
	return oldValue.PublicPort, nil
}

// AddPublicPort adds i to the "public_port" field.
func (m *StorageProviderMutation) AddPublicPort(i int32) {
	if m.addpublic_port != nil {
		*m.addpublic_port += i
	} else {
		m.addpublic_port = &i
	}
}

// AddedPublicPort returns the value that was added to the "public_port" field in this mutation.
func (m *StorageProviderMutation) AddedPublicPort() (r int32, exists bool) {
	v := m.addpublic_port
	if v == nil {
		return
	}
	return *v, true
}

// ResetPublicPort resets all changes to the "public_port" field.
func (m *StorageProviderMutation) ResetPublicPort() {
	m.public_port = nil
	m.addpublic_port = nil
}

// SetGrpcPort sets the "grpc_port" field.
func (m *StorageProviderMutation) SetGrpcPort(i int32) {
	m.grpc_port = &i
	m.addgrpc_port = nil
}

// GrpcPort returns the value of the "grpc_port" field in the mutation.
func (m *StorageProviderMutation) GrpcPort() (r int32, exists bool) {
	v := m.grpc_port
	if v == nil {
		return
	}
	return *v, true
}

// OldGrpcPort returns the old "grpc_port" field's value of the StorageProvider entity.
// If the StorageProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StorageProviderMutation) OldGrpcPort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGrpcPort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGrpcPort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGrpcPort: %w", err)
	}
	return oldValue.GrpcPort, nil
}

// AddGrpcPort adds i to the "grpc_port" field.
func (m *StorageProviderMutation) AddGrpcPort(i int32) {
	if m.addgrpc_port != nil {
		*m.addgrpc_port += i
	} else {
		m.addgrpc_port = &i
	}
}

// AddedGrpcPort returns the value that was added to the "grpc_port" field in this mutation.
func (m *StorageProviderMutation) AddedGrpcPort() (r int32, exists bool) {
	v := m.addgrpc_port
	if v == nil {
		return
	}
	return *v, true
}

// ResetGrpcPort resets all changes to the "grpc_port" field.
func (m *StorageProviderMutation) ResetGrpcPort() {
	m.grpc_port = nil
	m.addgrpc_port = nil
}

// SetCreatedTime sets the "created_time" field.
func (m *StorageProviderMutation) SetCreatedTime(t time.Time) {
	m.created_time = &t
}

// CreatedTime returns the value of the "created_time" field in the mutation.
func (m *StorageProviderMutation) CreatedTime() (r time.Time, exists bool) {
	v := m.created_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedTime returns the old "created_time" field's value of the StorageProvider entity.
// If the StorageProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StorageProviderMutation) OldCreatedTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedTime: %w", err)
	}
	return oldValue.CreatedTime, nil
}

// ResetCreatedTime resets all changes to the "created_time" field.
func (m *StorageProviderMutation) ResetCreatedTime() {
	m.created_time = nil
}

// Where appends a list predicates to the StorageProviderMutation builder.
func (m *StorageProviderMutation) Where(ps ...predicate.StorageProvider) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the StorageProviderMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *StorageProviderMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.StorageProvider, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *StorageProviderMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *StorageProviderMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (StorageProvider).
func (m *StorageProviderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StorageProviderMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.agent_id != nil {
		fields = append(fields, storageprovider.FieldAgentID)
	}
	if m.status != nil {
		fields = append(fields, storageprovider.FieldStatus)
	}
	if m.master_server != nil {
		fields = append(fields, storageprovider.FieldMasterServer)
	}
	if m.public_ip != nil {
		fields = append(fields, storageprovider.FieldPublicIP)
	}
	if m.public_port != nil {
		fields = append(fields, storageprovider.FieldPublicPort)
	}
	if m.grpc_port != nil {
		fields = append(fields, storageprovider.FieldGrpcPort)
	}
	if m.created_time != nil {
		fields = append(fields, storageprovider.FieldCreatedTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StorageProviderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case storageprovider.FieldAgentID:
		return m.AgentID()
	case storageprovider.FieldStatus:
		return m.Status()
	case storageprovider.FieldMasterServer:
		return m.MasterServer()
	case storageprovider.FieldPublicIP:
		return m.PublicIP()
	case storageprovider.FieldPublicPort:
		return m.PublicPort()
	case storageprovider.FieldGrpcPort:
		return m.GrpcPort()
	case storageprovider.FieldCreatedTime:
		return m.CreatedTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StorageProviderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case storageprovider.FieldAgentID:
		return m.OldAgentID(ctx)
	case storageprovider.FieldStatus:
		return m.OldStatus(ctx)
	case storageprovider.FieldMasterServer:
		return m.OldMasterServer(ctx)
	case storageprovider.FieldPublicIP:
		return m.OldPublicIP(ctx)
	case storageprovider.FieldPublicPort:
		return m.OldPublicPort(ctx)
	case storageprovider.FieldGrpcPort:
		return m.OldGrpcPort(ctx)
	case storageprovider.FieldCreatedTime:
		return m.OldCreatedTime(ctx)
	}
	return nil, fmt.Errorf("unknown StorageProvider field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StorageProviderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case storageprovider.FieldAgentID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAgentID(v)
		return nil
	case storageprovider.FieldStatus:
		v, ok := value.(consts.StorageProviderStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case storageprovider.FieldMasterServer:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMasterServer(v)
		return nil
	case storageprovider.FieldPublicIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublicIP(v)
		return nil
	case storageprovider.FieldPublicPort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublicPort(v)
		return nil
	case storageprovider.FieldGrpcPort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGrpcPort(v)
		return nil
	case storageprovider.FieldCreatedTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedTime(v)
		return nil
	}
	return fmt.Errorf("unknown StorageProvider field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StorageProviderMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, storageprovider.FieldStatus)
	}
	if m.addpublic_port != nil {
		fields = append(fields, storageprovider.FieldPublicPort)
	}
	if m.addgrpc_port != nil {
		fields = append(fields, storageprovider.FieldGrpcPort)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StorageProviderMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case storageprovider.FieldStatus:
		return m.AddedStatus()
	case storageprovider.FieldPublicPort:
		return m.AddedPublicPort()
	case storageprovider.FieldGrpcPort:
		return m.AddedGrpcPort()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StorageProviderMutation) AddField(name string, value ent.Value) error {
	switch name {
	case storageprovider.FieldStatus:
		v, ok := value.(consts.StorageProviderStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case storageprovider.FieldPublicPort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPublicPort(v)
		return nil
	case storageprovider.FieldGrpcPort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGrpcPort(v)
		return nil
	}
	return fmt.Errorf("unknown StorageProvider numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StorageProviderMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StorageProviderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StorageProviderMutation) ClearField(name string) error {
	return fmt.Errorf("unknown StorageProvider nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StorageProviderMutation) ResetField(name string) error {
	switch name {
	case storageprovider.FieldAgentID:
		m.ResetAgentID()
		return nil
	case storageprovider.FieldStatus:
		m.ResetStatus()
		return nil
	case storageprovider.FieldMasterServer:
		m.ResetMasterServer()
		return nil
	case storageprovider.FieldPublicIP:
		m.ResetPublicIP()
		return nil
	case storageprovider.FieldPublicPort:
		m.ResetPublicPort()
		return nil
	case storageprovider.FieldGrpcPort:
		m.ResetGrpcPort()
		return nil
	case storageprovider.FieldCreatedTime:
		m.ResetCreatedTime()
		return nil
	}
	return fmt.Errorf("unknown StorageProvider field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StorageProviderMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StorageProviderMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StorageProviderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StorageProviderMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StorageProviderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StorageProviderMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StorageProviderMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown StorageProvider unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StorageProviderMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown StorageProvider edge %s", name)
}

// TaskMutation represents an operation that mutates the Task nodes in the graph.
type TaskMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	agent_id      *string
	cmd           *int32
	addcmd        *int32
	params        *string
	status        *int
	addstatus     *int
	create_time   *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Task, error)
	predicates    []predicate.Task
}

var _ ent.Mutation = (*TaskMutation)(nil)

// taskOption allows management of the mutation configuration using functional options.
type taskOption func(*TaskMutation)

// newTaskMutation creates new mutation for the Task entity.
func newTaskMutation(c config, op Op, opts ...taskOption) *TaskMutation {
	m := &TaskMutation{
		config:        c,
		op:            op,
		typ:           TypeTask,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTaskID sets the ID field of the mutation.
func withTaskID(id uuid.UUID) taskOption {
	return func(m *TaskMutation) {
		var (
			err   error
			once  sync.Once
			value *Task
		)
		m.oldValue = func(ctx context.Context) (*Task, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Task.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTask sets the old Task of the mutation.
func withTask(node *Task) taskOption {
	return func(m *TaskMutation) {
		m.oldValue = func(context.Context) (*Task, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TaskMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TaskMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Task entities.
func (m *TaskMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TaskMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TaskMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Task.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAgentID sets the "agent_id" field.
func (m *TaskMutation) SetAgentID(s string) {
	m.agent_id = &s
}

// AgentID returns the value of the "agent_id" field in the mutation.
func (m *TaskMutation) AgentID() (r string, exists bool) {
	v := m.agent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAgentID returns the old "agent_id" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldAgentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAgentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAgentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAgentID: %w", err)
	}
	return oldValue.AgentID, nil
}

// ResetAgentID resets all changes to the "agent_id" field.
func (m *TaskMutation) ResetAgentID() {
	m.agent_id = nil
}

// SetCmd sets the "cmd" field.
func (m *TaskMutation) SetCmd(i int32) {
	m.cmd = &i
	m.addcmd = nil
}

// Cmd returns the value of the "cmd" field in the mutation.
func (m *TaskMutation) Cmd() (r int32, exists bool) {
	v := m.cmd
	if v == nil {
		return
	}
	return *v, true
}

// OldCmd returns the old "cmd" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldCmd(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCmd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCmd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCmd: %w", err)
	}
	return oldValue.Cmd, nil
}

// AddCmd adds i to the "cmd" field.
func (m *TaskMutation) AddCmd(i int32) {
	if m.addcmd != nil {
		*m.addcmd += i
	} else {
		m.addcmd = &i
	}
}

// AddedCmd returns the value that was added to the "cmd" field in this mutation.
func (m *TaskMutation) AddedCmd() (r int32, exists bool) {
	v := m.addcmd
	if v == nil {
		return
	}
	return *v, true
}

// ResetCmd resets all changes to the "cmd" field.
func (m *TaskMutation) ResetCmd() {
	m.cmd = nil
	m.addcmd = nil
}

// SetParams sets the "params" field.
func (m *TaskMutation) SetParams(s string) {
	m.params = &s
}

// Params returns the value of the "params" field in the mutation.
func (m *TaskMutation) Params() (r string, exists bool) {
	v := m.params
	if v == nil {
		return
	}
	return *v, true
}

// OldParams returns the old "params" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldParams(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParams is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParams requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParams: %w", err)
	}
	return oldValue.Params, nil
}

// ResetParams resets all changes to the "params" field.
func (m *TaskMutation) ResetParams() {
	m.params = nil
}

// SetStatus sets the "status" field.
func (m *TaskMutation) SetStatus(i int) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *TaskMutation) Status() (r int, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldStatus(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *TaskMutation) AddStatus(i int) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *TaskMutation) AddedStatus() (r int, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *TaskMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetCreateTime sets the "create_time" field.
func (m *TaskMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *TaskMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *TaskMutation) ResetCreateTime() {
	m.create_time = nil
}

// Where appends a list predicates to the TaskMutation builder.
func (m *TaskMutation) Where(ps ...predicate.Task) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TaskMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TaskMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Task, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TaskMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TaskMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Task).
func (m *TaskMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TaskMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.agent_id != nil {
		fields = append(fields, task.FieldAgentID)
	}
	if m.cmd != nil {
		fields = append(fields, task.FieldCmd)
	}
	if m.params != nil {
		fields = append(fields, task.FieldParams)
	}
	if m.status != nil {
		fields = append(fields, task.FieldStatus)
	}
	if m.create_time != nil {
		fields = append(fields, task.FieldCreateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TaskMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case task.FieldAgentID:
		return m.AgentID()
	case task.FieldCmd:
		return m.Cmd()
	case task.FieldParams:
		return m.Params()
	case task.FieldStatus:
		return m.Status()
	case task.FieldCreateTime:
		return m.CreateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TaskMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case task.FieldAgentID:
		return m.OldAgentID(ctx)
	case task.FieldCmd:
		return m.OldCmd(ctx)
	case task.FieldParams:
		return m.OldParams(ctx)
	case task.FieldStatus:
		return m.OldStatus(ctx)
	case task.FieldCreateTime:
		return m.OldCreateTime(ctx)
	}
	return nil, fmt.Errorf("unknown Task field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskMutation) SetField(name string, value ent.Value) error {
	switch name {
	case task.FieldAgentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAgentID(v)
		return nil
	case task.FieldCmd:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCmd(v)
		return nil
	case task.FieldParams:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParams(v)
		return nil
	case task.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case task.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	}
	return fmt.Errorf("unknown Task field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TaskMutation) AddedFields() []string {
	var fields []string
	if m.addcmd != nil {
		fields = append(fields, task.FieldCmd)
	}
	if m.addstatus != nil {
		fields = append(fields, task.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TaskMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case task.FieldCmd:
		return m.AddedCmd()
	case task.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskMutation) AddField(name string, value ent.Value) error {
	switch name {
	case task.FieldCmd:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCmd(v)
		return nil
	case task.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Task numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TaskMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TaskMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TaskMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Task nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TaskMutation) ResetField(name string) error {
	switch name {
	case task.FieldAgentID:
		m.ResetAgentID()
		return nil
	case task.FieldCmd:
		m.ResetCmd()
		return nil
	case task.FieldParams:
		m.ResetParams()
		return nil
	case task.FieldStatus:
		m.ResetStatus()
		return nil
	case task.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	}
	return fmt.Errorf("unknown Task field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TaskMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TaskMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TaskMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TaskMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TaskMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TaskMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TaskMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Task unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TaskMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Task edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	country_call_coding *string
	telephone_number    *string
	password            *string
	create_date         *time.Time
	last_login_date     *time.Time
	name                *string
	icon                *string
	pwd_config          *bool
	clearedFields       map[string]struct{}
	done                bool
	oldValue            func(context.Context) (*User, error)
	predicates          []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCountryCallCoding sets the "country_call_coding" field.
func (m *UserMutation) SetCountryCallCoding(s string) {
	m.country_call_coding = &s
}

// CountryCallCoding returns the value of the "country_call_coding" field in the mutation.
func (m *UserMutation) CountryCallCoding() (r string, exists bool) {
	v := m.country_call_coding
	if v == nil {
		return
	}
	return *v, true
}

// OldCountryCallCoding returns the old "country_call_coding" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCountryCallCoding(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCountryCallCoding is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCountryCallCoding requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCountryCallCoding: %w", err)
	}
	return oldValue.CountryCallCoding, nil
}

// ResetCountryCallCoding resets all changes to the "country_call_coding" field.
func (m *UserMutation) ResetCountryCallCoding() {
	m.country_call_coding = nil
}

// SetTelephoneNumber sets the "telephone_number" field.
func (m *UserMutation) SetTelephoneNumber(s string) {
	m.telephone_number = &s
}

// TelephoneNumber returns the value of the "telephone_number" field in the mutation.
func (m *UserMutation) TelephoneNumber() (r string, exists bool) {
	v := m.telephone_number
	if v == nil {
		return
	}
	return *v, true
}

// OldTelephoneNumber returns the old "telephone_number" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTelephoneNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTelephoneNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTelephoneNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTelephoneNumber: %w", err)
	}
	return oldValue.TelephoneNumber, nil
}

// ResetTelephoneNumber resets all changes to the "telephone_number" field.
func (m *UserMutation) ResetTelephoneNumber() {
	m.telephone_number = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetCreateDate sets the "create_date" field.
func (m *UserMutation) SetCreateDate(t time.Time) {
	m.create_date = &t
}

// CreateDate returns the value of the "create_date" field in the mutation.
func (m *UserMutation) CreateDate() (r time.Time, exists bool) {
	v := m.create_date
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateDate returns the old "create_date" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreateDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateDate: %w", err)
	}
	return oldValue.CreateDate, nil
}

// ResetCreateDate resets all changes to the "create_date" field.
func (m *UserMutation) ResetCreateDate() {
	m.create_date = nil
}

// SetLastLoginDate sets the "last_login_date" field.
func (m *UserMutation) SetLastLoginDate(t time.Time) {
	m.last_login_date = &t
}

// LastLoginDate returns the value of the "last_login_date" field in the mutation.
func (m *UserMutation) LastLoginDate() (r time.Time, exists bool) {
	v := m.last_login_date
	if v == nil {
		return
	}
	return *v, true
}

// OldLastLoginDate returns the old "last_login_date" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastLoginDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastLoginDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastLoginDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastLoginDate: %w", err)
	}
	return oldValue.LastLoginDate, nil
}

// ResetLastLoginDate resets all changes to the "last_login_date" field.
func (m *UserMutation) ResetLastLoginDate() {
	m.last_login_date = nil
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetIcon sets the "icon" field.
func (m *UserMutation) SetIcon(s string) {
	m.icon = &s
}

// Icon returns the value of the "icon" field in the mutation.
func (m *UserMutation) Icon() (r string, exists bool) {
	v := m.icon
	if v == nil {
		return
	}
	return *v, true
}

// OldIcon returns the old "icon" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIcon(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIcon is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIcon requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIcon: %w", err)
	}
	return oldValue.Icon, nil
}

// ResetIcon resets all changes to the "icon" field.
func (m *UserMutation) ResetIcon() {
	m.icon = nil
}

// SetPwdConfig sets the "pwd_config" field.
func (m *UserMutation) SetPwdConfig(b bool) {
	m.pwd_config = &b
}

// PwdConfig returns the value of the "pwd_config" field in the mutation.
func (m *UserMutation) PwdConfig() (r bool, exists bool) {
	v := m.pwd_config
	if v == nil {
		return
	}
	return *v, true
}

// OldPwdConfig returns the old "pwd_config" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPwdConfig(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPwdConfig is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPwdConfig requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPwdConfig: %w", err)
	}
	return oldValue.PwdConfig, nil
}

// ResetPwdConfig resets all changes to the "pwd_config" field.
func (m *UserMutation) ResetPwdConfig() {
	m.pwd_config = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.country_call_coding != nil {
		fields = append(fields, user.FieldCountryCallCoding)
	}
	if m.telephone_number != nil {
		fields = append(fields, user.FieldTelephoneNumber)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.create_date != nil {
		fields = append(fields, user.FieldCreateDate)
	}
	if m.last_login_date != nil {
		fields = append(fields, user.FieldLastLoginDate)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.icon != nil {
		fields = append(fields, user.FieldIcon)
	}
	if m.pwd_config != nil {
		fields = append(fields, user.FieldPwdConfig)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCountryCallCoding:
		return m.CountryCallCoding()
	case user.FieldTelephoneNumber:
		return m.TelephoneNumber()
	case user.FieldPassword:
		return m.Password()
	case user.FieldCreateDate:
		return m.CreateDate()
	case user.FieldLastLoginDate:
		return m.LastLoginDate()
	case user.FieldName:
		return m.Name()
	case user.FieldIcon:
		return m.Icon()
	case user.FieldPwdConfig:
		return m.PwdConfig()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCountryCallCoding:
		return m.OldCountryCallCoding(ctx)
	case user.FieldTelephoneNumber:
		return m.OldTelephoneNumber(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldCreateDate:
		return m.OldCreateDate(ctx)
	case user.FieldLastLoginDate:
		return m.OldLastLoginDate(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldIcon:
		return m.OldIcon(ctx)
	case user.FieldPwdConfig:
		return m.OldPwdConfig(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCountryCallCoding:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCountryCallCoding(v)
		return nil
	case user.FieldTelephoneNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTelephoneNumber(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldCreateDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateDate(v)
		return nil
	case user.FieldLastLoginDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastLoginDate(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldIcon:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIcon(v)
		return nil
	case user.FieldPwdConfig:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPwdConfig(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCountryCallCoding:
		m.ResetCountryCallCoding()
		return nil
	case user.FieldTelephoneNumber:
		m.ResetTelephoneNumber()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldCreateDate:
		m.ResetCreateDate()
		return nil
	case user.FieldLastLoginDate:
		m.ResetLastLoginDate()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldIcon:
		m.ResetIcon()
		return nil
	case user.FieldPwdConfig:
		m.ResetPwdConfig()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
