// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/mohaijiang/computeshare-server/internal/data/ent/agent"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/computeimage"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/computeinstance"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/computespec"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/schema"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/storage"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/user"
	"time"

	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	agentFields := schema.Agent{}.Fields()
	_ = agentFields
	// agentDescName is the schema descriptor for name field.
	agentDescName := agentFields[1].Descriptor()
	// agent.NameValidator is a validator for the "name" field. It is called by the builders before save.
	agent.NameValidator = agentDescName.Validators[0].(func(string) error)
	// agentDescID is the schema descriptor for id field.
	agentDescID := agentFields[0].Descriptor()
	// agent.DefaultID holds the default value on creation for the id field.
	agent.DefaultID = agentDescID.Default.(func() uuid.UUID)
	computeimageFields := schema.ComputeImage{}.Fields()
	_ = computeimageFields
	// computeimageDescName is the schema descriptor for name field.
	computeimageDescName := computeimageFields[1].Descriptor()
	// computeimage.NameValidator is a validator for the "name" field. It is called by the builders before save.
	computeimage.NameValidator = computeimageDescName.Validators[0].(func(string) error)
	// computeimageDescImage is the schema descriptor for image field.
	computeimageDescImage := computeimageFields[2].Descriptor()
	// computeimage.ImageValidator is a validator for the "image" field. It is called by the builders before save.
	computeimage.ImageValidator = computeimageDescImage.Validators[0].(func(string) error)
	// computeimageDescTag is the schema descriptor for tag field.
	computeimageDescTag := computeimageFields[3].Descriptor()
	// computeimage.TagValidator is a validator for the "tag" field. It is called by the builders before save.
	computeimage.TagValidator = computeimageDescTag.Validators[0].(func(string) error)
	computeinstanceFields := schema.ComputeInstance{}.Fields()
	_ = computeinstanceFields
	// computeinstanceDescOwner is the schema descriptor for owner field.
	computeinstanceDescOwner := computeinstanceFields[1].Descriptor()
	// computeinstance.OwnerValidator is a validator for the "owner" field. It is called by the builders before save.
	computeinstance.OwnerValidator = computeinstanceDescOwner.Validators[0].(func(string) error)
	// computeinstanceDescName is the schema descriptor for name field.
	computeinstanceDescName := computeinstanceFields[2].Descriptor()
	// computeinstance.NameValidator is a validator for the "name" field. It is called by the builders before save.
	computeinstance.NameValidator = computeinstanceDescName.Validators[0].(func(string) error)
	// computeinstanceDescCore is the schema descriptor for core field.
	computeinstanceDescCore := computeinstanceFields[3].Descriptor()
	// computeinstance.CoreValidator is a validator for the "core" field. It is called by the builders before save.
	computeinstance.CoreValidator = computeinstanceDescCore.Validators[0].(func(string) error)
	// computeinstanceDescMemory is the schema descriptor for memory field.
	computeinstanceDescMemory := computeinstanceFields[4].Descriptor()
	// computeinstance.MemoryValidator is a validator for the "memory" field. It is called by the builders before save.
	computeinstance.MemoryValidator = computeinstanceDescMemory.Validators[0].(func(string) error)
	// computeinstanceDescImage is the schema descriptor for image field.
	computeinstanceDescImage := computeinstanceFields[5].Descriptor()
	// computeinstance.ImageValidator is a validator for the "image" field. It is called by the builders before save.
	computeinstance.ImageValidator = computeinstanceDescImage.Validators[0].(func(string) error)
	// computeinstanceDescID is the schema descriptor for id field.
	computeinstanceDescID := computeinstanceFields[0].Descriptor()
	// computeinstance.DefaultID holds the default value on creation for the id field.
	computeinstance.DefaultID = computeinstanceDescID.Default.(func() uuid.UUID)
	computespecFields := schema.ComputeSpec{}.Fields()
	_ = computespecFields
	// computespecDescCore is the schema descriptor for core field.
	computespecDescCore := computespecFields[1].Descriptor()
	// computespec.CoreValidator is a validator for the "core" field. It is called by the builders before save.
	computespec.CoreValidator = computespecDescCore.Validators[0].(func(string) error)
	// computespecDescMemory is the schema descriptor for memory field.
	computespecDescMemory := computespecFields[2].Descriptor()
	// computespec.MemoryValidator is a validator for the "memory" field. It is called by the builders before save.
	computespec.MemoryValidator = computespecDescMemory.Validators[0].(func(string) error)
	storageFields := schema.Storage{}.Fields()
	_ = storageFields
	// storageDescOwner is the schema descriptor for owner field.
	storageDescOwner := storageFields[1].Descriptor()
	// storage.OwnerValidator is a validator for the "owner" field. It is called by the builders before save.
	storage.OwnerValidator = func() func(string) error {
		validators := storageDescOwner.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(owner string) error {
			for _, fn := range fns {
				if err := fn(owner); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// storageDescType is the schema descriptor for type field.
	storageDescType := storageFields[2].Descriptor()
	// storage.DefaultType holds the default value on creation for the type field.
	storage.DefaultType = storageDescType.Default.(int32)
	// storageDescName is the schema descriptor for name field.
	storageDescName := storageFields[3].Descriptor()
	// storage.NameValidator is a validator for the "name" field. It is called by the builders before save.
	storage.NameValidator = func() func(string) error {
		validators := storageDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// storageDescCid is the schema descriptor for cid field.
	storageDescCid := storageFields[4].Descriptor()
	// storage.CidValidator is a validator for the "cid" field. It is called by the builders before save.
	storage.CidValidator = storageDescCid.Validators[0].(func(string) error)
	// storageDescLastModify is the schema descriptor for last_modify field.
	storageDescLastModify := storageFields[6].Descriptor()
	// storage.DefaultLastModify holds the default value on creation for the last_modify field.
	storage.DefaultLastModify = storageDescLastModify.Default.(func() time.Time)
	// storageDescParentID is the schema descriptor for parent_id field.
	storageDescParentID := storageFields[7].Descriptor()
	// storage.ParentIDValidator is a validator for the "parent_id" field. It is called by the builders before save.
	storage.ParentIDValidator = storageDescParentID.Validators[0].(func(string) error)
	// storageDescID is the schema descriptor for id field.
	storageDescID := storageFields[0].Descriptor()
	// storage.DefaultID holds the default value on creation for the id field.
	storage.DefaultID = storageDescID.Default.(func() uuid.UUID)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCountryCallCoding is the schema descriptor for country_call_coding field.
	userDescCountryCallCoding := userFields[1].Descriptor()
	// user.CountryCallCodingValidator is a validator for the "country_call_coding" field. It is called by the builders before save.
	user.CountryCallCodingValidator = func() func(string) error {
		validators := userDescCountryCallCoding.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(country_call_coding string) error {
			for _, fn := range fns {
				if err := fn(country_call_coding); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescTelephoneNumber is the schema descriptor for telephone_number field.
	userDescTelephoneNumber := userFields[2].Descriptor()
	// user.TelephoneNumberValidator is a validator for the "telephone_number" field. It is called by the builders before save.
	user.TelephoneNumberValidator = func() func(string) error {
		validators := userDescTelephoneNumber.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(telephone_number string) error {
			for _, fn := range fns {
				if err := fn(telephone_number); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[3].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
	// userDescCreateDate is the schema descriptor for create_date field.
	userDescCreateDate := userFields[4].Descriptor()
	// user.DefaultCreateDate holds the default value on creation for the create_date field.
	user.DefaultCreateDate = userDescCreateDate.Default.(func() time.Time)
	// userDescLastLoginDate is the schema descriptor for last_login_date field.
	userDescLastLoginDate := userFields[5].Descriptor()
	// user.DefaultLastLoginDate holds the default value on creation for the last_login_date field.
	user.DefaultLastLoginDate = userDescLastLoginDate.Default.(func() time.Time)
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[6].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = userDescName.Validators[0].(func(string) error)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
}
