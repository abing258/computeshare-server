// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/s3bucket"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/s3user"
)

// S3Bucket is the model entity for the S3Bucket schema.
type S3Bucket struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// bucket
	Bucket string `json:"bucket,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the S3BucketQuery when eager-loading is set.
	Edges         S3BucketEdges `json:"edges"`
	s3bucket_user *uuid.UUID
	selectValues  sql.SelectValues
}

// S3BucketEdges holds the relations/edges for other nodes in the graph.
type S3BucketEdges struct {
	// User holds the value of the user edge.
	User *S3User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e S3BucketEdges) UserOrErr() (*S3User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: s3user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*S3Bucket) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case s3bucket.FieldBucket:
			values[i] = new(sql.NullString)
		case s3bucket.FieldID:
			values[i] = new(uuid.UUID)
		case s3bucket.ForeignKeys[0]: // s3bucket_user
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the S3Bucket fields.
func (s *S3Bucket) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case s3bucket.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case s3bucket.FieldBucket:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bucket", values[i])
			} else if value.Valid {
				s.Bucket = value.String
			}
		case s3bucket.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field s3bucket_user", values[i])
			} else if value.Valid {
				s.s3bucket_user = new(uuid.UUID)
				*s.s3bucket_user = *value.S.(*uuid.UUID)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the S3Bucket.
// This includes values selected through modifiers, order, etc.
func (s *S3Bucket) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the S3Bucket entity.
func (s *S3Bucket) QueryUser() *S3UserQuery {
	return NewS3BucketClient(s.config).QueryUser(s)
}

// Update returns a builder for updating this S3Bucket.
// Note that you need to call S3Bucket.Unwrap() before calling this method if this S3Bucket
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *S3Bucket) Update() *S3BucketUpdateOne {
	return NewS3BucketClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the S3Bucket entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *S3Bucket) Unwrap() *S3Bucket {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: S3Bucket is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *S3Bucket) String() string {
	var builder strings.Builder
	builder.WriteString("S3Bucket(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("bucket=")
	builder.WriteString(s.Bucket)
	builder.WriteByte(')')
	return builder.String()
}

// S3Buckets is a parsable slice of S3Bucket.
type S3Buckets []*S3Bucket
