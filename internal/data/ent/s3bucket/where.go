// Code generated by ent, DO NOT EDIT.

package s3bucket

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldLTE(FieldID, id))
}

// FkUserID applies equality check predicate on the "fk_user_id" field. It's identical to FkUserIDEQ.
func FkUserID(v uuid.UUID) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldEQ(FieldFkUserID, v))
}

// BucketName applies equality check predicate on the "bucket_name" field. It's identical to BucketNameEQ.
func BucketName(v string) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldEQ(FieldBucketName, v))
}

// CreatedTime applies equality check predicate on the "createdTime" field. It's identical to CreatedTimeEQ.
func CreatedTime(v time.Time) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldEQ(FieldCreatedTime, v))
}

// FkUserIDEQ applies the EQ predicate on the "fk_user_id" field.
func FkUserIDEQ(v uuid.UUID) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldEQ(FieldFkUserID, v))
}

// FkUserIDNEQ applies the NEQ predicate on the "fk_user_id" field.
func FkUserIDNEQ(v uuid.UUID) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldNEQ(FieldFkUserID, v))
}

// FkUserIDIn applies the In predicate on the "fk_user_id" field.
func FkUserIDIn(vs ...uuid.UUID) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldIn(FieldFkUserID, vs...))
}

// FkUserIDNotIn applies the NotIn predicate on the "fk_user_id" field.
func FkUserIDNotIn(vs ...uuid.UUID) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldNotIn(FieldFkUserID, vs...))
}

// FkUserIDGT applies the GT predicate on the "fk_user_id" field.
func FkUserIDGT(v uuid.UUID) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldGT(FieldFkUserID, v))
}

// FkUserIDGTE applies the GTE predicate on the "fk_user_id" field.
func FkUserIDGTE(v uuid.UUID) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldGTE(FieldFkUserID, v))
}

// FkUserIDLT applies the LT predicate on the "fk_user_id" field.
func FkUserIDLT(v uuid.UUID) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldLT(FieldFkUserID, v))
}

// FkUserIDLTE applies the LTE predicate on the "fk_user_id" field.
func FkUserIDLTE(v uuid.UUID) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldLTE(FieldFkUserID, v))
}

// BucketNameEQ applies the EQ predicate on the "bucket_name" field.
func BucketNameEQ(v string) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldEQ(FieldBucketName, v))
}

// BucketNameNEQ applies the NEQ predicate on the "bucket_name" field.
func BucketNameNEQ(v string) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldNEQ(FieldBucketName, v))
}

// BucketNameIn applies the In predicate on the "bucket_name" field.
func BucketNameIn(vs ...string) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldIn(FieldBucketName, vs...))
}

// BucketNameNotIn applies the NotIn predicate on the "bucket_name" field.
func BucketNameNotIn(vs ...string) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldNotIn(FieldBucketName, vs...))
}

// BucketNameGT applies the GT predicate on the "bucket_name" field.
func BucketNameGT(v string) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldGT(FieldBucketName, v))
}

// BucketNameGTE applies the GTE predicate on the "bucket_name" field.
func BucketNameGTE(v string) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldGTE(FieldBucketName, v))
}

// BucketNameLT applies the LT predicate on the "bucket_name" field.
func BucketNameLT(v string) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldLT(FieldBucketName, v))
}

// BucketNameLTE applies the LTE predicate on the "bucket_name" field.
func BucketNameLTE(v string) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldLTE(FieldBucketName, v))
}

// BucketNameContains applies the Contains predicate on the "bucket_name" field.
func BucketNameContains(v string) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldContains(FieldBucketName, v))
}

// BucketNameHasPrefix applies the HasPrefix predicate on the "bucket_name" field.
func BucketNameHasPrefix(v string) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldHasPrefix(FieldBucketName, v))
}

// BucketNameHasSuffix applies the HasSuffix predicate on the "bucket_name" field.
func BucketNameHasSuffix(v string) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldHasSuffix(FieldBucketName, v))
}

// BucketNameEqualFold applies the EqualFold predicate on the "bucket_name" field.
func BucketNameEqualFold(v string) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldEqualFold(FieldBucketName, v))
}

// BucketNameContainsFold applies the ContainsFold predicate on the "bucket_name" field.
func BucketNameContainsFold(v string) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldContainsFold(FieldBucketName, v))
}

// CreatedTimeEQ applies the EQ predicate on the "createdTime" field.
func CreatedTimeEQ(v time.Time) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldEQ(FieldCreatedTime, v))
}

// CreatedTimeNEQ applies the NEQ predicate on the "createdTime" field.
func CreatedTimeNEQ(v time.Time) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldNEQ(FieldCreatedTime, v))
}

// CreatedTimeIn applies the In predicate on the "createdTime" field.
func CreatedTimeIn(vs ...time.Time) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldIn(FieldCreatedTime, vs...))
}

// CreatedTimeNotIn applies the NotIn predicate on the "createdTime" field.
func CreatedTimeNotIn(vs ...time.Time) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldNotIn(FieldCreatedTime, vs...))
}

// CreatedTimeGT applies the GT predicate on the "createdTime" field.
func CreatedTimeGT(v time.Time) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldGT(FieldCreatedTime, v))
}

// CreatedTimeGTE applies the GTE predicate on the "createdTime" field.
func CreatedTimeGTE(v time.Time) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldGTE(FieldCreatedTime, v))
}

// CreatedTimeLT applies the LT predicate on the "createdTime" field.
func CreatedTimeLT(v time.Time) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldLT(FieldCreatedTime, v))
}

// CreatedTimeLTE applies the LTE predicate on the "createdTime" field.
func CreatedTimeLTE(v time.Time) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldLTE(FieldCreatedTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.S3Bucket) predicate.S3Bucket {
	return predicate.S3Bucket(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.S3Bucket) predicate.S3Bucket {
	return predicate.S3Bucket(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.S3Bucket) predicate.S3Bucket {
	return predicate.S3Bucket(func(s *sql.Selector) {
		p(s.Not())
	})
}
