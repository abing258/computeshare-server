// Code generated by ent, DO NOT EDIT.

package s3bucket

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldLTE(FieldID, id))
}

// Bucket applies equality check predicate on the "bucket" field. It's identical to BucketEQ.
func Bucket(v string) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldEQ(FieldBucket, v))
}

// CreatedTime applies equality check predicate on the "createdTime" field. It's identical to CreatedTimeEQ.
func CreatedTime(v time.Time) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldEQ(FieldCreatedTime, v))
}

// BucketEQ applies the EQ predicate on the "bucket" field.
func BucketEQ(v string) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldEQ(FieldBucket, v))
}

// BucketNEQ applies the NEQ predicate on the "bucket" field.
func BucketNEQ(v string) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldNEQ(FieldBucket, v))
}

// BucketIn applies the In predicate on the "bucket" field.
func BucketIn(vs ...string) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldIn(FieldBucket, vs...))
}

// BucketNotIn applies the NotIn predicate on the "bucket" field.
func BucketNotIn(vs ...string) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldNotIn(FieldBucket, vs...))
}

// BucketGT applies the GT predicate on the "bucket" field.
func BucketGT(v string) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldGT(FieldBucket, v))
}

// BucketGTE applies the GTE predicate on the "bucket" field.
func BucketGTE(v string) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldGTE(FieldBucket, v))
}

// BucketLT applies the LT predicate on the "bucket" field.
func BucketLT(v string) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldLT(FieldBucket, v))
}

// BucketLTE applies the LTE predicate on the "bucket" field.
func BucketLTE(v string) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldLTE(FieldBucket, v))
}

// BucketContains applies the Contains predicate on the "bucket" field.
func BucketContains(v string) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldContains(FieldBucket, v))
}

// BucketHasPrefix applies the HasPrefix predicate on the "bucket" field.
func BucketHasPrefix(v string) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldHasPrefix(FieldBucket, v))
}

// BucketHasSuffix applies the HasSuffix predicate on the "bucket" field.
func BucketHasSuffix(v string) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldHasSuffix(FieldBucket, v))
}

// BucketEqualFold applies the EqualFold predicate on the "bucket" field.
func BucketEqualFold(v string) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldEqualFold(FieldBucket, v))
}

// BucketContainsFold applies the ContainsFold predicate on the "bucket" field.
func BucketContainsFold(v string) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldContainsFold(FieldBucket, v))
}

// CreatedTimeEQ applies the EQ predicate on the "createdTime" field.
func CreatedTimeEQ(v time.Time) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldEQ(FieldCreatedTime, v))
}

// CreatedTimeNEQ applies the NEQ predicate on the "createdTime" field.
func CreatedTimeNEQ(v time.Time) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldNEQ(FieldCreatedTime, v))
}

// CreatedTimeIn applies the In predicate on the "createdTime" field.
func CreatedTimeIn(vs ...time.Time) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldIn(FieldCreatedTime, vs...))
}

// CreatedTimeNotIn applies the NotIn predicate on the "createdTime" field.
func CreatedTimeNotIn(vs ...time.Time) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldNotIn(FieldCreatedTime, vs...))
}

// CreatedTimeGT applies the GT predicate on the "createdTime" field.
func CreatedTimeGT(v time.Time) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldGT(FieldCreatedTime, v))
}

// CreatedTimeGTE applies the GTE predicate on the "createdTime" field.
func CreatedTimeGTE(v time.Time) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldGTE(FieldCreatedTime, v))
}

// CreatedTimeLT applies the LT predicate on the "createdTime" field.
func CreatedTimeLT(v time.Time) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldLT(FieldCreatedTime, v))
}

// CreatedTimeLTE applies the LTE predicate on the "createdTime" field.
func CreatedTimeLTE(v time.Time) predicate.S3Bucket {
	return predicate.S3Bucket(sql.FieldLTE(FieldCreatedTime, v))
}

// HasS3User applies the HasEdge predicate on the "s3_user" edge.
func HasS3User() predicate.S3Bucket {
	return predicate.S3Bucket(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, S3UserTable, S3UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasS3UserWith applies the HasEdge predicate on the "s3_user" edge with a given conditions (other predicates).
func HasS3UserWith(preds ...predicate.S3User) predicate.S3Bucket {
	return predicate.S3Bucket(func(s *sql.Selector) {
		step := newS3UserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.S3Bucket) predicate.S3Bucket {
	return predicate.S3Bucket(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.S3Bucket) predicate.S3Bucket {
	return predicate.S3Bucket(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.S3Bucket) predicate.S3Bucket {
	return predicate.S3Bucket(func(s *sql.Selector) {
		p(s.Not())
	})
}
