// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/predicate"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/s3bucket"
)

// S3BucketUpdate is the builder for updating S3Bucket entities.
type S3BucketUpdate struct {
	config
	hooks    []Hook
	mutation *S3BucketMutation
}

// Where appends a list predicates to the S3BucketUpdate builder.
func (su *S3BucketUpdate) Where(ps ...predicate.S3Bucket) *S3BucketUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetFkUserID sets the "fk_user_id" field.
func (su *S3BucketUpdate) SetFkUserID(u uuid.UUID) *S3BucketUpdate {
	su.mutation.SetFkUserID(u)
	return su
}

// SetBucketName sets the "bucket_name" field.
func (su *S3BucketUpdate) SetBucketName(s string) *S3BucketUpdate {
	su.mutation.SetBucketName(s)
	return su
}

// SetCreatedTime sets the "createdTime" field.
func (su *S3BucketUpdate) SetCreatedTime(t time.Time) *S3BucketUpdate {
	su.mutation.SetCreatedTime(t)
	return su
}

// Mutation returns the S3BucketMutation object of the builder.
func (su *S3BucketUpdate) Mutation() *S3BucketMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *S3BucketUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *S3BucketUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *S3BucketUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *S3BucketUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *S3BucketUpdate) check() error {
	if v, ok := su.mutation.BucketName(); ok {
		if err := s3bucket.BucketNameValidator(v); err != nil {
			return &ValidationError{Name: "bucket_name", err: fmt.Errorf(`ent: validator failed for field "S3Bucket.bucket_name": %w`, err)}
		}
	}
	return nil
}

func (su *S3BucketUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(s3bucket.Table, s3bucket.Columns, sqlgraph.NewFieldSpec(s3bucket.FieldID, field.TypeUUID))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.FkUserID(); ok {
		_spec.SetField(s3bucket.FieldFkUserID, field.TypeUUID, value)
	}
	if value, ok := su.mutation.BucketName(); ok {
		_spec.SetField(s3bucket.FieldBucketName, field.TypeString, value)
	}
	if value, ok := su.mutation.CreatedTime(); ok {
		_spec.SetField(s3bucket.FieldCreatedTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{s3bucket.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// S3BucketUpdateOne is the builder for updating a single S3Bucket entity.
type S3BucketUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *S3BucketMutation
}

// SetFkUserID sets the "fk_user_id" field.
func (suo *S3BucketUpdateOne) SetFkUserID(u uuid.UUID) *S3BucketUpdateOne {
	suo.mutation.SetFkUserID(u)
	return suo
}

// SetBucketName sets the "bucket_name" field.
func (suo *S3BucketUpdateOne) SetBucketName(s string) *S3BucketUpdateOne {
	suo.mutation.SetBucketName(s)
	return suo
}

// SetCreatedTime sets the "createdTime" field.
func (suo *S3BucketUpdateOne) SetCreatedTime(t time.Time) *S3BucketUpdateOne {
	suo.mutation.SetCreatedTime(t)
	return suo
}

// Mutation returns the S3BucketMutation object of the builder.
func (suo *S3BucketUpdateOne) Mutation() *S3BucketMutation {
	return suo.mutation
}

// Where appends a list predicates to the S3BucketUpdate builder.
func (suo *S3BucketUpdateOne) Where(ps ...predicate.S3Bucket) *S3BucketUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *S3BucketUpdateOne) Select(field string, fields ...string) *S3BucketUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated S3Bucket entity.
func (suo *S3BucketUpdateOne) Save(ctx context.Context) (*S3Bucket, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *S3BucketUpdateOne) SaveX(ctx context.Context) *S3Bucket {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *S3BucketUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *S3BucketUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *S3BucketUpdateOne) check() error {
	if v, ok := suo.mutation.BucketName(); ok {
		if err := s3bucket.BucketNameValidator(v); err != nil {
			return &ValidationError{Name: "bucket_name", err: fmt.Errorf(`ent: validator failed for field "S3Bucket.bucket_name": %w`, err)}
		}
	}
	return nil
}

func (suo *S3BucketUpdateOne) sqlSave(ctx context.Context) (_node *S3Bucket, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(s3bucket.Table, s3bucket.Columns, sqlgraph.NewFieldSpec(s3bucket.FieldID, field.TypeUUID))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "S3Bucket.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, s3bucket.FieldID)
		for _, f := range fields {
			if !s3bucket.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != s3bucket.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.FkUserID(); ok {
		_spec.SetField(s3bucket.FieldFkUserID, field.TypeUUID, value)
	}
	if value, ok := suo.mutation.BucketName(); ok {
		_spec.SetField(s3bucket.FieldBucketName, field.TypeString, value)
	}
	if value, ok := suo.mutation.CreatedTime(); ok {
		_spec.SetField(s3bucket.FieldCreatedTime, field.TypeTime, value)
	}
	_node = &S3Bucket{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{s3bucket.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
