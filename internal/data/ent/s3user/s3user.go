// Code generated by ent, DO NOT EDIT.

package s3user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the s3user type in the database.
	Label = "s3user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFkUserID holds the string denoting the fk_user_id field in the database.
	FieldFkUserID = "fk_user_id"
	// FieldAccessKey holds the string denoting the access_key field in the database.
	FieldAccessKey = "access_key"
	// FieldSecretKey holds the string denoting the secret_key field in the database.
	FieldSecretKey = "secret_key"
	// EdgeBuckets holds the string denoting the buckets edge name in mutations.
	EdgeBuckets = "buckets"
	// Table holds the table name of the s3user in the database.
	Table = "s3users"
	// BucketsTable is the table that holds the buckets relation/edge.
	BucketsTable = "s3buckets"
	// BucketsInverseTable is the table name for the S3Bucket entity.
	// It exists in this package in order to avoid circular dependency with the "s3bucket" package.
	BucketsInverseTable = "s3buckets"
	// BucketsColumn is the table column denoting the buckets relation/edge.
	BucketsColumn = "s3bucket_s3_user"
)

// Columns holds all SQL columns for s3user fields.
var Columns = []string{
	FieldID,
	FieldFkUserID,
	FieldAccessKey,
	FieldSecretKey,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// AccessKeyValidator is a validator for the "access_key" field. It is called by the builders before save.
	AccessKeyValidator func(string) error
	// SecretKeyValidator is a validator for the "secret_key" field. It is called by the builders before save.
	SecretKeyValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the S3User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFkUserID orders the results by the fk_user_id field.
func ByFkUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFkUserID, opts...).ToFunc()
}

// ByAccessKey orders the results by the access_key field.
func ByAccessKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccessKey, opts...).ToFunc()
}

// BySecretKey orders the results by the secret_key field.
func BySecretKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSecretKey, opts...).ToFunc()
}

// ByBucketsCount orders the results by buckets count.
func ByBucketsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBucketsStep(), opts...)
	}
}

// ByBuckets orders the results by buckets terms.
func ByBuckets(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBucketsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newBucketsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BucketsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, BucketsTable, BucketsColumn),
	)
}
