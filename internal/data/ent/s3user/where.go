// Code generated by ent, DO NOT EDIT.

package s3user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.S3User {
	return predicate.S3User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.S3User {
	return predicate.S3User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.S3User {
	return predicate.S3User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.S3User {
	return predicate.S3User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.S3User {
	return predicate.S3User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.S3User {
	return predicate.S3User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.S3User {
	return predicate.S3User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.S3User {
	return predicate.S3User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.S3User {
	return predicate.S3User(sql.FieldLTE(FieldID, id))
}

// FkUserID applies equality check predicate on the "fk_user_id" field. It's identical to FkUserIDEQ.
func FkUserID(v uuid.UUID) predicate.S3User {
	return predicate.S3User(sql.FieldEQ(FieldFkUserID, v))
}

// AccessKey applies equality check predicate on the "access_key" field. It's identical to AccessKeyEQ.
func AccessKey(v string) predicate.S3User {
	return predicate.S3User(sql.FieldEQ(FieldAccessKey, v))
}

// SecretKey applies equality check predicate on the "secret_key" field. It's identical to SecretKeyEQ.
func SecretKey(v string) predicate.S3User {
	return predicate.S3User(sql.FieldEQ(FieldSecretKey, v))
}

// FkUserIDEQ applies the EQ predicate on the "fk_user_id" field.
func FkUserIDEQ(v uuid.UUID) predicate.S3User {
	return predicate.S3User(sql.FieldEQ(FieldFkUserID, v))
}

// FkUserIDNEQ applies the NEQ predicate on the "fk_user_id" field.
func FkUserIDNEQ(v uuid.UUID) predicate.S3User {
	return predicate.S3User(sql.FieldNEQ(FieldFkUserID, v))
}

// FkUserIDIn applies the In predicate on the "fk_user_id" field.
func FkUserIDIn(vs ...uuid.UUID) predicate.S3User {
	return predicate.S3User(sql.FieldIn(FieldFkUserID, vs...))
}

// FkUserIDNotIn applies the NotIn predicate on the "fk_user_id" field.
func FkUserIDNotIn(vs ...uuid.UUID) predicate.S3User {
	return predicate.S3User(sql.FieldNotIn(FieldFkUserID, vs...))
}

// FkUserIDGT applies the GT predicate on the "fk_user_id" field.
func FkUserIDGT(v uuid.UUID) predicate.S3User {
	return predicate.S3User(sql.FieldGT(FieldFkUserID, v))
}

// FkUserIDGTE applies the GTE predicate on the "fk_user_id" field.
func FkUserIDGTE(v uuid.UUID) predicate.S3User {
	return predicate.S3User(sql.FieldGTE(FieldFkUserID, v))
}

// FkUserIDLT applies the LT predicate on the "fk_user_id" field.
func FkUserIDLT(v uuid.UUID) predicate.S3User {
	return predicate.S3User(sql.FieldLT(FieldFkUserID, v))
}

// FkUserIDLTE applies the LTE predicate on the "fk_user_id" field.
func FkUserIDLTE(v uuid.UUID) predicate.S3User {
	return predicate.S3User(sql.FieldLTE(FieldFkUserID, v))
}

// AccessKeyEQ applies the EQ predicate on the "access_key" field.
func AccessKeyEQ(v string) predicate.S3User {
	return predicate.S3User(sql.FieldEQ(FieldAccessKey, v))
}

// AccessKeyNEQ applies the NEQ predicate on the "access_key" field.
func AccessKeyNEQ(v string) predicate.S3User {
	return predicate.S3User(sql.FieldNEQ(FieldAccessKey, v))
}

// AccessKeyIn applies the In predicate on the "access_key" field.
func AccessKeyIn(vs ...string) predicate.S3User {
	return predicate.S3User(sql.FieldIn(FieldAccessKey, vs...))
}

// AccessKeyNotIn applies the NotIn predicate on the "access_key" field.
func AccessKeyNotIn(vs ...string) predicate.S3User {
	return predicate.S3User(sql.FieldNotIn(FieldAccessKey, vs...))
}

// AccessKeyGT applies the GT predicate on the "access_key" field.
func AccessKeyGT(v string) predicate.S3User {
	return predicate.S3User(sql.FieldGT(FieldAccessKey, v))
}

// AccessKeyGTE applies the GTE predicate on the "access_key" field.
func AccessKeyGTE(v string) predicate.S3User {
	return predicate.S3User(sql.FieldGTE(FieldAccessKey, v))
}

// AccessKeyLT applies the LT predicate on the "access_key" field.
func AccessKeyLT(v string) predicate.S3User {
	return predicate.S3User(sql.FieldLT(FieldAccessKey, v))
}

// AccessKeyLTE applies the LTE predicate on the "access_key" field.
func AccessKeyLTE(v string) predicate.S3User {
	return predicate.S3User(sql.FieldLTE(FieldAccessKey, v))
}

// AccessKeyContains applies the Contains predicate on the "access_key" field.
func AccessKeyContains(v string) predicate.S3User {
	return predicate.S3User(sql.FieldContains(FieldAccessKey, v))
}

// AccessKeyHasPrefix applies the HasPrefix predicate on the "access_key" field.
func AccessKeyHasPrefix(v string) predicate.S3User {
	return predicate.S3User(sql.FieldHasPrefix(FieldAccessKey, v))
}

// AccessKeyHasSuffix applies the HasSuffix predicate on the "access_key" field.
func AccessKeyHasSuffix(v string) predicate.S3User {
	return predicate.S3User(sql.FieldHasSuffix(FieldAccessKey, v))
}

// AccessKeyEqualFold applies the EqualFold predicate on the "access_key" field.
func AccessKeyEqualFold(v string) predicate.S3User {
	return predicate.S3User(sql.FieldEqualFold(FieldAccessKey, v))
}

// AccessKeyContainsFold applies the ContainsFold predicate on the "access_key" field.
func AccessKeyContainsFold(v string) predicate.S3User {
	return predicate.S3User(sql.FieldContainsFold(FieldAccessKey, v))
}

// SecretKeyEQ applies the EQ predicate on the "secret_key" field.
func SecretKeyEQ(v string) predicate.S3User {
	return predicate.S3User(sql.FieldEQ(FieldSecretKey, v))
}

// SecretKeyNEQ applies the NEQ predicate on the "secret_key" field.
func SecretKeyNEQ(v string) predicate.S3User {
	return predicate.S3User(sql.FieldNEQ(FieldSecretKey, v))
}

// SecretKeyIn applies the In predicate on the "secret_key" field.
func SecretKeyIn(vs ...string) predicate.S3User {
	return predicate.S3User(sql.FieldIn(FieldSecretKey, vs...))
}

// SecretKeyNotIn applies the NotIn predicate on the "secret_key" field.
func SecretKeyNotIn(vs ...string) predicate.S3User {
	return predicate.S3User(sql.FieldNotIn(FieldSecretKey, vs...))
}

// SecretKeyGT applies the GT predicate on the "secret_key" field.
func SecretKeyGT(v string) predicate.S3User {
	return predicate.S3User(sql.FieldGT(FieldSecretKey, v))
}

// SecretKeyGTE applies the GTE predicate on the "secret_key" field.
func SecretKeyGTE(v string) predicate.S3User {
	return predicate.S3User(sql.FieldGTE(FieldSecretKey, v))
}

// SecretKeyLT applies the LT predicate on the "secret_key" field.
func SecretKeyLT(v string) predicate.S3User {
	return predicate.S3User(sql.FieldLT(FieldSecretKey, v))
}

// SecretKeyLTE applies the LTE predicate on the "secret_key" field.
func SecretKeyLTE(v string) predicate.S3User {
	return predicate.S3User(sql.FieldLTE(FieldSecretKey, v))
}

// SecretKeyContains applies the Contains predicate on the "secret_key" field.
func SecretKeyContains(v string) predicate.S3User {
	return predicate.S3User(sql.FieldContains(FieldSecretKey, v))
}

// SecretKeyHasPrefix applies the HasPrefix predicate on the "secret_key" field.
func SecretKeyHasPrefix(v string) predicate.S3User {
	return predicate.S3User(sql.FieldHasPrefix(FieldSecretKey, v))
}

// SecretKeyHasSuffix applies the HasSuffix predicate on the "secret_key" field.
func SecretKeyHasSuffix(v string) predicate.S3User {
	return predicate.S3User(sql.FieldHasSuffix(FieldSecretKey, v))
}

// SecretKeyEqualFold applies the EqualFold predicate on the "secret_key" field.
func SecretKeyEqualFold(v string) predicate.S3User {
	return predicate.S3User(sql.FieldEqualFold(FieldSecretKey, v))
}

// SecretKeyContainsFold applies the ContainsFold predicate on the "secret_key" field.
func SecretKeyContainsFold(v string) predicate.S3User {
	return predicate.S3User(sql.FieldContainsFold(FieldSecretKey, v))
}

// HasBuckets applies the HasEdge predicate on the "buckets" edge.
func HasBuckets() predicate.S3User {
	return predicate.S3User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, BucketsTable, BucketsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBucketsWith applies the HasEdge predicate on the "buckets" edge with a given conditions (other predicates).
func HasBucketsWith(preds ...predicate.S3Bucket) predicate.S3User {
	return predicate.S3User(func(s *sql.Selector) {
		step := newBucketsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.S3User) predicate.S3User {
	return predicate.S3User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.S3User) predicate.S3User {
	return predicate.S3User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.S3User) predicate.S3User {
	return predicate.S3User(func(s *sql.Selector) {
		p(s.Not())
	})
}
