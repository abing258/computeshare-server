// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/script"
)

// Script is the model entity for the Script schema.
type Script struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// TaskNumber holds the value of the "task_number" field.
	TaskNumber int32 `json:"task_number,omitempty"`
	// ScriptName holds the value of the "script_name" field.
	ScriptName string `json:"script_name,omitempty"`
	// FileAddress holds the value of the "file_address" field.
	FileAddress string `json:"file_address,omitempty"`
	// ScriptContent holds the value of the "script_content" field.
	ScriptContent string `json:"script_content,omitempty"`
	// Latest execution status
	ExecuteState int32 `json:"execute_state,omitempty"`
	// Latest execution results
	ExecuteResult string `json:"execute_result,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScriptQuery when eager-loading is set.
	Edges        ScriptEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ScriptEdges holds the relations/edges for other nodes in the graph.
type ScriptEdges struct {
	// ScriptExecutionRecords holds the value of the scriptExecutionRecords edge.
	ScriptExecutionRecords []*ScriptExecutionRecord `json:"scriptExecutionRecords,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ScriptExecutionRecordsOrErr returns the ScriptExecutionRecords value or an error if the edge
// was not loaded in eager-loading.
func (e ScriptEdges) ScriptExecutionRecordsOrErr() ([]*ScriptExecutionRecord, error) {
	if e.loadedTypes[0] {
		return e.ScriptExecutionRecords, nil
	}
	return nil, &NotLoadedError{edge: "scriptExecutionRecords"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Script) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case script.FieldID, script.FieldTaskNumber, script.FieldExecuteState:
			values[i] = new(sql.NullInt64)
		case script.FieldUserID, script.FieldScriptName, script.FieldFileAddress, script.FieldScriptContent, script.FieldExecuteResult:
			values[i] = new(sql.NullString)
		case script.FieldCreateTime, script.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Script fields.
func (s *Script) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case script.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int32(value.Int64)
		case script.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				s.UserID = value.String
			}
		case script.FieldTaskNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field task_number", values[i])
			} else if value.Valid {
				s.TaskNumber = int32(value.Int64)
			}
		case script.FieldScriptName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field script_name", values[i])
			} else if value.Valid {
				s.ScriptName = value.String
			}
		case script.FieldFileAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_address", values[i])
			} else if value.Valid {
				s.FileAddress = value.String
			}
		case script.FieldScriptContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field script_content", values[i])
			} else if value.Valid {
				s.ScriptContent = value.String
			}
		case script.FieldExecuteState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field execute_state", values[i])
			} else if value.Valid {
				s.ExecuteState = int32(value.Int64)
			}
		case script.FieldExecuteResult:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field execute_result", values[i])
			} else if value.Valid {
				s.ExecuteResult = value.String
			}
		case script.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				s.CreateTime = value.Time
			}
		case script.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				s.UpdateTime = value.Time
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Script.
// This includes values selected through modifiers, order, etc.
func (s *Script) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryScriptExecutionRecords queries the "scriptExecutionRecords" edge of the Script entity.
func (s *Script) QueryScriptExecutionRecords() *ScriptExecutionRecordQuery {
	return NewScriptClient(s.config).QueryScriptExecutionRecords(s)
}

// Update returns a builder for updating this Script.
// Note that you need to call Script.Unwrap() before calling this method if this Script
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Script) Update() *ScriptUpdateOne {
	return NewScriptClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Script entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Script) Unwrap() *Script {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Script is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Script) String() string {
	var builder strings.Builder
	builder.WriteString("Script(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("user_id=")
	builder.WriteString(s.UserID)
	builder.WriteString(", ")
	builder.WriteString("task_number=")
	builder.WriteString(fmt.Sprintf("%v", s.TaskNumber))
	builder.WriteString(", ")
	builder.WriteString("script_name=")
	builder.WriteString(s.ScriptName)
	builder.WriteString(", ")
	builder.WriteString("file_address=")
	builder.WriteString(s.FileAddress)
	builder.WriteString(", ")
	builder.WriteString("script_content=")
	builder.WriteString(s.ScriptContent)
	builder.WriteString(", ")
	builder.WriteString("execute_state=")
	builder.WriteString(fmt.Sprintf("%v", s.ExecuteState))
	builder.WriteString(", ")
	builder.WriteString("execute_result=")
	builder.WriteString(s.ExecuteResult)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(s.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(s.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Scripts is a parsable slice of Script.
type Scripts []*Script
