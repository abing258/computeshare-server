// Code generated by ent, DO NOT EDIT.

package script

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the script type in the database.
	Label = "script"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldTaskNumber holds the string denoting the task_number field in the database.
	FieldTaskNumber = "task_number"
	// FieldScriptName holds the string denoting the script_name field in the database.
	FieldScriptName = "script_name"
	// FieldFileAddress holds the string denoting the file_address field in the database.
	FieldFileAddress = "file_address"
	// FieldScriptContent holds the string denoting the script_content field in the database.
	FieldScriptContent = "script_content"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// EdgeScriptExecutionRecords holds the string denoting the scriptexecutionrecords edge name in mutations.
	EdgeScriptExecutionRecords = "scriptExecutionRecords"
	// Table holds the table name of the script in the database.
	Table = "scripts"
	// ScriptExecutionRecordsTable is the table that holds the scriptExecutionRecords relation/edge.
	ScriptExecutionRecordsTable = "script_execution_records"
	// ScriptExecutionRecordsInverseTable is the table name for the ScriptExecutionRecord entity.
	// It exists in this package in order to avoid circular dependency with the "scriptexecutionrecord" package.
	ScriptExecutionRecordsInverseTable = "script_execution_records"
	// ScriptExecutionRecordsColumn is the table column denoting the scriptExecutionRecords relation/edge.
	ScriptExecutionRecordsColumn = "script_script_execution_records"
)

// Columns holds all SQL columns for script fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldTaskNumber,
	FieldScriptName,
	FieldFileAddress,
	FieldScriptContent,
	FieldCreateTime,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TaskNumberValidator is a validator for the "task_number" field. It is called by the builders before save.
	TaskNumberValidator func(int32) error
	// ScriptNameValidator is a validator for the "script_name" field. It is called by the builders before save.
	ScriptNameValidator func(string) error
	// ScriptContentValidator is a validator for the "script_content" field. It is called by the builders before save.
	ScriptContentValidator func(string) error
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime time.Time
)

// OrderOption defines the ordering options for the Script queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByTaskNumber orders the results by the task_number field.
func ByTaskNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskNumber, opts...).ToFunc()
}

// ByScriptName orders the results by the script_name field.
func ByScriptName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScriptName, opts...).ToFunc()
}

// ByFileAddress orders the results by the file_address field.
func ByFileAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileAddress, opts...).ToFunc()
}

// ByScriptContent orders the results by the script_content field.
func ByScriptContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScriptContent, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByScriptExecutionRecordsCount orders the results by scriptExecutionRecords count.
func ByScriptExecutionRecordsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newScriptExecutionRecordsStep(), opts...)
	}
}

// ByScriptExecutionRecords orders the results by scriptExecutionRecords terms.
func ByScriptExecutionRecords(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newScriptExecutionRecordsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newScriptExecutionRecordsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ScriptExecutionRecordsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ScriptExecutionRecordsTable, ScriptExecutionRecordsColumn),
	)
}
