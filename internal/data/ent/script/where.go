// Code generated by ent, DO NOT EDIT.

package script

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.Script {
	return predicate.Script(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.Script {
	return predicate.Script(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.Script {
	return predicate.Script(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.Script {
	return predicate.Script(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.Script {
	return predicate.Script(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.Script {
	return predicate.Script(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.Script {
	return predicate.Script(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldUserID, v))
}

// TaskNumber applies equality check predicate on the "task_number" field. It's identical to TaskNumberEQ.
func TaskNumber(v int32) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldTaskNumber, v))
}

// ScriptName applies equality check predicate on the "script_name" field. It's identical to ScriptNameEQ.
func ScriptName(v string) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldScriptName, v))
}

// FileAddress applies equality check predicate on the "file_address" field. It's identical to FileAddressEQ.
func FileAddress(v string) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldFileAddress, v))
}

// ScriptContent applies equality check predicate on the "script_content" field. It's identical to ScriptContentEQ.
func ScriptContent(v string) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldScriptContent, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldUpdateTime, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.Script {
	return predicate.Script(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.Script {
	return predicate.Script(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.Script {
	return predicate.Script(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.Script {
	return predicate.Script(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.Script {
	return predicate.Script(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.Script {
	return predicate.Script(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.Script {
	return predicate.Script(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.Script {
	return predicate.Script(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.Script {
	return predicate.Script(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.Script {
	return predicate.Script(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.Script {
	return predicate.Script(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.Script {
	return predicate.Script(sql.FieldContainsFold(FieldUserID, v))
}

// TaskNumberEQ applies the EQ predicate on the "task_number" field.
func TaskNumberEQ(v int32) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldTaskNumber, v))
}

// TaskNumberNEQ applies the NEQ predicate on the "task_number" field.
func TaskNumberNEQ(v int32) predicate.Script {
	return predicate.Script(sql.FieldNEQ(FieldTaskNumber, v))
}

// TaskNumberIn applies the In predicate on the "task_number" field.
func TaskNumberIn(vs ...int32) predicate.Script {
	return predicate.Script(sql.FieldIn(FieldTaskNumber, vs...))
}

// TaskNumberNotIn applies the NotIn predicate on the "task_number" field.
func TaskNumberNotIn(vs ...int32) predicate.Script {
	return predicate.Script(sql.FieldNotIn(FieldTaskNumber, vs...))
}

// TaskNumberGT applies the GT predicate on the "task_number" field.
func TaskNumberGT(v int32) predicate.Script {
	return predicate.Script(sql.FieldGT(FieldTaskNumber, v))
}

// TaskNumberGTE applies the GTE predicate on the "task_number" field.
func TaskNumberGTE(v int32) predicate.Script {
	return predicate.Script(sql.FieldGTE(FieldTaskNumber, v))
}

// TaskNumberLT applies the LT predicate on the "task_number" field.
func TaskNumberLT(v int32) predicate.Script {
	return predicate.Script(sql.FieldLT(FieldTaskNumber, v))
}

// TaskNumberLTE applies the LTE predicate on the "task_number" field.
func TaskNumberLTE(v int32) predicate.Script {
	return predicate.Script(sql.FieldLTE(FieldTaskNumber, v))
}

// ScriptNameEQ applies the EQ predicate on the "script_name" field.
func ScriptNameEQ(v string) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldScriptName, v))
}

// ScriptNameNEQ applies the NEQ predicate on the "script_name" field.
func ScriptNameNEQ(v string) predicate.Script {
	return predicate.Script(sql.FieldNEQ(FieldScriptName, v))
}

// ScriptNameIn applies the In predicate on the "script_name" field.
func ScriptNameIn(vs ...string) predicate.Script {
	return predicate.Script(sql.FieldIn(FieldScriptName, vs...))
}

// ScriptNameNotIn applies the NotIn predicate on the "script_name" field.
func ScriptNameNotIn(vs ...string) predicate.Script {
	return predicate.Script(sql.FieldNotIn(FieldScriptName, vs...))
}

// ScriptNameGT applies the GT predicate on the "script_name" field.
func ScriptNameGT(v string) predicate.Script {
	return predicate.Script(sql.FieldGT(FieldScriptName, v))
}

// ScriptNameGTE applies the GTE predicate on the "script_name" field.
func ScriptNameGTE(v string) predicate.Script {
	return predicate.Script(sql.FieldGTE(FieldScriptName, v))
}

// ScriptNameLT applies the LT predicate on the "script_name" field.
func ScriptNameLT(v string) predicate.Script {
	return predicate.Script(sql.FieldLT(FieldScriptName, v))
}

// ScriptNameLTE applies the LTE predicate on the "script_name" field.
func ScriptNameLTE(v string) predicate.Script {
	return predicate.Script(sql.FieldLTE(FieldScriptName, v))
}

// ScriptNameContains applies the Contains predicate on the "script_name" field.
func ScriptNameContains(v string) predicate.Script {
	return predicate.Script(sql.FieldContains(FieldScriptName, v))
}

// ScriptNameHasPrefix applies the HasPrefix predicate on the "script_name" field.
func ScriptNameHasPrefix(v string) predicate.Script {
	return predicate.Script(sql.FieldHasPrefix(FieldScriptName, v))
}

// ScriptNameHasSuffix applies the HasSuffix predicate on the "script_name" field.
func ScriptNameHasSuffix(v string) predicate.Script {
	return predicate.Script(sql.FieldHasSuffix(FieldScriptName, v))
}

// ScriptNameEqualFold applies the EqualFold predicate on the "script_name" field.
func ScriptNameEqualFold(v string) predicate.Script {
	return predicate.Script(sql.FieldEqualFold(FieldScriptName, v))
}

// ScriptNameContainsFold applies the ContainsFold predicate on the "script_name" field.
func ScriptNameContainsFold(v string) predicate.Script {
	return predicate.Script(sql.FieldContainsFold(FieldScriptName, v))
}

// FileAddressEQ applies the EQ predicate on the "file_address" field.
func FileAddressEQ(v string) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldFileAddress, v))
}

// FileAddressNEQ applies the NEQ predicate on the "file_address" field.
func FileAddressNEQ(v string) predicate.Script {
	return predicate.Script(sql.FieldNEQ(FieldFileAddress, v))
}

// FileAddressIn applies the In predicate on the "file_address" field.
func FileAddressIn(vs ...string) predicate.Script {
	return predicate.Script(sql.FieldIn(FieldFileAddress, vs...))
}

// FileAddressNotIn applies the NotIn predicate on the "file_address" field.
func FileAddressNotIn(vs ...string) predicate.Script {
	return predicate.Script(sql.FieldNotIn(FieldFileAddress, vs...))
}

// FileAddressGT applies the GT predicate on the "file_address" field.
func FileAddressGT(v string) predicate.Script {
	return predicate.Script(sql.FieldGT(FieldFileAddress, v))
}

// FileAddressGTE applies the GTE predicate on the "file_address" field.
func FileAddressGTE(v string) predicate.Script {
	return predicate.Script(sql.FieldGTE(FieldFileAddress, v))
}

// FileAddressLT applies the LT predicate on the "file_address" field.
func FileAddressLT(v string) predicate.Script {
	return predicate.Script(sql.FieldLT(FieldFileAddress, v))
}

// FileAddressLTE applies the LTE predicate on the "file_address" field.
func FileAddressLTE(v string) predicate.Script {
	return predicate.Script(sql.FieldLTE(FieldFileAddress, v))
}

// FileAddressContains applies the Contains predicate on the "file_address" field.
func FileAddressContains(v string) predicate.Script {
	return predicate.Script(sql.FieldContains(FieldFileAddress, v))
}

// FileAddressHasPrefix applies the HasPrefix predicate on the "file_address" field.
func FileAddressHasPrefix(v string) predicate.Script {
	return predicate.Script(sql.FieldHasPrefix(FieldFileAddress, v))
}

// FileAddressHasSuffix applies the HasSuffix predicate on the "file_address" field.
func FileAddressHasSuffix(v string) predicate.Script {
	return predicate.Script(sql.FieldHasSuffix(FieldFileAddress, v))
}

// FileAddressEqualFold applies the EqualFold predicate on the "file_address" field.
func FileAddressEqualFold(v string) predicate.Script {
	return predicate.Script(sql.FieldEqualFold(FieldFileAddress, v))
}

// FileAddressContainsFold applies the ContainsFold predicate on the "file_address" field.
func FileAddressContainsFold(v string) predicate.Script {
	return predicate.Script(sql.FieldContainsFold(FieldFileAddress, v))
}

// ScriptContentEQ applies the EQ predicate on the "script_content" field.
func ScriptContentEQ(v string) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldScriptContent, v))
}

// ScriptContentNEQ applies the NEQ predicate on the "script_content" field.
func ScriptContentNEQ(v string) predicate.Script {
	return predicate.Script(sql.FieldNEQ(FieldScriptContent, v))
}

// ScriptContentIn applies the In predicate on the "script_content" field.
func ScriptContentIn(vs ...string) predicate.Script {
	return predicate.Script(sql.FieldIn(FieldScriptContent, vs...))
}

// ScriptContentNotIn applies the NotIn predicate on the "script_content" field.
func ScriptContentNotIn(vs ...string) predicate.Script {
	return predicate.Script(sql.FieldNotIn(FieldScriptContent, vs...))
}

// ScriptContentGT applies the GT predicate on the "script_content" field.
func ScriptContentGT(v string) predicate.Script {
	return predicate.Script(sql.FieldGT(FieldScriptContent, v))
}

// ScriptContentGTE applies the GTE predicate on the "script_content" field.
func ScriptContentGTE(v string) predicate.Script {
	return predicate.Script(sql.FieldGTE(FieldScriptContent, v))
}

// ScriptContentLT applies the LT predicate on the "script_content" field.
func ScriptContentLT(v string) predicate.Script {
	return predicate.Script(sql.FieldLT(FieldScriptContent, v))
}

// ScriptContentLTE applies the LTE predicate on the "script_content" field.
func ScriptContentLTE(v string) predicate.Script {
	return predicate.Script(sql.FieldLTE(FieldScriptContent, v))
}

// ScriptContentContains applies the Contains predicate on the "script_content" field.
func ScriptContentContains(v string) predicate.Script {
	return predicate.Script(sql.FieldContains(FieldScriptContent, v))
}

// ScriptContentHasPrefix applies the HasPrefix predicate on the "script_content" field.
func ScriptContentHasPrefix(v string) predicate.Script {
	return predicate.Script(sql.FieldHasPrefix(FieldScriptContent, v))
}

// ScriptContentHasSuffix applies the HasSuffix predicate on the "script_content" field.
func ScriptContentHasSuffix(v string) predicate.Script {
	return predicate.Script(sql.FieldHasSuffix(FieldScriptContent, v))
}

// ScriptContentEqualFold applies the EqualFold predicate on the "script_content" field.
func ScriptContentEqualFold(v string) predicate.Script {
	return predicate.Script(sql.FieldEqualFold(FieldScriptContent, v))
}

// ScriptContentContainsFold applies the ContainsFold predicate on the "script_content" field.
func ScriptContentContainsFold(v string) predicate.Script {
	return predicate.Script(sql.FieldContainsFold(FieldScriptContent, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Script {
	return predicate.Script(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Script {
	return predicate.Script(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Script {
	return predicate.Script(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Script {
	return predicate.Script(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldLTE(FieldUpdateTime, v))
}

// HasScriptExecutionRecords applies the HasEdge predicate on the "scriptExecutionRecords" edge.
func HasScriptExecutionRecords() predicate.Script {
	return predicate.Script(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ScriptExecutionRecordsTable, ScriptExecutionRecordsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScriptExecutionRecordsWith applies the HasEdge predicate on the "scriptExecutionRecords" edge with a given conditions (other predicates).
func HasScriptExecutionRecordsWith(preds ...predicate.ScriptExecutionRecord) predicate.Script {
	return predicate.Script(func(s *sql.Selector) {
		step := newScriptExecutionRecordsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Script) predicate.Script {
	return predicate.Script(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Script) predicate.Script {
	return predicate.Script(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Script) predicate.Script {
	return predicate.Script(func(s *sql.Selector) {
		p(s.Not())
	})
}
