// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/script"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/scriptexecutionrecord"
)

// ScriptCreate is the builder for creating a Script entity.
type ScriptCreate struct {
	config
	mutation *ScriptMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (sc *ScriptCreate) SetUserID(s string) *ScriptCreate {
	sc.mutation.SetUserID(s)
	return sc
}

// SetTaskNumber sets the "task_number" field.
func (sc *ScriptCreate) SetTaskNumber(i int32) *ScriptCreate {
	sc.mutation.SetTaskNumber(i)
	return sc
}

// SetScriptName sets the "script_name" field.
func (sc *ScriptCreate) SetScriptName(s string) *ScriptCreate {
	sc.mutation.SetScriptName(s)
	return sc
}

// SetFileAddress sets the "file_address" field.
func (sc *ScriptCreate) SetFileAddress(s string) *ScriptCreate {
	sc.mutation.SetFileAddress(s)
	return sc
}

// SetScriptContent sets the "script_content" field.
func (sc *ScriptCreate) SetScriptContent(s string) *ScriptCreate {
	sc.mutation.SetScriptContent(s)
	return sc
}

// SetCreateTime sets the "create_time" field.
func (sc *ScriptCreate) SetCreateTime(t time.Time) *ScriptCreate {
	sc.mutation.SetCreateTime(t)
	return sc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (sc *ScriptCreate) SetNillableCreateTime(t *time.Time) *ScriptCreate {
	if t != nil {
		sc.SetCreateTime(*t)
	}
	return sc
}

// SetUpdateTime sets the "update_time" field.
func (sc *ScriptCreate) SetUpdateTime(t time.Time) *ScriptCreate {
	sc.mutation.SetUpdateTime(t)
	return sc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (sc *ScriptCreate) SetNillableUpdateTime(t *time.Time) *ScriptCreate {
	if t != nil {
		sc.SetUpdateTime(*t)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *ScriptCreate) SetID(i int32) *ScriptCreate {
	sc.mutation.SetID(i)
	return sc
}

// AddScriptExecutionRecordIDs adds the "scriptExecutionRecords" edge to the ScriptExecutionRecord entity by IDs.
func (sc *ScriptCreate) AddScriptExecutionRecordIDs(ids ...int32) *ScriptCreate {
	sc.mutation.AddScriptExecutionRecordIDs(ids...)
	return sc
}

// AddScriptExecutionRecords adds the "scriptExecutionRecords" edges to the ScriptExecutionRecord entity.
func (sc *ScriptCreate) AddScriptExecutionRecords(s ...*ScriptExecutionRecord) *ScriptCreate {
	ids := make([]int32, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddScriptExecutionRecordIDs(ids...)
}

// Mutation returns the ScriptMutation object of the builder.
func (sc *ScriptCreate) Mutation() *ScriptMutation {
	return sc.mutation
}

// Save creates the Script in the database.
func (sc *ScriptCreate) Save(ctx context.Context) (*Script, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ScriptCreate) SaveX(ctx context.Context) *Script {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ScriptCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ScriptCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *ScriptCreate) defaults() {
	if _, ok := sc.mutation.CreateTime(); !ok {
		v := script.DefaultCreateTime
		sc.mutation.SetCreateTime(v)
	}
	if _, ok := sc.mutation.UpdateTime(); !ok {
		v := script.DefaultUpdateTime
		sc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ScriptCreate) check() error {
	if _, ok := sc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Script.user_id"`)}
	}
	if _, ok := sc.mutation.TaskNumber(); !ok {
		return &ValidationError{Name: "task_number", err: errors.New(`ent: missing required field "Script.task_number"`)}
	}
	if v, ok := sc.mutation.TaskNumber(); ok {
		if err := script.TaskNumberValidator(v); err != nil {
			return &ValidationError{Name: "task_number", err: fmt.Errorf(`ent: validator failed for field "Script.task_number": %w`, err)}
		}
	}
	if _, ok := sc.mutation.ScriptName(); !ok {
		return &ValidationError{Name: "script_name", err: errors.New(`ent: missing required field "Script.script_name"`)}
	}
	if v, ok := sc.mutation.ScriptName(); ok {
		if err := script.ScriptNameValidator(v); err != nil {
			return &ValidationError{Name: "script_name", err: fmt.Errorf(`ent: validator failed for field "Script.script_name": %w`, err)}
		}
	}
	if _, ok := sc.mutation.FileAddress(); !ok {
		return &ValidationError{Name: "file_address", err: errors.New(`ent: missing required field "Script.file_address"`)}
	}
	if _, ok := sc.mutation.ScriptContent(); !ok {
		return &ValidationError{Name: "script_content", err: errors.New(`ent: missing required field "Script.script_content"`)}
	}
	if v, ok := sc.mutation.ScriptContent(); ok {
		if err := script.ScriptContentValidator(v); err != nil {
			return &ValidationError{Name: "script_content", err: fmt.Errorf(`ent: validator failed for field "Script.script_content": %w`, err)}
		}
	}
	if _, ok := sc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Script.create_time"`)}
	}
	if _, ok := sc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Script.update_time"`)}
	}
	return nil
}

func (sc *ScriptCreate) sqlSave(ctx context.Context) (*Script, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *ScriptCreate) createSpec() (*Script, *sqlgraph.CreateSpec) {
	var (
		_node = &Script{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(script.Table, sqlgraph.NewFieldSpec(script.FieldID, field.TypeInt32))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.UserID(); ok {
		_spec.SetField(script.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := sc.mutation.TaskNumber(); ok {
		_spec.SetField(script.FieldTaskNumber, field.TypeInt32, value)
		_node.TaskNumber = value
	}
	if value, ok := sc.mutation.ScriptName(); ok {
		_spec.SetField(script.FieldScriptName, field.TypeString, value)
		_node.ScriptName = value
	}
	if value, ok := sc.mutation.FileAddress(); ok {
		_spec.SetField(script.FieldFileAddress, field.TypeString, value)
		_node.FileAddress = value
	}
	if value, ok := sc.mutation.ScriptContent(); ok {
		_spec.SetField(script.FieldScriptContent, field.TypeString, value)
		_node.ScriptContent = value
	}
	if value, ok := sc.mutation.CreateTime(); ok {
		_spec.SetField(script.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := sc.mutation.UpdateTime(); ok {
		_spec.SetField(script.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if nodes := sc.mutation.ScriptExecutionRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   script.ScriptExecutionRecordsTable,
			Columns: []string{script.ScriptExecutionRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scriptexecutionrecord.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ScriptCreateBulk is the builder for creating many Script entities in bulk.
type ScriptCreateBulk struct {
	config
	builders []*ScriptCreate
}

// Save creates the Script entities in the database.
func (scb *ScriptCreateBulk) Save(ctx context.Context) ([]*Script, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Script, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScriptMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ScriptCreateBulk) SaveX(ctx context.Context) []*Script {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ScriptCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ScriptCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
