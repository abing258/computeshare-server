// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/predicate"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/script"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/scriptexecutionrecord"
)

// ScriptUpdate is the builder for updating Script entities.
type ScriptUpdate struct {
	config
	hooks    []Hook
	mutation *ScriptMutation
}

// Where appends a list predicates to the ScriptUpdate builder.
func (su *ScriptUpdate) Where(ps ...predicate.Script) *ScriptUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUserID sets the "user_id" field.
func (su *ScriptUpdate) SetUserID(s string) *ScriptUpdate {
	su.mutation.SetUserID(s)
	return su
}

// SetTaskNumber sets the "task_number" field.
func (su *ScriptUpdate) SetTaskNumber(i int32) *ScriptUpdate {
	su.mutation.ResetTaskNumber()
	su.mutation.SetTaskNumber(i)
	return su
}

// AddTaskNumber adds i to the "task_number" field.
func (su *ScriptUpdate) AddTaskNumber(i int32) *ScriptUpdate {
	su.mutation.AddTaskNumber(i)
	return su
}

// SetScriptName sets the "script_name" field.
func (su *ScriptUpdate) SetScriptName(s string) *ScriptUpdate {
	su.mutation.SetScriptName(s)
	return su
}

// SetFileAddress sets the "file_address" field.
func (su *ScriptUpdate) SetFileAddress(s string) *ScriptUpdate {
	su.mutation.SetFileAddress(s)
	return su
}

// SetScriptContent sets the "script_content" field.
func (su *ScriptUpdate) SetScriptContent(s string) *ScriptUpdate {
	su.mutation.SetScriptContent(s)
	return su
}

// SetExecuteState sets the "execute_state" field.
func (su *ScriptUpdate) SetExecuteState(i int32) *ScriptUpdate {
	su.mutation.ResetExecuteState()
	su.mutation.SetExecuteState(i)
	return su
}

// SetNillableExecuteState sets the "execute_state" field if the given value is not nil.
func (su *ScriptUpdate) SetNillableExecuteState(i *int32) *ScriptUpdate {
	if i != nil {
		su.SetExecuteState(*i)
	}
	return su
}

// AddExecuteState adds i to the "execute_state" field.
func (su *ScriptUpdate) AddExecuteState(i int32) *ScriptUpdate {
	su.mutation.AddExecuteState(i)
	return su
}

// SetExecuteResult sets the "execute_result" field.
func (su *ScriptUpdate) SetExecuteResult(s string) *ScriptUpdate {
	su.mutation.SetExecuteResult(s)
	return su
}

// SetCreateTime sets the "create_time" field.
func (su *ScriptUpdate) SetCreateTime(t time.Time) *ScriptUpdate {
	su.mutation.SetCreateTime(t)
	return su
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (su *ScriptUpdate) SetNillableCreateTime(t *time.Time) *ScriptUpdate {
	if t != nil {
		su.SetCreateTime(*t)
	}
	return su
}

// SetUpdateTime sets the "update_time" field.
func (su *ScriptUpdate) SetUpdateTime(t time.Time) *ScriptUpdate {
	su.mutation.SetUpdateTime(t)
	return su
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (su *ScriptUpdate) SetNillableUpdateTime(t *time.Time) *ScriptUpdate {
	if t != nil {
		su.SetUpdateTime(*t)
	}
	return su
}

// AddScriptExecutionRecordIDs adds the "scriptExecutionRecords" edge to the ScriptExecutionRecord entity by IDs.
func (su *ScriptUpdate) AddScriptExecutionRecordIDs(ids ...int32) *ScriptUpdate {
	su.mutation.AddScriptExecutionRecordIDs(ids...)
	return su
}

// AddScriptExecutionRecords adds the "scriptExecutionRecords" edges to the ScriptExecutionRecord entity.
func (su *ScriptUpdate) AddScriptExecutionRecords(s ...*ScriptExecutionRecord) *ScriptUpdate {
	ids := make([]int32, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddScriptExecutionRecordIDs(ids...)
}

// Mutation returns the ScriptMutation object of the builder.
func (su *ScriptUpdate) Mutation() *ScriptMutation {
	return su.mutation
}

// ClearScriptExecutionRecords clears all "scriptExecutionRecords" edges to the ScriptExecutionRecord entity.
func (su *ScriptUpdate) ClearScriptExecutionRecords() *ScriptUpdate {
	su.mutation.ClearScriptExecutionRecords()
	return su
}

// RemoveScriptExecutionRecordIDs removes the "scriptExecutionRecords" edge to ScriptExecutionRecord entities by IDs.
func (su *ScriptUpdate) RemoveScriptExecutionRecordIDs(ids ...int32) *ScriptUpdate {
	su.mutation.RemoveScriptExecutionRecordIDs(ids...)
	return su
}

// RemoveScriptExecutionRecords removes "scriptExecutionRecords" edges to ScriptExecutionRecord entities.
func (su *ScriptUpdate) RemoveScriptExecutionRecords(s ...*ScriptExecutionRecord) *ScriptUpdate {
	ids := make([]int32, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveScriptExecutionRecordIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ScriptUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ScriptUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ScriptUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ScriptUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *ScriptUpdate) check() error {
	if v, ok := su.mutation.TaskNumber(); ok {
		if err := script.TaskNumberValidator(v); err != nil {
			return &ValidationError{Name: "task_number", err: fmt.Errorf(`ent: validator failed for field "Script.task_number": %w`, err)}
		}
	}
	if v, ok := su.mutation.ScriptName(); ok {
		if err := script.ScriptNameValidator(v); err != nil {
			return &ValidationError{Name: "script_name", err: fmt.Errorf(`ent: validator failed for field "Script.script_name": %w`, err)}
		}
	}
	if v, ok := su.mutation.ScriptContent(); ok {
		if err := script.ScriptContentValidator(v); err != nil {
			return &ValidationError{Name: "script_content", err: fmt.Errorf(`ent: validator failed for field "Script.script_content": %w`, err)}
		}
	}
	return nil
}

func (su *ScriptUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(script.Table, script.Columns, sqlgraph.NewFieldSpec(script.FieldID, field.TypeInt32))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UserID(); ok {
		_spec.SetField(script.FieldUserID, field.TypeString, value)
	}
	if value, ok := su.mutation.TaskNumber(); ok {
		_spec.SetField(script.FieldTaskNumber, field.TypeInt32, value)
	}
	if value, ok := su.mutation.AddedTaskNumber(); ok {
		_spec.AddField(script.FieldTaskNumber, field.TypeInt32, value)
	}
	if value, ok := su.mutation.ScriptName(); ok {
		_spec.SetField(script.FieldScriptName, field.TypeString, value)
	}
	if value, ok := su.mutation.FileAddress(); ok {
		_spec.SetField(script.FieldFileAddress, field.TypeString, value)
	}
	if value, ok := su.mutation.ScriptContent(); ok {
		_spec.SetField(script.FieldScriptContent, field.TypeString, value)
	}
	if value, ok := su.mutation.ExecuteState(); ok {
		_spec.SetField(script.FieldExecuteState, field.TypeInt32, value)
	}
	if value, ok := su.mutation.AddedExecuteState(); ok {
		_spec.AddField(script.FieldExecuteState, field.TypeInt32, value)
	}
	if value, ok := su.mutation.ExecuteResult(); ok {
		_spec.SetField(script.FieldExecuteResult, field.TypeString, value)
	}
	if value, ok := su.mutation.CreateTime(); ok {
		_spec.SetField(script.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := su.mutation.UpdateTime(); ok {
		_spec.SetField(script.FieldUpdateTime, field.TypeTime, value)
	}
	if su.mutation.ScriptExecutionRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   script.ScriptExecutionRecordsTable,
			Columns: []string{script.ScriptExecutionRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scriptexecutionrecord.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedScriptExecutionRecordsIDs(); len(nodes) > 0 && !su.mutation.ScriptExecutionRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   script.ScriptExecutionRecordsTable,
			Columns: []string{script.ScriptExecutionRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scriptexecutionrecord.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ScriptExecutionRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   script.ScriptExecutionRecordsTable,
			Columns: []string{script.ScriptExecutionRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scriptexecutionrecord.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{script.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ScriptUpdateOne is the builder for updating a single Script entity.
type ScriptUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScriptMutation
}

// SetUserID sets the "user_id" field.
func (suo *ScriptUpdateOne) SetUserID(s string) *ScriptUpdateOne {
	suo.mutation.SetUserID(s)
	return suo
}

// SetTaskNumber sets the "task_number" field.
func (suo *ScriptUpdateOne) SetTaskNumber(i int32) *ScriptUpdateOne {
	suo.mutation.ResetTaskNumber()
	suo.mutation.SetTaskNumber(i)
	return suo
}

// AddTaskNumber adds i to the "task_number" field.
func (suo *ScriptUpdateOne) AddTaskNumber(i int32) *ScriptUpdateOne {
	suo.mutation.AddTaskNumber(i)
	return suo
}

// SetScriptName sets the "script_name" field.
func (suo *ScriptUpdateOne) SetScriptName(s string) *ScriptUpdateOne {
	suo.mutation.SetScriptName(s)
	return suo
}

// SetFileAddress sets the "file_address" field.
func (suo *ScriptUpdateOne) SetFileAddress(s string) *ScriptUpdateOne {
	suo.mutation.SetFileAddress(s)
	return suo
}

// SetScriptContent sets the "script_content" field.
func (suo *ScriptUpdateOne) SetScriptContent(s string) *ScriptUpdateOne {
	suo.mutation.SetScriptContent(s)
	return suo
}

// SetExecuteState sets the "execute_state" field.
func (suo *ScriptUpdateOne) SetExecuteState(i int32) *ScriptUpdateOne {
	suo.mutation.ResetExecuteState()
	suo.mutation.SetExecuteState(i)
	return suo
}

// SetNillableExecuteState sets the "execute_state" field if the given value is not nil.
func (suo *ScriptUpdateOne) SetNillableExecuteState(i *int32) *ScriptUpdateOne {
	if i != nil {
		suo.SetExecuteState(*i)
	}
	return suo
}

// AddExecuteState adds i to the "execute_state" field.
func (suo *ScriptUpdateOne) AddExecuteState(i int32) *ScriptUpdateOne {
	suo.mutation.AddExecuteState(i)
	return suo
}

// SetExecuteResult sets the "execute_result" field.
func (suo *ScriptUpdateOne) SetExecuteResult(s string) *ScriptUpdateOne {
	suo.mutation.SetExecuteResult(s)
	return suo
}

// SetCreateTime sets the "create_time" field.
func (suo *ScriptUpdateOne) SetCreateTime(t time.Time) *ScriptUpdateOne {
	suo.mutation.SetCreateTime(t)
	return suo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (suo *ScriptUpdateOne) SetNillableCreateTime(t *time.Time) *ScriptUpdateOne {
	if t != nil {
		suo.SetCreateTime(*t)
	}
	return suo
}

// SetUpdateTime sets the "update_time" field.
func (suo *ScriptUpdateOne) SetUpdateTime(t time.Time) *ScriptUpdateOne {
	suo.mutation.SetUpdateTime(t)
	return suo
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (suo *ScriptUpdateOne) SetNillableUpdateTime(t *time.Time) *ScriptUpdateOne {
	if t != nil {
		suo.SetUpdateTime(*t)
	}
	return suo
}

// AddScriptExecutionRecordIDs adds the "scriptExecutionRecords" edge to the ScriptExecutionRecord entity by IDs.
func (suo *ScriptUpdateOne) AddScriptExecutionRecordIDs(ids ...int32) *ScriptUpdateOne {
	suo.mutation.AddScriptExecutionRecordIDs(ids...)
	return suo
}

// AddScriptExecutionRecords adds the "scriptExecutionRecords" edges to the ScriptExecutionRecord entity.
func (suo *ScriptUpdateOne) AddScriptExecutionRecords(s ...*ScriptExecutionRecord) *ScriptUpdateOne {
	ids := make([]int32, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddScriptExecutionRecordIDs(ids...)
}

// Mutation returns the ScriptMutation object of the builder.
func (suo *ScriptUpdateOne) Mutation() *ScriptMutation {
	return suo.mutation
}

// ClearScriptExecutionRecords clears all "scriptExecutionRecords" edges to the ScriptExecutionRecord entity.
func (suo *ScriptUpdateOne) ClearScriptExecutionRecords() *ScriptUpdateOne {
	suo.mutation.ClearScriptExecutionRecords()
	return suo
}

// RemoveScriptExecutionRecordIDs removes the "scriptExecutionRecords" edge to ScriptExecutionRecord entities by IDs.
func (suo *ScriptUpdateOne) RemoveScriptExecutionRecordIDs(ids ...int32) *ScriptUpdateOne {
	suo.mutation.RemoveScriptExecutionRecordIDs(ids...)
	return suo
}

// RemoveScriptExecutionRecords removes "scriptExecutionRecords" edges to ScriptExecutionRecord entities.
func (suo *ScriptUpdateOne) RemoveScriptExecutionRecords(s ...*ScriptExecutionRecord) *ScriptUpdateOne {
	ids := make([]int32, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveScriptExecutionRecordIDs(ids...)
}

// Where appends a list predicates to the ScriptUpdate builder.
func (suo *ScriptUpdateOne) Where(ps ...predicate.Script) *ScriptUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ScriptUpdateOne) Select(field string, fields ...string) *ScriptUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Script entity.
func (suo *ScriptUpdateOne) Save(ctx context.Context) (*Script, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ScriptUpdateOne) SaveX(ctx context.Context) *Script {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ScriptUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ScriptUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *ScriptUpdateOne) check() error {
	if v, ok := suo.mutation.TaskNumber(); ok {
		if err := script.TaskNumberValidator(v); err != nil {
			return &ValidationError{Name: "task_number", err: fmt.Errorf(`ent: validator failed for field "Script.task_number": %w`, err)}
		}
	}
	if v, ok := suo.mutation.ScriptName(); ok {
		if err := script.ScriptNameValidator(v); err != nil {
			return &ValidationError{Name: "script_name", err: fmt.Errorf(`ent: validator failed for field "Script.script_name": %w`, err)}
		}
	}
	if v, ok := suo.mutation.ScriptContent(); ok {
		if err := script.ScriptContentValidator(v); err != nil {
			return &ValidationError{Name: "script_content", err: fmt.Errorf(`ent: validator failed for field "Script.script_content": %w`, err)}
		}
	}
	return nil
}

func (suo *ScriptUpdateOne) sqlSave(ctx context.Context) (_node *Script, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(script.Table, script.Columns, sqlgraph.NewFieldSpec(script.FieldID, field.TypeInt32))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Script.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, script.FieldID)
		for _, f := range fields {
			if !script.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != script.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UserID(); ok {
		_spec.SetField(script.FieldUserID, field.TypeString, value)
	}
	if value, ok := suo.mutation.TaskNumber(); ok {
		_spec.SetField(script.FieldTaskNumber, field.TypeInt32, value)
	}
	if value, ok := suo.mutation.AddedTaskNumber(); ok {
		_spec.AddField(script.FieldTaskNumber, field.TypeInt32, value)
	}
	if value, ok := suo.mutation.ScriptName(); ok {
		_spec.SetField(script.FieldScriptName, field.TypeString, value)
	}
	if value, ok := suo.mutation.FileAddress(); ok {
		_spec.SetField(script.FieldFileAddress, field.TypeString, value)
	}
	if value, ok := suo.mutation.ScriptContent(); ok {
		_spec.SetField(script.FieldScriptContent, field.TypeString, value)
	}
	if value, ok := suo.mutation.ExecuteState(); ok {
		_spec.SetField(script.FieldExecuteState, field.TypeInt32, value)
	}
	if value, ok := suo.mutation.AddedExecuteState(); ok {
		_spec.AddField(script.FieldExecuteState, field.TypeInt32, value)
	}
	if value, ok := suo.mutation.ExecuteResult(); ok {
		_spec.SetField(script.FieldExecuteResult, field.TypeString, value)
	}
	if value, ok := suo.mutation.CreateTime(); ok {
		_spec.SetField(script.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := suo.mutation.UpdateTime(); ok {
		_spec.SetField(script.FieldUpdateTime, field.TypeTime, value)
	}
	if suo.mutation.ScriptExecutionRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   script.ScriptExecutionRecordsTable,
			Columns: []string{script.ScriptExecutionRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scriptexecutionrecord.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedScriptExecutionRecordsIDs(); len(nodes) > 0 && !suo.mutation.ScriptExecutionRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   script.ScriptExecutionRecordsTable,
			Columns: []string{script.ScriptExecutionRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scriptexecutionrecord.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ScriptExecutionRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   script.ScriptExecutionRecordsTable,
			Columns: []string{script.ScriptExecutionRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scriptexecutionrecord.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Script{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{script.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
