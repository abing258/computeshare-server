// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/script"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/scriptexecutionrecord"
)

// ScriptExecutionRecord is the model entity for the ScriptExecutionRecord schema.
type ScriptExecutionRecord struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// FkScriptID holds the value of the "fk_script_id" field.
	FkScriptID int32 `json:"fk_script_id,omitempty"`
	// ScriptContent holds the value of the "script_content" field.
	ScriptContent string `json:"script_content,omitempty"`
	// ExecuteState holds the value of the "execute_state" field.
	ExecuteState int32 `json:"execute_state,omitempty"`
	// ExecuteResult holds the value of the "execute_result" field.
	ExecuteResult string `json:"execute_result,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScriptExecutionRecordQuery when eager-loading is set.
	Edges                           ScriptExecutionRecordEdges `json:"edges"`
	script_script_execution_records *int32
	selectValues                    sql.SelectValues
}

// ScriptExecutionRecordEdges holds the relations/edges for other nodes in the graph.
type ScriptExecutionRecordEdges struct {
	// Script holds the value of the script edge.
	Script *Script `json:"script,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ScriptOrErr returns the Script value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScriptExecutionRecordEdges) ScriptOrErr() (*Script, error) {
	if e.loadedTypes[0] {
		if e.Script == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: script.Label}
		}
		return e.Script, nil
	}
	return nil, &NotLoadedError{edge: "script"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ScriptExecutionRecord) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case scriptexecutionrecord.FieldID, scriptexecutionrecord.FieldFkScriptID, scriptexecutionrecord.FieldExecuteState:
			values[i] = new(sql.NullInt64)
		case scriptexecutionrecord.FieldUserID, scriptexecutionrecord.FieldScriptContent, scriptexecutionrecord.FieldExecuteResult:
			values[i] = new(sql.NullString)
		case scriptexecutionrecord.FieldCreateTime, scriptexecutionrecord.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case scriptexecutionrecord.ForeignKeys[0]: // script_script_execution_records
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ScriptExecutionRecord fields.
func (ser *ScriptExecutionRecord) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case scriptexecutionrecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ser.ID = int32(value.Int64)
		case scriptexecutionrecord.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ser.UserID = value.String
			}
		case scriptexecutionrecord.FieldFkScriptID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field fk_script_id", values[i])
			} else if value.Valid {
				ser.FkScriptID = int32(value.Int64)
			}
		case scriptexecutionrecord.FieldScriptContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field script_content", values[i])
			} else if value.Valid {
				ser.ScriptContent = value.String
			}
		case scriptexecutionrecord.FieldExecuteState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field execute_state", values[i])
			} else if value.Valid {
				ser.ExecuteState = int32(value.Int64)
			}
		case scriptexecutionrecord.FieldExecuteResult:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field execute_result", values[i])
			} else if value.Valid {
				ser.ExecuteResult = value.String
			}
		case scriptexecutionrecord.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ser.CreateTime = value.Time
			}
		case scriptexecutionrecord.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ser.UpdateTime = value.Time
			}
		case scriptexecutionrecord.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field script_script_execution_records", value)
			} else if value.Valid {
				ser.script_script_execution_records = new(int32)
				*ser.script_script_execution_records = int32(value.Int64)
			}
		default:
			ser.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ScriptExecutionRecord.
// This includes values selected through modifiers, order, etc.
func (ser *ScriptExecutionRecord) Value(name string) (ent.Value, error) {
	return ser.selectValues.Get(name)
}

// QueryScript queries the "script" edge of the ScriptExecutionRecord entity.
func (ser *ScriptExecutionRecord) QueryScript() *ScriptQuery {
	return NewScriptExecutionRecordClient(ser.config).QueryScript(ser)
}

// Update returns a builder for updating this ScriptExecutionRecord.
// Note that you need to call ScriptExecutionRecord.Unwrap() before calling this method if this ScriptExecutionRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (ser *ScriptExecutionRecord) Update() *ScriptExecutionRecordUpdateOne {
	return NewScriptExecutionRecordClient(ser.config).UpdateOne(ser)
}

// Unwrap unwraps the ScriptExecutionRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ser *ScriptExecutionRecord) Unwrap() *ScriptExecutionRecord {
	_tx, ok := ser.config.driver.(*txDriver)
	if !ok {
		panic("ent: ScriptExecutionRecord is not a transactional entity")
	}
	ser.config.driver = _tx.drv
	return ser
}

// String implements the fmt.Stringer.
func (ser *ScriptExecutionRecord) String() string {
	var builder strings.Builder
	builder.WriteString("ScriptExecutionRecord(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ser.ID))
	builder.WriteString("user_id=")
	builder.WriteString(ser.UserID)
	builder.WriteString(", ")
	builder.WriteString("fk_script_id=")
	builder.WriteString(fmt.Sprintf("%v", ser.FkScriptID))
	builder.WriteString(", ")
	builder.WriteString("script_content=")
	builder.WriteString(ser.ScriptContent)
	builder.WriteString(", ")
	builder.WriteString("execute_state=")
	builder.WriteString(fmt.Sprintf("%v", ser.ExecuteState))
	builder.WriteString(", ")
	builder.WriteString("execute_result=")
	builder.WriteString(ser.ExecuteResult)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(ser.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(ser.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ScriptExecutionRecords is a parsable slice of ScriptExecutionRecord.
type ScriptExecutionRecords []*ScriptExecutionRecord
