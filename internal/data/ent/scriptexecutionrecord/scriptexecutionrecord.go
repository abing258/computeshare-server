// Code generated by ent, DO NOT EDIT.

package scriptexecutionrecord

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the scriptexecutionrecord type in the database.
	Label = "script_execution_record"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldFkScriptID holds the string denoting the fk_script_id field in the database.
	FieldFkScriptID = "fk_script_id"
	// FieldScriptContent holds the string denoting the script_content field in the database.
	FieldScriptContent = "script_content"
	// FieldExecuteState holds the string denoting the execute_state field in the database.
	FieldExecuteState = "execute_state"
	// FieldExecuteResult holds the string denoting the execute_result field in the database.
	FieldExecuteResult = "execute_result"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// EdgeScript holds the string denoting the script edge name in mutations.
	EdgeScript = "script"
	// Table holds the table name of the scriptexecutionrecord in the database.
	Table = "script_execution_records"
	// ScriptTable is the table that holds the script relation/edge.
	ScriptTable = "script_execution_records"
	// ScriptInverseTable is the table name for the Script entity.
	// It exists in this package in order to avoid circular dependency with the "script" package.
	ScriptInverseTable = "scripts"
	// ScriptColumn is the table column denoting the script relation/edge.
	ScriptColumn = "script_script_execution_records"
)

// Columns holds all SQL columns for scriptexecutionrecord fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldFkScriptID,
	FieldScriptContent,
	FieldExecuteState,
	FieldExecuteResult,
	FieldCreateTime,
	FieldUpdateTime,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "script_execution_records"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"script_script_execution_records",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// FkScriptIDValidator is a validator for the "fk_script_id" field. It is called by the builders before save.
	FkScriptIDValidator func(int32) error
	// ScriptContentValidator is a validator for the "script_content" field. It is called by the builders before save.
	ScriptContentValidator func(string) error
	// ExecuteResultValidator is a validator for the "execute_result" field. It is called by the builders before save.
	ExecuteResultValidator func(string) error
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime time.Time
)

// OrderOption defines the ordering options for the ScriptExecutionRecord queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByFkScriptID orders the results by the fk_script_id field.
func ByFkScriptID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFkScriptID, opts...).ToFunc()
}

// ByScriptContent orders the results by the script_content field.
func ByScriptContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScriptContent, opts...).ToFunc()
}

// ByExecuteState orders the results by the execute_state field.
func ByExecuteState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExecuteState, opts...).ToFunc()
}

// ByExecuteResult orders the results by the execute_result field.
func ByExecuteResult(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExecuteResult, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByScriptField orders the results by script field.
func ByScriptField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newScriptStep(), sql.OrderByField(field, opts...))
	}
}
func newScriptStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ScriptInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ScriptTable, ScriptColumn),
	)
}
