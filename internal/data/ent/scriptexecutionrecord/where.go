// Code generated by ent, DO NOT EDIT.

package scriptexecutionrecord

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldEQ(FieldUserID, v))
}

// FkScriptID applies equality check predicate on the "fk_script_id" field. It's identical to FkScriptIDEQ.
func FkScriptID(v int32) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldEQ(FieldFkScriptID, v))
}

// ScriptContent applies equality check predicate on the "script_content" field. It's identical to ScriptContentEQ.
func ScriptContent(v string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldEQ(FieldScriptContent, v))
}

// ExecuteState applies equality check predicate on the "execute_state" field. It's identical to ExecuteStateEQ.
func ExecuteState(v int32) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldEQ(FieldExecuteState, v))
}

// ExecuteResult applies equality check predicate on the "execute_result" field. It's identical to ExecuteResultEQ.
func ExecuteResult(v string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldEQ(FieldExecuteResult, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldEQ(FieldUpdateTime, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldContainsFold(FieldUserID, v))
}

// FkScriptIDEQ applies the EQ predicate on the "fk_script_id" field.
func FkScriptIDEQ(v int32) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldEQ(FieldFkScriptID, v))
}

// FkScriptIDNEQ applies the NEQ predicate on the "fk_script_id" field.
func FkScriptIDNEQ(v int32) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldNEQ(FieldFkScriptID, v))
}

// FkScriptIDIn applies the In predicate on the "fk_script_id" field.
func FkScriptIDIn(vs ...int32) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldIn(FieldFkScriptID, vs...))
}

// FkScriptIDNotIn applies the NotIn predicate on the "fk_script_id" field.
func FkScriptIDNotIn(vs ...int32) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldNotIn(FieldFkScriptID, vs...))
}

// FkScriptIDGT applies the GT predicate on the "fk_script_id" field.
func FkScriptIDGT(v int32) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldGT(FieldFkScriptID, v))
}

// FkScriptIDGTE applies the GTE predicate on the "fk_script_id" field.
func FkScriptIDGTE(v int32) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldGTE(FieldFkScriptID, v))
}

// FkScriptIDLT applies the LT predicate on the "fk_script_id" field.
func FkScriptIDLT(v int32) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldLT(FieldFkScriptID, v))
}

// FkScriptIDLTE applies the LTE predicate on the "fk_script_id" field.
func FkScriptIDLTE(v int32) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldLTE(FieldFkScriptID, v))
}

// ScriptContentEQ applies the EQ predicate on the "script_content" field.
func ScriptContentEQ(v string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldEQ(FieldScriptContent, v))
}

// ScriptContentNEQ applies the NEQ predicate on the "script_content" field.
func ScriptContentNEQ(v string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldNEQ(FieldScriptContent, v))
}

// ScriptContentIn applies the In predicate on the "script_content" field.
func ScriptContentIn(vs ...string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldIn(FieldScriptContent, vs...))
}

// ScriptContentNotIn applies the NotIn predicate on the "script_content" field.
func ScriptContentNotIn(vs ...string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldNotIn(FieldScriptContent, vs...))
}

// ScriptContentGT applies the GT predicate on the "script_content" field.
func ScriptContentGT(v string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldGT(FieldScriptContent, v))
}

// ScriptContentGTE applies the GTE predicate on the "script_content" field.
func ScriptContentGTE(v string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldGTE(FieldScriptContent, v))
}

// ScriptContentLT applies the LT predicate on the "script_content" field.
func ScriptContentLT(v string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldLT(FieldScriptContent, v))
}

// ScriptContentLTE applies the LTE predicate on the "script_content" field.
func ScriptContentLTE(v string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldLTE(FieldScriptContent, v))
}

// ScriptContentContains applies the Contains predicate on the "script_content" field.
func ScriptContentContains(v string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldContains(FieldScriptContent, v))
}

// ScriptContentHasPrefix applies the HasPrefix predicate on the "script_content" field.
func ScriptContentHasPrefix(v string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldHasPrefix(FieldScriptContent, v))
}

// ScriptContentHasSuffix applies the HasSuffix predicate on the "script_content" field.
func ScriptContentHasSuffix(v string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldHasSuffix(FieldScriptContent, v))
}

// ScriptContentEqualFold applies the EqualFold predicate on the "script_content" field.
func ScriptContentEqualFold(v string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldEqualFold(FieldScriptContent, v))
}

// ScriptContentContainsFold applies the ContainsFold predicate on the "script_content" field.
func ScriptContentContainsFold(v string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldContainsFold(FieldScriptContent, v))
}

// ExecuteStateEQ applies the EQ predicate on the "execute_state" field.
func ExecuteStateEQ(v int32) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldEQ(FieldExecuteState, v))
}

// ExecuteStateNEQ applies the NEQ predicate on the "execute_state" field.
func ExecuteStateNEQ(v int32) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldNEQ(FieldExecuteState, v))
}

// ExecuteStateIn applies the In predicate on the "execute_state" field.
func ExecuteStateIn(vs ...int32) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldIn(FieldExecuteState, vs...))
}

// ExecuteStateNotIn applies the NotIn predicate on the "execute_state" field.
func ExecuteStateNotIn(vs ...int32) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldNotIn(FieldExecuteState, vs...))
}

// ExecuteStateGT applies the GT predicate on the "execute_state" field.
func ExecuteStateGT(v int32) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldGT(FieldExecuteState, v))
}

// ExecuteStateGTE applies the GTE predicate on the "execute_state" field.
func ExecuteStateGTE(v int32) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldGTE(FieldExecuteState, v))
}

// ExecuteStateLT applies the LT predicate on the "execute_state" field.
func ExecuteStateLT(v int32) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldLT(FieldExecuteState, v))
}

// ExecuteStateLTE applies the LTE predicate on the "execute_state" field.
func ExecuteStateLTE(v int32) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldLTE(FieldExecuteState, v))
}

// ExecuteResultEQ applies the EQ predicate on the "execute_result" field.
func ExecuteResultEQ(v string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldEQ(FieldExecuteResult, v))
}

// ExecuteResultNEQ applies the NEQ predicate on the "execute_result" field.
func ExecuteResultNEQ(v string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldNEQ(FieldExecuteResult, v))
}

// ExecuteResultIn applies the In predicate on the "execute_result" field.
func ExecuteResultIn(vs ...string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldIn(FieldExecuteResult, vs...))
}

// ExecuteResultNotIn applies the NotIn predicate on the "execute_result" field.
func ExecuteResultNotIn(vs ...string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldNotIn(FieldExecuteResult, vs...))
}

// ExecuteResultGT applies the GT predicate on the "execute_result" field.
func ExecuteResultGT(v string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldGT(FieldExecuteResult, v))
}

// ExecuteResultGTE applies the GTE predicate on the "execute_result" field.
func ExecuteResultGTE(v string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldGTE(FieldExecuteResult, v))
}

// ExecuteResultLT applies the LT predicate on the "execute_result" field.
func ExecuteResultLT(v string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldLT(FieldExecuteResult, v))
}

// ExecuteResultLTE applies the LTE predicate on the "execute_result" field.
func ExecuteResultLTE(v string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldLTE(FieldExecuteResult, v))
}

// ExecuteResultContains applies the Contains predicate on the "execute_result" field.
func ExecuteResultContains(v string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldContains(FieldExecuteResult, v))
}

// ExecuteResultHasPrefix applies the HasPrefix predicate on the "execute_result" field.
func ExecuteResultHasPrefix(v string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldHasPrefix(FieldExecuteResult, v))
}

// ExecuteResultHasSuffix applies the HasSuffix predicate on the "execute_result" field.
func ExecuteResultHasSuffix(v string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldHasSuffix(FieldExecuteResult, v))
}

// ExecuteResultEqualFold applies the EqualFold predicate on the "execute_result" field.
func ExecuteResultEqualFold(v string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldEqualFold(FieldExecuteResult, v))
}

// ExecuteResultContainsFold applies the ContainsFold predicate on the "execute_result" field.
func ExecuteResultContainsFold(v string) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldContainsFold(FieldExecuteResult, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(sql.FieldLTE(FieldUpdateTime, v))
}

// HasScript applies the HasEdge predicate on the "script" edge.
func HasScript() predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ScriptTable, ScriptColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScriptWith applies the HasEdge predicate on the "script" edge with a given conditions (other predicates).
func HasScriptWith(preds ...predicate.Script) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(func(s *sql.Selector) {
		step := newScriptStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ScriptExecutionRecord) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ScriptExecutionRecord) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ScriptExecutionRecord) predicate.ScriptExecutionRecord {
	return predicate.ScriptExecutionRecord(func(s *sql.Selector) {
		p(s.Not())
	})
}
