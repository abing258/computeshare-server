// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/predicate"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/scriptexecutionrecord"
)

// ScriptExecutionRecordDelete is the builder for deleting a ScriptExecutionRecord entity.
type ScriptExecutionRecordDelete struct {
	config
	hooks    []Hook
	mutation *ScriptExecutionRecordMutation
}

// Where appends a list predicates to the ScriptExecutionRecordDelete builder.
func (serd *ScriptExecutionRecordDelete) Where(ps ...predicate.ScriptExecutionRecord) *ScriptExecutionRecordDelete {
	serd.mutation.Where(ps...)
	return serd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (serd *ScriptExecutionRecordDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, serd.sqlExec, serd.mutation, serd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (serd *ScriptExecutionRecordDelete) ExecX(ctx context.Context) int {
	n, err := serd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (serd *ScriptExecutionRecordDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(scriptexecutionrecord.Table, sqlgraph.NewFieldSpec(scriptexecutionrecord.FieldID, field.TypeInt32))
	if ps := serd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, serd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	serd.mutation.done = true
	return affected, err
}

// ScriptExecutionRecordDeleteOne is the builder for deleting a single ScriptExecutionRecord entity.
type ScriptExecutionRecordDeleteOne struct {
	serd *ScriptExecutionRecordDelete
}

// Where appends a list predicates to the ScriptExecutionRecordDelete builder.
func (serdo *ScriptExecutionRecordDeleteOne) Where(ps ...predicate.ScriptExecutionRecord) *ScriptExecutionRecordDeleteOne {
	serdo.serd.mutation.Where(ps...)
	return serdo
}

// Exec executes the deletion query.
func (serdo *ScriptExecutionRecordDeleteOne) Exec(ctx context.Context) error {
	n, err := serdo.serd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{scriptexecutionrecord.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (serdo *ScriptExecutionRecordDeleteOne) ExecX(ctx context.Context) {
	if err := serdo.Exec(ctx); err != nil {
		panic(err)
	}
}
