// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/predicate"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/script"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/scriptexecutionrecord"
)

// ScriptExecutionRecordUpdate is the builder for updating ScriptExecutionRecord entities.
type ScriptExecutionRecordUpdate struct {
	config
	hooks    []Hook
	mutation *ScriptExecutionRecordMutation
}

// Where appends a list predicates to the ScriptExecutionRecordUpdate builder.
func (seru *ScriptExecutionRecordUpdate) Where(ps ...predicate.ScriptExecutionRecord) *ScriptExecutionRecordUpdate {
	seru.mutation.Where(ps...)
	return seru
}

// SetUserID sets the "user_id" field.
func (seru *ScriptExecutionRecordUpdate) SetUserID(s string) *ScriptExecutionRecordUpdate {
	seru.mutation.SetUserID(s)
	return seru
}

// SetFkScriptID sets the "fk_script_id" field.
func (seru *ScriptExecutionRecordUpdate) SetFkScriptID(i int32) *ScriptExecutionRecordUpdate {
	seru.mutation.ResetFkScriptID()
	seru.mutation.SetFkScriptID(i)
	return seru
}

// AddFkScriptID adds i to the "fk_script_id" field.
func (seru *ScriptExecutionRecordUpdate) AddFkScriptID(i int32) *ScriptExecutionRecordUpdate {
	seru.mutation.AddFkScriptID(i)
	return seru
}

// SetScriptContent sets the "script_content" field.
func (seru *ScriptExecutionRecordUpdate) SetScriptContent(s string) *ScriptExecutionRecordUpdate {
	seru.mutation.SetScriptContent(s)
	return seru
}

// SetFileAddress sets the "file_address" field.
func (seru *ScriptExecutionRecordUpdate) SetFileAddress(s string) *ScriptExecutionRecordUpdate {
	seru.mutation.SetFileAddress(s)
	return seru
}

// SetExecuteState sets the "execute_state" field.
func (seru *ScriptExecutionRecordUpdate) SetExecuteState(i int32) *ScriptExecutionRecordUpdate {
	seru.mutation.ResetExecuteState()
	seru.mutation.SetExecuteState(i)
	return seru
}

// AddExecuteState adds i to the "execute_state" field.
func (seru *ScriptExecutionRecordUpdate) AddExecuteState(i int32) *ScriptExecutionRecordUpdate {
	seru.mutation.AddExecuteState(i)
	return seru
}

// SetExecuteResult sets the "execute_result" field.
func (seru *ScriptExecutionRecordUpdate) SetExecuteResult(s string) *ScriptExecutionRecordUpdate {
	seru.mutation.SetExecuteResult(s)
	return seru
}

// SetCreateTime sets the "create_time" field.
func (seru *ScriptExecutionRecordUpdate) SetCreateTime(t time.Time) *ScriptExecutionRecordUpdate {
	seru.mutation.SetCreateTime(t)
	return seru
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (seru *ScriptExecutionRecordUpdate) SetNillableCreateTime(t *time.Time) *ScriptExecutionRecordUpdate {
	if t != nil {
		seru.SetCreateTime(*t)
	}
	return seru
}

// SetUpdateTime sets the "update_time" field.
func (seru *ScriptExecutionRecordUpdate) SetUpdateTime(t time.Time) *ScriptExecutionRecordUpdate {
	seru.mutation.SetUpdateTime(t)
	return seru
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (seru *ScriptExecutionRecordUpdate) SetNillableUpdateTime(t *time.Time) *ScriptExecutionRecordUpdate {
	if t != nil {
		seru.SetUpdateTime(*t)
	}
	return seru
}

// SetScriptID sets the "script" edge to the Script entity by ID.
func (seru *ScriptExecutionRecordUpdate) SetScriptID(id int32) *ScriptExecutionRecordUpdate {
	seru.mutation.SetScriptID(id)
	return seru
}

// SetNillableScriptID sets the "script" edge to the Script entity by ID if the given value is not nil.
func (seru *ScriptExecutionRecordUpdate) SetNillableScriptID(id *int32) *ScriptExecutionRecordUpdate {
	if id != nil {
		seru = seru.SetScriptID(*id)
	}
	return seru
}

// SetScript sets the "script" edge to the Script entity.
func (seru *ScriptExecutionRecordUpdate) SetScript(s *Script) *ScriptExecutionRecordUpdate {
	return seru.SetScriptID(s.ID)
}

// Mutation returns the ScriptExecutionRecordMutation object of the builder.
func (seru *ScriptExecutionRecordUpdate) Mutation() *ScriptExecutionRecordMutation {
	return seru.mutation
}

// ClearScript clears the "script" edge to the Script entity.
func (seru *ScriptExecutionRecordUpdate) ClearScript() *ScriptExecutionRecordUpdate {
	seru.mutation.ClearScript()
	return seru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (seru *ScriptExecutionRecordUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, seru.sqlSave, seru.mutation, seru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (seru *ScriptExecutionRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := seru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (seru *ScriptExecutionRecordUpdate) Exec(ctx context.Context) error {
	_, err := seru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seru *ScriptExecutionRecordUpdate) ExecX(ctx context.Context) {
	if err := seru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (seru *ScriptExecutionRecordUpdate) check() error {
	if v, ok := seru.mutation.FkScriptID(); ok {
		if err := scriptexecutionrecord.FkScriptIDValidator(v); err != nil {
			return &ValidationError{Name: "fk_script_id", err: fmt.Errorf(`ent: validator failed for field "ScriptExecutionRecord.fk_script_id": %w`, err)}
		}
	}
	if v, ok := seru.mutation.ScriptContent(); ok {
		if err := scriptexecutionrecord.ScriptContentValidator(v); err != nil {
			return &ValidationError{Name: "script_content", err: fmt.Errorf(`ent: validator failed for field "ScriptExecutionRecord.script_content": %w`, err)}
		}
	}
	return nil
}

func (seru *ScriptExecutionRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := seru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(scriptexecutionrecord.Table, scriptexecutionrecord.Columns, sqlgraph.NewFieldSpec(scriptexecutionrecord.FieldID, field.TypeInt32))
	if ps := seru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := seru.mutation.UserID(); ok {
		_spec.SetField(scriptexecutionrecord.FieldUserID, field.TypeString, value)
	}
	if value, ok := seru.mutation.FkScriptID(); ok {
		_spec.SetField(scriptexecutionrecord.FieldFkScriptID, field.TypeInt32, value)
	}
	if value, ok := seru.mutation.AddedFkScriptID(); ok {
		_spec.AddField(scriptexecutionrecord.FieldFkScriptID, field.TypeInt32, value)
	}
	if value, ok := seru.mutation.ScriptContent(); ok {
		_spec.SetField(scriptexecutionrecord.FieldScriptContent, field.TypeString, value)
	}
	if value, ok := seru.mutation.FileAddress(); ok {
		_spec.SetField(scriptexecutionrecord.FieldFileAddress, field.TypeString, value)
	}
	if value, ok := seru.mutation.ExecuteState(); ok {
		_spec.SetField(scriptexecutionrecord.FieldExecuteState, field.TypeInt32, value)
	}
	if value, ok := seru.mutation.AddedExecuteState(); ok {
		_spec.AddField(scriptexecutionrecord.FieldExecuteState, field.TypeInt32, value)
	}
	if value, ok := seru.mutation.ExecuteResult(); ok {
		_spec.SetField(scriptexecutionrecord.FieldExecuteResult, field.TypeString, value)
	}
	if value, ok := seru.mutation.CreateTime(); ok {
		_spec.SetField(scriptexecutionrecord.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := seru.mutation.UpdateTime(); ok {
		_spec.SetField(scriptexecutionrecord.FieldUpdateTime, field.TypeTime, value)
	}
	if seru.mutation.ScriptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scriptexecutionrecord.ScriptTable,
			Columns: []string{scriptexecutionrecord.ScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(script.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seru.mutation.ScriptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scriptexecutionrecord.ScriptTable,
			Columns: []string{scriptexecutionrecord.ScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(script.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, seru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scriptexecutionrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	seru.mutation.done = true
	return n, nil
}

// ScriptExecutionRecordUpdateOne is the builder for updating a single ScriptExecutionRecord entity.
type ScriptExecutionRecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScriptExecutionRecordMutation
}

// SetUserID sets the "user_id" field.
func (seruo *ScriptExecutionRecordUpdateOne) SetUserID(s string) *ScriptExecutionRecordUpdateOne {
	seruo.mutation.SetUserID(s)
	return seruo
}

// SetFkScriptID sets the "fk_script_id" field.
func (seruo *ScriptExecutionRecordUpdateOne) SetFkScriptID(i int32) *ScriptExecutionRecordUpdateOne {
	seruo.mutation.ResetFkScriptID()
	seruo.mutation.SetFkScriptID(i)
	return seruo
}

// AddFkScriptID adds i to the "fk_script_id" field.
func (seruo *ScriptExecutionRecordUpdateOne) AddFkScriptID(i int32) *ScriptExecutionRecordUpdateOne {
	seruo.mutation.AddFkScriptID(i)
	return seruo
}

// SetScriptContent sets the "script_content" field.
func (seruo *ScriptExecutionRecordUpdateOne) SetScriptContent(s string) *ScriptExecutionRecordUpdateOne {
	seruo.mutation.SetScriptContent(s)
	return seruo
}

// SetFileAddress sets the "file_address" field.
func (seruo *ScriptExecutionRecordUpdateOne) SetFileAddress(s string) *ScriptExecutionRecordUpdateOne {
	seruo.mutation.SetFileAddress(s)
	return seruo
}

// SetExecuteState sets the "execute_state" field.
func (seruo *ScriptExecutionRecordUpdateOne) SetExecuteState(i int32) *ScriptExecutionRecordUpdateOne {
	seruo.mutation.ResetExecuteState()
	seruo.mutation.SetExecuteState(i)
	return seruo
}

// AddExecuteState adds i to the "execute_state" field.
func (seruo *ScriptExecutionRecordUpdateOne) AddExecuteState(i int32) *ScriptExecutionRecordUpdateOne {
	seruo.mutation.AddExecuteState(i)
	return seruo
}

// SetExecuteResult sets the "execute_result" field.
func (seruo *ScriptExecutionRecordUpdateOne) SetExecuteResult(s string) *ScriptExecutionRecordUpdateOne {
	seruo.mutation.SetExecuteResult(s)
	return seruo
}

// SetCreateTime sets the "create_time" field.
func (seruo *ScriptExecutionRecordUpdateOne) SetCreateTime(t time.Time) *ScriptExecutionRecordUpdateOne {
	seruo.mutation.SetCreateTime(t)
	return seruo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (seruo *ScriptExecutionRecordUpdateOne) SetNillableCreateTime(t *time.Time) *ScriptExecutionRecordUpdateOne {
	if t != nil {
		seruo.SetCreateTime(*t)
	}
	return seruo
}

// SetUpdateTime sets the "update_time" field.
func (seruo *ScriptExecutionRecordUpdateOne) SetUpdateTime(t time.Time) *ScriptExecutionRecordUpdateOne {
	seruo.mutation.SetUpdateTime(t)
	return seruo
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (seruo *ScriptExecutionRecordUpdateOne) SetNillableUpdateTime(t *time.Time) *ScriptExecutionRecordUpdateOne {
	if t != nil {
		seruo.SetUpdateTime(*t)
	}
	return seruo
}

// SetScriptID sets the "script" edge to the Script entity by ID.
func (seruo *ScriptExecutionRecordUpdateOne) SetScriptID(id int32) *ScriptExecutionRecordUpdateOne {
	seruo.mutation.SetScriptID(id)
	return seruo
}

// SetNillableScriptID sets the "script" edge to the Script entity by ID if the given value is not nil.
func (seruo *ScriptExecutionRecordUpdateOne) SetNillableScriptID(id *int32) *ScriptExecutionRecordUpdateOne {
	if id != nil {
		seruo = seruo.SetScriptID(*id)
	}
	return seruo
}

// SetScript sets the "script" edge to the Script entity.
func (seruo *ScriptExecutionRecordUpdateOne) SetScript(s *Script) *ScriptExecutionRecordUpdateOne {
	return seruo.SetScriptID(s.ID)
}

// Mutation returns the ScriptExecutionRecordMutation object of the builder.
func (seruo *ScriptExecutionRecordUpdateOne) Mutation() *ScriptExecutionRecordMutation {
	return seruo.mutation
}

// ClearScript clears the "script" edge to the Script entity.
func (seruo *ScriptExecutionRecordUpdateOne) ClearScript() *ScriptExecutionRecordUpdateOne {
	seruo.mutation.ClearScript()
	return seruo
}

// Where appends a list predicates to the ScriptExecutionRecordUpdate builder.
func (seruo *ScriptExecutionRecordUpdateOne) Where(ps ...predicate.ScriptExecutionRecord) *ScriptExecutionRecordUpdateOne {
	seruo.mutation.Where(ps...)
	return seruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (seruo *ScriptExecutionRecordUpdateOne) Select(field string, fields ...string) *ScriptExecutionRecordUpdateOne {
	seruo.fields = append([]string{field}, fields...)
	return seruo
}

// Save executes the query and returns the updated ScriptExecutionRecord entity.
func (seruo *ScriptExecutionRecordUpdateOne) Save(ctx context.Context) (*ScriptExecutionRecord, error) {
	return withHooks(ctx, seruo.sqlSave, seruo.mutation, seruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (seruo *ScriptExecutionRecordUpdateOne) SaveX(ctx context.Context) *ScriptExecutionRecord {
	node, err := seruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (seruo *ScriptExecutionRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := seruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seruo *ScriptExecutionRecordUpdateOne) ExecX(ctx context.Context) {
	if err := seruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (seruo *ScriptExecutionRecordUpdateOne) check() error {
	if v, ok := seruo.mutation.FkScriptID(); ok {
		if err := scriptexecutionrecord.FkScriptIDValidator(v); err != nil {
			return &ValidationError{Name: "fk_script_id", err: fmt.Errorf(`ent: validator failed for field "ScriptExecutionRecord.fk_script_id": %w`, err)}
		}
	}
	if v, ok := seruo.mutation.ScriptContent(); ok {
		if err := scriptexecutionrecord.ScriptContentValidator(v); err != nil {
			return &ValidationError{Name: "script_content", err: fmt.Errorf(`ent: validator failed for field "ScriptExecutionRecord.script_content": %w`, err)}
		}
	}
	return nil
}

func (seruo *ScriptExecutionRecordUpdateOne) sqlSave(ctx context.Context) (_node *ScriptExecutionRecord, err error) {
	if err := seruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(scriptexecutionrecord.Table, scriptexecutionrecord.Columns, sqlgraph.NewFieldSpec(scriptexecutionrecord.FieldID, field.TypeInt32))
	id, ok := seruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ScriptExecutionRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := seruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scriptexecutionrecord.FieldID)
		for _, f := range fields {
			if !scriptexecutionrecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != scriptexecutionrecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := seruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := seruo.mutation.UserID(); ok {
		_spec.SetField(scriptexecutionrecord.FieldUserID, field.TypeString, value)
	}
	if value, ok := seruo.mutation.FkScriptID(); ok {
		_spec.SetField(scriptexecutionrecord.FieldFkScriptID, field.TypeInt32, value)
	}
	if value, ok := seruo.mutation.AddedFkScriptID(); ok {
		_spec.AddField(scriptexecutionrecord.FieldFkScriptID, field.TypeInt32, value)
	}
	if value, ok := seruo.mutation.ScriptContent(); ok {
		_spec.SetField(scriptexecutionrecord.FieldScriptContent, field.TypeString, value)
	}
	if value, ok := seruo.mutation.FileAddress(); ok {
		_spec.SetField(scriptexecutionrecord.FieldFileAddress, field.TypeString, value)
	}
	if value, ok := seruo.mutation.ExecuteState(); ok {
		_spec.SetField(scriptexecutionrecord.FieldExecuteState, field.TypeInt32, value)
	}
	if value, ok := seruo.mutation.AddedExecuteState(); ok {
		_spec.AddField(scriptexecutionrecord.FieldExecuteState, field.TypeInt32, value)
	}
	if value, ok := seruo.mutation.ExecuteResult(); ok {
		_spec.SetField(scriptexecutionrecord.FieldExecuteResult, field.TypeString, value)
	}
	if value, ok := seruo.mutation.CreateTime(); ok {
		_spec.SetField(scriptexecutionrecord.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := seruo.mutation.UpdateTime(); ok {
		_spec.SetField(scriptexecutionrecord.FieldUpdateTime, field.TypeTime, value)
	}
	if seruo.mutation.ScriptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scriptexecutionrecord.ScriptTable,
			Columns: []string{scriptexecutionrecord.ScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(script.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seruo.mutation.ScriptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scriptexecutionrecord.ScriptTable,
			Columns: []string{scriptexecutionrecord.ScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(script.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ScriptExecutionRecord{config: seruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, seruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scriptexecutionrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	seruo.mutation.done = true
	return _node, nil
}
