// Code generated by ent, DO NOT EDIT.

package storage

import (
	"computeshare-server/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Storage {
	return predicate.Storage(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Storage {
	return predicate.Storage(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Storage {
	return predicate.Storage(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Storage {
	return predicate.Storage(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Storage {
	return predicate.Storage(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Storage {
	return predicate.Storage(sql.FieldLTE(FieldID, id))
}

// Owner applies equality check predicate on the "owner" field. It's identical to OwnerEQ.
func Owner(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldOwner, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v int32) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldType, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldName, v))
}

// Cid applies equality check predicate on the "cid" field. It's identical to CidEQ.
func Cid(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldCid, v))
}

// Size applies equality check predicate on the "size" field. It's identical to SizeEQ.
func Size(v int32) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldSize, v))
}

// LastModify applies equality check predicate on the "last_modify" field. It's identical to LastModifyEQ.
func LastModify(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldLastModify, v))
}

// ParentID applies equality check predicate on the "parent_id" field. It's identical to ParentIDEQ.
func ParentID(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldParentID, v))
}

// OwnerEQ applies the EQ predicate on the "owner" field.
func OwnerEQ(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldOwner, v))
}

// OwnerNEQ applies the NEQ predicate on the "owner" field.
func OwnerNEQ(v string) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldOwner, v))
}

// OwnerIn applies the In predicate on the "owner" field.
func OwnerIn(vs ...string) predicate.Storage {
	return predicate.Storage(sql.FieldIn(FieldOwner, vs...))
}

// OwnerNotIn applies the NotIn predicate on the "owner" field.
func OwnerNotIn(vs ...string) predicate.Storage {
	return predicate.Storage(sql.FieldNotIn(FieldOwner, vs...))
}

// OwnerGT applies the GT predicate on the "owner" field.
func OwnerGT(v string) predicate.Storage {
	return predicate.Storage(sql.FieldGT(FieldOwner, v))
}

// OwnerGTE applies the GTE predicate on the "owner" field.
func OwnerGTE(v string) predicate.Storage {
	return predicate.Storage(sql.FieldGTE(FieldOwner, v))
}

// OwnerLT applies the LT predicate on the "owner" field.
func OwnerLT(v string) predicate.Storage {
	return predicate.Storage(sql.FieldLT(FieldOwner, v))
}

// OwnerLTE applies the LTE predicate on the "owner" field.
func OwnerLTE(v string) predicate.Storage {
	return predicate.Storage(sql.FieldLTE(FieldOwner, v))
}

// OwnerContains applies the Contains predicate on the "owner" field.
func OwnerContains(v string) predicate.Storage {
	return predicate.Storage(sql.FieldContains(FieldOwner, v))
}

// OwnerHasPrefix applies the HasPrefix predicate on the "owner" field.
func OwnerHasPrefix(v string) predicate.Storage {
	return predicate.Storage(sql.FieldHasPrefix(FieldOwner, v))
}

// OwnerHasSuffix applies the HasSuffix predicate on the "owner" field.
func OwnerHasSuffix(v string) predicate.Storage {
	return predicate.Storage(sql.FieldHasSuffix(FieldOwner, v))
}

// OwnerEqualFold applies the EqualFold predicate on the "owner" field.
func OwnerEqualFold(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEqualFold(FieldOwner, v))
}

// OwnerContainsFold applies the ContainsFold predicate on the "owner" field.
func OwnerContainsFold(v string) predicate.Storage {
	return predicate.Storage(sql.FieldContainsFold(FieldOwner, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v int32) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v int32) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...int32) predicate.Storage {
	return predicate.Storage(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...int32) predicate.Storage {
	return predicate.Storage(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v int32) predicate.Storage {
	return predicate.Storage(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v int32) predicate.Storage {
	return predicate.Storage(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v int32) predicate.Storage {
	return predicate.Storage(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v int32) predicate.Storage {
	return predicate.Storage(sql.FieldLTE(FieldType, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Storage {
	return predicate.Storage(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Storage {
	return predicate.Storage(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Storage {
	return predicate.Storage(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Storage {
	return predicate.Storage(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Storage {
	return predicate.Storage(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Storage {
	return predicate.Storage(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Storage {
	return predicate.Storage(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Storage {
	return predicate.Storage(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Storage {
	return predicate.Storage(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Storage {
	return predicate.Storage(sql.FieldContainsFold(FieldName, v))
}

// CidEQ applies the EQ predicate on the "cid" field.
func CidEQ(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldCid, v))
}

// CidNEQ applies the NEQ predicate on the "cid" field.
func CidNEQ(v string) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldCid, v))
}

// CidIn applies the In predicate on the "cid" field.
func CidIn(vs ...string) predicate.Storage {
	return predicate.Storage(sql.FieldIn(FieldCid, vs...))
}

// CidNotIn applies the NotIn predicate on the "cid" field.
func CidNotIn(vs ...string) predicate.Storage {
	return predicate.Storage(sql.FieldNotIn(FieldCid, vs...))
}

// CidGT applies the GT predicate on the "cid" field.
func CidGT(v string) predicate.Storage {
	return predicate.Storage(sql.FieldGT(FieldCid, v))
}

// CidGTE applies the GTE predicate on the "cid" field.
func CidGTE(v string) predicate.Storage {
	return predicate.Storage(sql.FieldGTE(FieldCid, v))
}

// CidLT applies the LT predicate on the "cid" field.
func CidLT(v string) predicate.Storage {
	return predicate.Storage(sql.FieldLT(FieldCid, v))
}

// CidLTE applies the LTE predicate on the "cid" field.
func CidLTE(v string) predicate.Storage {
	return predicate.Storage(sql.FieldLTE(FieldCid, v))
}

// CidContains applies the Contains predicate on the "cid" field.
func CidContains(v string) predicate.Storage {
	return predicate.Storage(sql.FieldContains(FieldCid, v))
}

// CidHasPrefix applies the HasPrefix predicate on the "cid" field.
func CidHasPrefix(v string) predicate.Storage {
	return predicate.Storage(sql.FieldHasPrefix(FieldCid, v))
}

// CidHasSuffix applies the HasSuffix predicate on the "cid" field.
func CidHasSuffix(v string) predicate.Storage {
	return predicate.Storage(sql.FieldHasSuffix(FieldCid, v))
}

// CidEqualFold applies the EqualFold predicate on the "cid" field.
func CidEqualFold(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEqualFold(FieldCid, v))
}

// CidContainsFold applies the ContainsFold predicate on the "cid" field.
func CidContainsFold(v string) predicate.Storage {
	return predicate.Storage(sql.FieldContainsFold(FieldCid, v))
}

// SizeEQ applies the EQ predicate on the "size" field.
func SizeEQ(v int32) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldSize, v))
}

// SizeNEQ applies the NEQ predicate on the "size" field.
func SizeNEQ(v int32) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldSize, v))
}

// SizeIn applies the In predicate on the "size" field.
func SizeIn(vs ...int32) predicate.Storage {
	return predicate.Storage(sql.FieldIn(FieldSize, vs...))
}

// SizeNotIn applies the NotIn predicate on the "size" field.
func SizeNotIn(vs ...int32) predicate.Storage {
	return predicate.Storage(sql.FieldNotIn(FieldSize, vs...))
}

// SizeGT applies the GT predicate on the "size" field.
func SizeGT(v int32) predicate.Storage {
	return predicate.Storage(sql.FieldGT(FieldSize, v))
}

// SizeGTE applies the GTE predicate on the "size" field.
func SizeGTE(v int32) predicate.Storage {
	return predicate.Storage(sql.FieldGTE(FieldSize, v))
}

// SizeLT applies the LT predicate on the "size" field.
func SizeLT(v int32) predicate.Storage {
	return predicate.Storage(sql.FieldLT(FieldSize, v))
}

// SizeLTE applies the LTE predicate on the "size" field.
func SizeLTE(v int32) predicate.Storage {
	return predicate.Storage(sql.FieldLTE(FieldSize, v))
}

// LastModifyEQ applies the EQ predicate on the "last_modify" field.
func LastModifyEQ(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldLastModify, v))
}

// LastModifyNEQ applies the NEQ predicate on the "last_modify" field.
func LastModifyNEQ(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldLastModify, v))
}

// LastModifyIn applies the In predicate on the "last_modify" field.
func LastModifyIn(vs ...time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldIn(FieldLastModify, vs...))
}

// LastModifyNotIn applies the NotIn predicate on the "last_modify" field.
func LastModifyNotIn(vs ...time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldNotIn(FieldLastModify, vs...))
}

// LastModifyGT applies the GT predicate on the "last_modify" field.
func LastModifyGT(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldGT(FieldLastModify, v))
}

// LastModifyGTE applies the GTE predicate on the "last_modify" field.
func LastModifyGTE(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldGTE(FieldLastModify, v))
}

// LastModifyLT applies the LT predicate on the "last_modify" field.
func LastModifyLT(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldLT(FieldLastModify, v))
}

// LastModifyLTE applies the LTE predicate on the "last_modify" field.
func LastModifyLTE(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldLTE(FieldLastModify, v))
}

// ParentIDEQ applies the EQ predicate on the "parent_id" field.
func ParentIDEQ(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldParentID, v))
}

// ParentIDNEQ applies the NEQ predicate on the "parent_id" field.
func ParentIDNEQ(v string) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldParentID, v))
}

// ParentIDIn applies the In predicate on the "parent_id" field.
func ParentIDIn(vs ...string) predicate.Storage {
	return predicate.Storage(sql.FieldIn(FieldParentID, vs...))
}

// ParentIDNotIn applies the NotIn predicate on the "parent_id" field.
func ParentIDNotIn(vs ...string) predicate.Storage {
	return predicate.Storage(sql.FieldNotIn(FieldParentID, vs...))
}

// ParentIDGT applies the GT predicate on the "parent_id" field.
func ParentIDGT(v string) predicate.Storage {
	return predicate.Storage(sql.FieldGT(FieldParentID, v))
}

// ParentIDGTE applies the GTE predicate on the "parent_id" field.
func ParentIDGTE(v string) predicate.Storage {
	return predicate.Storage(sql.FieldGTE(FieldParentID, v))
}

// ParentIDLT applies the LT predicate on the "parent_id" field.
func ParentIDLT(v string) predicate.Storage {
	return predicate.Storage(sql.FieldLT(FieldParentID, v))
}

// ParentIDLTE applies the LTE predicate on the "parent_id" field.
func ParentIDLTE(v string) predicate.Storage {
	return predicate.Storage(sql.FieldLTE(FieldParentID, v))
}

// ParentIDContains applies the Contains predicate on the "parent_id" field.
func ParentIDContains(v string) predicate.Storage {
	return predicate.Storage(sql.FieldContains(FieldParentID, v))
}

// ParentIDHasPrefix applies the HasPrefix predicate on the "parent_id" field.
func ParentIDHasPrefix(v string) predicate.Storage {
	return predicate.Storage(sql.FieldHasPrefix(FieldParentID, v))
}

// ParentIDHasSuffix applies the HasSuffix predicate on the "parent_id" field.
func ParentIDHasSuffix(v string) predicate.Storage {
	return predicate.Storage(sql.FieldHasSuffix(FieldParentID, v))
}

// ParentIDEqualFold applies the EqualFold predicate on the "parent_id" field.
func ParentIDEqualFold(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEqualFold(FieldParentID, v))
}

// ParentIDContainsFold applies the ContainsFold predicate on the "parent_id" field.
func ParentIDContainsFold(v string) predicate.Storage {
	return predicate.Storage(sql.FieldContainsFold(FieldParentID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Storage) predicate.Storage {
	return predicate.Storage(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Storage) predicate.Storage {
	return predicate.Storage(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Storage) predicate.Storage {
	return predicate.Storage(func(s *sql.Selector) {
		p(s.Not())
	})
}
