// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/storageprovider"
	"github.com/mohaijiang/computeshare-server/internal/global/consts"
)

// StorageProvider is the model entity for the StorageProvider schema.
type StorageProvider struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// agent 节点ID
	AgentID uuid.UUID `json:"agent_id,omitempty"`
	// 提供状态： 0：未运行，1：启动中，2： 启动失败，3： 运行中，4： 运行失败
	Status consts.StorageProviderStatus `json:"status,omitempty"`
	// 存储节点master http地址
	MasterServer string `json:"master_server,omitempty"`
	// 存储volume的nat 映射IP
	PublicIP string `json:"public_ip,omitempty"`
	// 存储节点volume的http nat映射端口
	PublicPort int32 `json:"public_port,omitempty"`
	// 存储节点volume的grpc nat映射端口
	GrpcPort int32 `json:"grpc_port,omitempty"`
	// 创建时间
	CreatedTime  time.Time `json:"created_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StorageProvider) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case storageprovider.FieldStatus, storageprovider.FieldPublicPort, storageprovider.FieldGrpcPort:
			values[i] = new(sql.NullInt64)
		case storageprovider.FieldMasterServer, storageprovider.FieldPublicIP:
			values[i] = new(sql.NullString)
		case storageprovider.FieldCreatedTime:
			values[i] = new(sql.NullTime)
		case storageprovider.FieldID, storageprovider.FieldAgentID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StorageProvider fields.
func (sp *StorageProvider) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case storageprovider.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sp.ID = *value
			}
		case storageprovider.FieldAgentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field agent_id", values[i])
			} else if value != nil {
				sp.AgentID = *value
			}
		case storageprovider.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sp.Status = consts.StorageProviderStatus(value.Int64)
			}
		case storageprovider.FieldMasterServer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field master_server", values[i])
			} else if value.Valid {
				sp.MasterServer = value.String
			}
		case storageprovider.FieldPublicIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field public_ip", values[i])
			} else if value.Valid {
				sp.PublicIP = value.String
			}
		case storageprovider.FieldPublicPort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field public_port", values[i])
			} else if value.Valid {
				sp.PublicPort = int32(value.Int64)
			}
		case storageprovider.FieldGrpcPort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field grpc_port", values[i])
			} else if value.Valid {
				sp.GrpcPort = int32(value.Int64)
			}
		case storageprovider.FieldCreatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_time", values[i])
			} else if value.Valid {
				sp.CreatedTime = value.Time
			}
		default:
			sp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the StorageProvider.
// This includes values selected through modifiers, order, etc.
func (sp *StorageProvider) Value(name string) (ent.Value, error) {
	return sp.selectValues.Get(name)
}

// Update returns a builder for updating this StorageProvider.
// Note that you need to call StorageProvider.Unwrap() before calling this method if this StorageProvider
// was returned from a transaction, and the transaction was committed or rolled back.
func (sp *StorageProvider) Update() *StorageProviderUpdateOne {
	return NewStorageProviderClient(sp.config).UpdateOne(sp)
}

// Unwrap unwraps the StorageProvider entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sp *StorageProvider) Unwrap() *StorageProvider {
	_tx, ok := sp.config.driver.(*txDriver)
	if !ok {
		panic("ent: StorageProvider is not a transactional entity")
	}
	sp.config.driver = _tx.drv
	return sp
}

// String implements the fmt.Stringer.
func (sp *StorageProvider) String() string {
	var builder strings.Builder
	builder.WriteString("StorageProvider(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sp.ID))
	builder.WriteString("agent_id=")
	builder.WriteString(fmt.Sprintf("%v", sp.AgentID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", sp.Status))
	builder.WriteString(", ")
	builder.WriteString("master_server=")
	builder.WriteString(sp.MasterServer)
	builder.WriteString(", ")
	builder.WriteString("public_ip=")
	builder.WriteString(sp.PublicIP)
	builder.WriteString(", ")
	builder.WriteString("public_port=")
	builder.WriteString(fmt.Sprintf("%v", sp.PublicPort))
	builder.WriteString(", ")
	builder.WriteString("grpc_port=")
	builder.WriteString(fmt.Sprintf("%v", sp.GrpcPort))
	builder.WriteString(", ")
	builder.WriteString("created_time=")
	builder.WriteString(sp.CreatedTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// StorageProviders is a parsable slice of StorageProvider.
type StorageProviders []*StorageProvider
