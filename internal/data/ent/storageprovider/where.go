// Code generated by ent, DO NOT EDIT.

package storageprovider

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/predicate"
	"github.com/mohaijiang/computeshare-server/internal/global/consts"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldLTE(FieldID, id))
}

// AgentID applies equality check predicate on the "agent_id" field. It's identical to AgentIDEQ.
func AgentID(v uuid.UUID) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldEQ(FieldAgentID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v consts.StorageProviderStatus) predicate.StorageProvider {
	vc := int(v)
	return predicate.StorageProvider(sql.FieldEQ(FieldStatus, vc))
}

// MasterServer applies equality check predicate on the "master_server" field. It's identical to MasterServerEQ.
func MasterServer(v string) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldEQ(FieldMasterServer, v))
}

// PublicIP applies equality check predicate on the "public_ip" field. It's identical to PublicIPEQ.
func PublicIP(v string) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldEQ(FieldPublicIP, v))
}

// PublicPort applies equality check predicate on the "public_port" field. It's identical to PublicPortEQ.
func PublicPort(v int32) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldEQ(FieldPublicPort, v))
}

// GrpcPort applies equality check predicate on the "grpc_port" field. It's identical to GrpcPortEQ.
func GrpcPort(v int32) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldEQ(FieldGrpcPort, v))
}

// CreatedTime applies equality check predicate on the "created_time" field. It's identical to CreatedTimeEQ.
func CreatedTime(v time.Time) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldEQ(FieldCreatedTime, v))
}

// AgentIDEQ applies the EQ predicate on the "agent_id" field.
func AgentIDEQ(v uuid.UUID) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldEQ(FieldAgentID, v))
}

// AgentIDNEQ applies the NEQ predicate on the "agent_id" field.
func AgentIDNEQ(v uuid.UUID) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldNEQ(FieldAgentID, v))
}

// AgentIDIn applies the In predicate on the "agent_id" field.
func AgentIDIn(vs ...uuid.UUID) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldIn(FieldAgentID, vs...))
}

// AgentIDNotIn applies the NotIn predicate on the "agent_id" field.
func AgentIDNotIn(vs ...uuid.UUID) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldNotIn(FieldAgentID, vs...))
}

// AgentIDGT applies the GT predicate on the "agent_id" field.
func AgentIDGT(v uuid.UUID) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldGT(FieldAgentID, v))
}

// AgentIDGTE applies the GTE predicate on the "agent_id" field.
func AgentIDGTE(v uuid.UUID) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldGTE(FieldAgentID, v))
}

// AgentIDLT applies the LT predicate on the "agent_id" field.
func AgentIDLT(v uuid.UUID) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldLT(FieldAgentID, v))
}

// AgentIDLTE applies the LTE predicate on the "agent_id" field.
func AgentIDLTE(v uuid.UUID) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldLTE(FieldAgentID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v consts.StorageProviderStatus) predicate.StorageProvider {
	vc := int(v)
	return predicate.StorageProvider(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v consts.StorageProviderStatus) predicate.StorageProvider {
	vc := int(v)
	return predicate.StorageProvider(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...consts.StorageProviderStatus) predicate.StorageProvider {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.StorageProvider(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...consts.StorageProviderStatus) predicate.StorageProvider {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.StorageProvider(sql.FieldNotIn(FieldStatus, v...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v consts.StorageProviderStatus) predicate.StorageProvider {
	vc := int(v)
	return predicate.StorageProvider(sql.FieldGT(FieldStatus, vc))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v consts.StorageProviderStatus) predicate.StorageProvider {
	vc := int(v)
	return predicate.StorageProvider(sql.FieldGTE(FieldStatus, vc))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v consts.StorageProviderStatus) predicate.StorageProvider {
	vc := int(v)
	return predicate.StorageProvider(sql.FieldLT(FieldStatus, vc))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v consts.StorageProviderStatus) predicate.StorageProvider {
	vc := int(v)
	return predicate.StorageProvider(sql.FieldLTE(FieldStatus, vc))
}

// MasterServerEQ applies the EQ predicate on the "master_server" field.
func MasterServerEQ(v string) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldEQ(FieldMasterServer, v))
}

// MasterServerNEQ applies the NEQ predicate on the "master_server" field.
func MasterServerNEQ(v string) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldNEQ(FieldMasterServer, v))
}

// MasterServerIn applies the In predicate on the "master_server" field.
func MasterServerIn(vs ...string) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldIn(FieldMasterServer, vs...))
}

// MasterServerNotIn applies the NotIn predicate on the "master_server" field.
func MasterServerNotIn(vs ...string) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldNotIn(FieldMasterServer, vs...))
}

// MasterServerGT applies the GT predicate on the "master_server" field.
func MasterServerGT(v string) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldGT(FieldMasterServer, v))
}

// MasterServerGTE applies the GTE predicate on the "master_server" field.
func MasterServerGTE(v string) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldGTE(FieldMasterServer, v))
}

// MasterServerLT applies the LT predicate on the "master_server" field.
func MasterServerLT(v string) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldLT(FieldMasterServer, v))
}

// MasterServerLTE applies the LTE predicate on the "master_server" field.
func MasterServerLTE(v string) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldLTE(FieldMasterServer, v))
}

// MasterServerContains applies the Contains predicate on the "master_server" field.
func MasterServerContains(v string) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldContains(FieldMasterServer, v))
}

// MasterServerHasPrefix applies the HasPrefix predicate on the "master_server" field.
func MasterServerHasPrefix(v string) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldHasPrefix(FieldMasterServer, v))
}

// MasterServerHasSuffix applies the HasSuffix predicate on the "master_server" field.
func MasterServerHasSuffix(v string) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldHasSuffix(FieldMasterServer, v))
}

// MasterServerEqualFold applies the EqualFold predicate on the "master_server" field.
func MasterServerEqualFold(v string) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldEqualFold(FieldMasterServer, v))
}

// MasterServerContainsFold applies the ContainsFold predicate on the "master_server" field.
func MasterServerContainsFold(v string) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldContainsFold(FieldMasterServer, v))
}

// PublicIPEQ applies the EQ predicate on the "public_ip" field.
func PublicIPEQ(v string) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldEQ(FieldPublicIP, v))
}

// PublicIPNEQ applies the NEQ predicate on the "public_ip" field.
func PublicIPNEQ(v string) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldNEQ(FieldPublicIP, v))
}

// PublicIPIn applies the In predicate on the "public_ip" field.
func PublicIPIn(vs ...string) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldIn(FieldPublicIP, vs...))
}

// PublicIPNotIn applies the NotIn predicate on the "public_ip" field.
func PublicIPNotIn(vs ...string) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldNotIn(FieldPublicIP, vs...))
}

// PublicIPGT applies the GT predicate on the "public_ip" field.
func PublicIPGT(v string) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldGT(FieldPublicIP, v))
}

// PublicIPGTE applies the GTE predicate on the "public_ip" field.
func PublicIPGTE(v string) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldGTE(FieldPublicIP, v))
}

// PublicIPLT applies the LT predicate on the "public_ip" field.
func PublicIPLT(v string) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldLT(FieldPublicIP, v))
}

// PublicIPLTE applies the LTE predicate on the "public_ip" field.
func PublicIPLTE(v string) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldLTE(FieldPublicIP, v))
}

// PublicIPContains applies the Contains predicate on the "public_ip" field.
func PublicIPContains(v string) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldContains(FieldPublicIP, v))
}

// PublicIPHasPrefix applies the HasPrefix predicate on the "public_ip" field.
func PublicIPHasPrefix(v string) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldHasPrefix(FieldPublicIP, v))
}

// PublicIPHasSuffix applies the HasSuffix predicate on the "public_ip" field.
func PublicIPHasSuffix(v string) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldHasSuffix(FieldPublicIP, v))
}

// PublicIPEqualFold applies the EqualFold predicate on the "public_ip" field.
func PublicIPEqualFold(v string) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldEqualFold(FieldPublicIP, v))
}

// PublicIPContainsFold applies the ContainsFold predicate on the "public_ip" field.
func PublicIPContainsFold(v string) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldContainsFold(FieldPublicIP, v))
}

// PublicPortEQ applies the EQ predicate on the "public_port" field.
func PublicPortEQ(v int32) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldEQ(FieldPublicPort, v))
}

// PublicPortNEQ applies the NEQ predicate on the "public_port" field.
func PublicPortNEQ(v int32) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldNEQ(FieldPublicPort, v))
}

// PublicPortIn applies the In predicate on the "public_port" field.
func PublicPortIn(vs ...int32) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldIn(FieldPublicPort, vs...))
}

// PublicPortNotIn applies the NotIn predicate on the "public_port" field.
func PublicPortNotIn(vs ...int32) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldNotIn(FieldPublicPort, vs...))
}

// PublicPortGT applies the GT predicate on the "public_port" field.
func PublicPortGT(v int32) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldGT(FieldPublicPort, v))
}

// PublicPortGTE applies the GTE predicate on the "public_port" field.
func PublicPortGTE(v int32) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldGTE(FieldPublicPort, v))
}

// PublicPortLT applies the LT predicate on the "public_port" field.
func PublicPortLT(v int32) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldLT(FieldPublicPort, v))
}

// PublicPortLTE applies the LTE predicate on the "public_port" field.
func PublicPortLTE(v int32) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldLTE(FieldPublicPort, v))
}

// GrpcPortEQ applies the EQ predicate on the "grpc_port" field.
func GrpcPortEQ(v int32) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldEQ(FieldGrpcPort, v))
}

// GrpcPortNEQ applies the NEQ predicate on the "grpc_port" field.
func GrpcPortNEQ(v int32) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldNEQ(FieldGrpcPort, v))
}

// GrpcPortIn applies the In predicate on the "grpc_port" field.
func GrpcPortIn(vs ...int32) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldIn(FieldGrpcPort, vs...))
}

// GrpcPortNotIn applies the NotIn predicate on the "grpc_port" field.
func GrpcPortNotIn(vs ...int32) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldNotIn(FieldGrpcPort, vs...))
}

// GrpcPortGT applies the GT predicate on the "grpc_port" field.
func GrpcPortGT(v int32) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldGT(FieldGrpcPort, v))
}

// GrpcPortGTE applies the GTE predicate on the "grpc_port" field.
func GrpcPortGTE(v int32) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldGTE(FieldGrpcPort, v))
}

// GrpcPortLT applies the LT predicate on the "grpc_port" field.
func GrpcPortLT(v int32) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldLT(FieldGrpcPort, v))
}

// GrpcPortLTE applies the LTE predicate on the "grpc_port" field.
func GrpcPortLTE(v int32) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldLTE(FieldGrpcPort, v))
}

// CreatedTimeEQ applies the EQ predicate on the "created_time" field.
func CreatedTimeEQ(v time.Time) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldEQ(FieldCreatedTime, v))
}

// CreatedTimeNEQ applies the NEQ predicate on the "created_time" field.
func CreatedTimeNEQ(v time.Time) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldNEQ(FieldCreatedTime, v))
}

// CreatedTimeIn applies the In predicate on the "created_time" field.
func CreatedTimeIn(vs ...time.Time) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldIn(FieldCreatedTime, vs...))
}

// CreatedTimeNotIn applies the NotIn predicate on the "created_time" field.
func CreatedTimeNotIn(vs ...time.Time) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldNotIn(FieldCreatedTime, vs...))
}

// CreatedTimeGT applies the GT predicate on the "created_time" field.
func CreatedTimeGT(v time.Time) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldGT(FieldCreatedTime, v))
}

// CreatedTimeGTE applies the GTE predicate on the "created_time" field.
func CreatedTimeGTE(v time.Time) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldGTE(FieldCreatedTime, v))
}

// CreatedTimeLT applies the LT predicate on the "created_time" field.
func CreatedTimeLT(v time.Time) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldLT(FieldCreatedTime, v))
}

// CreatedTimeLTE applies the LTE predicate on the "created_time" field.
func CreatedTimeLTE(v time.Time) predicate.StorageProvider {
	return predicate.StorageProvider(sql.FieldLTE(FieldCreatedTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.StorageProvider) predicate.StorageProvider {
	return predicate.StorageProvider(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.StorageProvider) predicate.StorageProvider {
	return predicate.StorageProvider(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.StorageProvider) predicate.StorageProvider {
	return predicate.StorageProvider(func(s *sql.Selector) {
		p(s.Not())
	})
}
