// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/predicate"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/storageprovider"
	"github.com/mohaijiang/computeshare-server/internal/global/consts"
)

// StorageProviderUpdate is the builder for updating StorageProvider entities.
type StorageProviderUpdate struct {
	config
	hooks    []Hook
	mutation *StorageProviderMutation
}

// Where appends a list predicates to the StorageProviderUpdate builder.
func (spu *StorageProviderUpdate) Where(ps ...predicate.StorageProvider) *StorageProviderUpdate {
	spu.mutation.Where(ps...)
	return spu
}

// SetAgentID sets the "agent_id" field.
func (spu *StorageProviderUpdate) SetAgentID(u uuid.UUID) *StorageProviderUpdate {
	spu.mutation.SetAgentID(u)
	return spu
}

// SetStatus sets the "status" field.
func (spu *StorageProviderUpdate) SetStatus(cps consts.StorageProviderStatus) *StorageProviderUpdate {
	spu.mutation.ResetStatus()
	spu.mutation.SetStatus(cps)
	return spu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (spu *StorageProviderUpdate) SetNillableStatus(cps *consts.StorageProviderStatus) *StorageProviderUpdate {
	if cps != nil {
		spu.SetStatus(*cps)
	}
	return spu
}

// AddStatus adds cps to the "status" field.
func (spu *StorageProviderUpdate) AddStatus(cps consts.StorageProviderStatus) *StorageProviderUpdate {
	spu.mutation.AddStatus(cps)
	return spu
}

// SetMasterServer sets the "master_server" field.
func (spu *StorageProviderUpdate) SetMasterServer(s string) *StorageProviderUpdate {
	spu.mutation.SetMasterServer(s)
	return spu
}

// SetPublicIP sets the "public_ip" field.
func (spu *StorageProviderUpdate) SetPublicIP(s string) *StorageProviderUpdate {
	spu.mutation.SetPublicIP(s)
	return spu
}

// SetPublicPort sets the "public_port" field.
func (spu *StorageProviderUpdate) SetPublicPort(i int32) *StorageProviderUpdate {
	spu.mutation.ResetPublicPort()
	spu.mutation.SetPublicPort(i)
	return spu
}

// AddPublicPort adds i to the "public_port" field.
func (spu *StorageProviderUpdate) AddPublicPort(i int32) *StorageProviderUpdate {
	spu.mutation.AddPublicPort(i)
	return spu
}

// SetGrpcPort sets the "grpc_port" field.
func (spu *StorageProviderUpdate) SetGrpcPort(i int32) *StorageProviderUpdate {
	spu.mutation.ResetGrpcPort()
	spu.mutation.SetGrpcPort(i)
	return spu
}

// AddGrpcPort adds i to the "grpc_port" field.
func (spu *StorageProviderUpdate) AddGrpcPort(i int32) *StorageProviderUpdate {
	spu.mutation.AddGrpcPort(i)
	return spu
}

// SetCreatedTime sets the "created_time" field.
func (spu *StorageProviderUpdate) SetCreatedTime(t time.Time) *StorageProviderUpdate {
	spu.mutation.SetCreatedTime(t)
	return spu
}

// Mutation returns the StorageProviderMutation object of the builder.
func (spu *StorageProviderUpdate) Mutation() *StorageProviderMutation {
	return spu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (spu *StorageProviderUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, spu.sqlSave, spu.mutation, spu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spu *StorageProviderUpdate) SaveX(ctx context.Context) int {
	affected, err := spu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (spu *StorageProviderUpdate) Exec(ctx context.Context) error {
	_, err := spu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spu *StorageProviderUpdate) ExecX(ctx context.Context) {
	if err := spu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spu *StorageProviderUpdate) check() error {
	if v, ok := spu.mutation.MasterServer(); ok {
		if err := storageprovider.MasterServerValidator(v); err != nil {
			return &ValidationError{Name: "master_server", err: fmt.Errorf(`ent: validator failed for field "StorageProvider.master_server": %w`, err)}
		}
	}
	if v, ok := spu.mutation.PublicIP(); ok {
		if err := storageprovider.PublicIPValidator(v); err != nil {
			return &ValidationError{Name: "public_ip", err: fmt.Errorf(`ent: validator failed for field "StorageProvider.public_ip": %w`, err)}
		}
	}
	return nil
}

func (spu *StorageProviderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := spu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(storageprovider.Table, storageprovider.Columns, sqlgraph.NewFieldSpec(storageprovider.FieldID, field.TypeUUID))
	if ps := spu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spu.mutation.AgentID(); ok {
		_spec.SetField(storageprovider.FieldAgentID, field.TypeUUID, value)
	}
	if value, ok := spu.mutation.Status(); ok {
		_spec.SetField(storageprovider.FieldStatus, field.TypeInt, value)
	}
	if value, ok := spu.mutation.AddedStatus(); ok {
		_spec.AddField(storageprovider.FieldStatus, field.TypeInt, value)
	}
	if value, ok := spu.mutation.MasterServer(); ok {
		_spec.SetField(storageprovider.FieldMasterServer, field.TypeString, value)
	}
	if value, ok := spu.mutation.PublicIP(); ok {
		_spec.SetField(storageprovider.FieldPublicIP, field.TypeString, value)
	}
	if value, ok := spu.mutation.PublicPort(); ok {
		_spec.SetField(storageprovider.FieldPublicPort, field.TypeInt32, value)
	}
	if value, ok := spu.mutation.AddedPublicPort(); ok {
		_spec.AddField(storageprovider.FieldPublicPort, field.TypeInt32, value)
	}
	if value, ok := spu.mutation.GrpcPort(); ok {
		_spec.SetField(storageprovider.FieldGrpcPort, field.TypeInt32, value)
	}
	if value, ok := spu.mutation.AddedGrpcPort(); ok {
		_spec.AddField(storageprovider.FieldGrpcPort, field.TypeInt32, value)
	}
	if value, ok := spu.mutation.CreatedTime(); ok {
		_spec.SetField(storageprovider.FieldCreatedTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, spu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{storageprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	spu.mutation.done = true
	return n, nil
}

// StorageProviderUpdateOne is the builder for updating a single StorageProvider entity.
type StorageProviderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StorageProviderMutation
}

// SetAgentID sets the "agent_id" field.
func (spuo *StorageProviderUpdateOne) SetAgentID(u uuid.UUID) *StorageProviderUpdateOne {
	spuo.mutation.SetAgentID(u)
	return spuo
}

// SetStatus sets the "status" field.
func (spuo *StorageProviderUpdateOne) SetStatus(cps consts.StorageProviderStatus) *StorageProviderUpdateOne {
	spuo.mutation.ResetStatus()
	spuo.mutation.SetStatus(cps)
	return spuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (spuo *StorageProviderUpdateOne) SetNillableStatus(cps *consts.StorageProviderStatus) *StorageProviderUpdateOne {
	if cps != nil {
		spuo.SetStatus(*cps)
	}
	return spuo
}

// AddStatus adds cps to the "status" field.
func (spuo *StorageProviderUpdateOne) AddStatus(cps consts.StorageProviderStatus) *StorageProviderUpdateOne {
	spuo.mutation.AddStatus(cps)
	return spuo
}

// SetMasterServer sets the "master_server" field.
func (spuo *StorageProviderUpdateOne) SetMasterServer(s string) *StorageProviderUpdateOne {
	spuo.mutation.SetMasterServer(s)
	return spuo
}

// SetPublicIP sets the "public_ip" field.
func (spuo *StorageProviderUpdateOne) SetPublicIP(s string) *StorageProviderUpdateOne {
	spuo.mutation.SetPublicIP(s)
	return spuo
}

// SetPublicPort sets the "public_port" field.
func (spuo *StorageProviderUpdateOne) SetPublicPort(i int32) *StorageProviderUpdateOne {
	spuo.mutation.ResetPublicPort()
	spuo.mutation.SetPublicPort(i)
	return spuo
}

// AddPublicPort adds i to the "public_port" field.
func (spuo *StorageProviderUpdateOne) AddPublicPort(i int32) *StorageProviderUpdateOne {
	spuo.mutation.AddPublicPort(i)
	return spuo
}

// SetGrpcPort sets the "grpc_port" field.
func (spuo *StorageProviderUpdateOne) SetGrpcPort(i int32) *StorageProviderUpdateOne {
	spuo.mutation.ResetGrpcPort()
	spuo.mutation.SetGrpcPort(i)
	return spuo
}

// AddGrpcPort adds i to the "grpc_port" field.
func (spuo *StorageProviderUpdateOne) AddGrpcPort(i int32) *StorageProviderUpdateOne {
	spuo.mutation.AddGrpcPort(i)
	return spuo
}

// SetCreatedTime sets the "created_time" field.
func (spuo *StorageProviderUpdateOne) SetCreatedTime(t time.Time) *StorageProviderUpdateOne {
	spuo.mutation.SetCreatedTime(t)
	return spuo
}

// Mutation returns the StorageProviderMutation object of the builder.
func (spuo *StorageProviderUpdateOne) Mutation() *StorageProviderMutation {
	return spuo.mutation
}

// Where appends a list predicates to the StorageProviderUpdate builder.
func (spuo *StorageProviderUpdateOne) Where(ps ...predicate.StorageProvider) *StorageProviderUpdateOne {
	spuo.mutation.Where(ps...)
	return spuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (spuo *StorageProviderUpdateOne) Select(field string, fields ...string) *StorageProviderUpdateOne {
	spuo.fields = append([]string{field}, fields...)
	return spuo
}

// Save executes the query and returns the updated StorageProvider entity.
func (spuo *StorageProviderUpdateOne) Save(ctx context.Context) (*StorageProvider, error) {
	return withHooks(ctx, spuo.sqlSave, spuo.mutation, spuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spuo *StorageProviderUpdateOne) SaveX(ctx context.Context) *StorageProvider {
	node, err := spuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (spuo *StorageProviderUpdateOne) Exec(ctx context.Context) error {
	_, err := spuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spuo *StorageProviderUpdateOne) ExecX(ctx context.Context) {
	if err := spuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spuo *StorageProviderUpdateOne) check() error {
	if v, ok := spuo.mutation.MasterServer(); ok {
		if err := storageprovider.MasterServerValidator(v); err != nil {
			return &ValidationError{Name: "master_server", err: fmt.Errorf(`ent: validator failed for field "StorageProvider.master_server": %w`, err)}
		}
	}
	if v, ok := spuo.mutation.PublicIP(); ok {
		if err := storageprovider.PublicIPValidator(v); err != nil {
			return &ValidationError{Name: "public_ip", err: fmt.Errorf(`ent: validator failed for field "StorageProvider.public_ip": %w`, err)}
		}
	}
	return nil
}

func (spuo *StorageProviderUpdateOne) sqlSave(ctx context.Context) (_node *StorageProvider, err error) {
	if err := spuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(storageprovider.Table, storageprovider.Columns, sqlgraph.NewFieldSpec(storageprovider.FieldID, field.TypeUUID))
	id, ok := spuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StorageProvider.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := spuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, storageprovider.FieldID)
		for _, f := range fields {
			if !storageprovider.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != storageprovider.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := spuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spuo.mutation.AgentID(); ok {
		_spec.SetField(storageprovider.FieldAgentID, field.TypeUUID, value)
	}
	if value, ok := spuo.mutation.Status(); ok {
		_spec.SetField(storageprovider.FieldStatus, field.TypeInt, value)
	}
	if value, ok := spuo.mutation.AddedStatus(); ok {
		_spec.AddField(storageprovider.FieldStatus, field.TypeInt, value)
	}
	if value, ok := spuo.mutation.MasterServer(); ok {
		_spec.SetField(storageprovider.FieldMasterServer, field.TypeString, value)
	}
	if value, ok := spuo.mutation.PublicIP(); ok {
		_spec.SetField(storageprovider.FieldPublicIP, field.TypeString, value)
	}
	if value, ok := spuo.mutation.PublicPort(); ok {
		_spec.SetField(storageprovider.FieldPublicPort, field.TypeInt32, value)
	}
	if value, ok := spuo.mutation.AddedPublicPort(); ok {
		_spec.AddField(storageprovider.FieldPublicPort, field.TypeInt32, value)
	}
	if value, ok := spuo.mutation.GrpcPort(); ok {
		_spec.SetField(storageprovider.FieldGrpcPort, field.TypeInt32, value)
	}
	if value, ok := spuo.mutation.AddedGrpcPort(); ok {
		_spec.AddField(storageprovider.FieldGrpcPort, field.TypeInt32, value)
	}
	if value, ok := spuo.mutation.CreatedTime(); ok {
		_spec.SetField(storageprovider.FieldCreatedTime, field.TypeTime, value)
	}
	_node = &StorageProvider{config: spuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, spuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{storageprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	spuo.mutation.done = true
	return _node, nil
}
