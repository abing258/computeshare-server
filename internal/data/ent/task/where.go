// Code generated by ent, DO NOT EDIT.

package task

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldID, id))
}

// AgentID applies equality check predicate on the "agent_id" field. It's identical to AgentIDEQ.
func AgentID(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAgentID, v))
}

// Cmd applies equality check predicate on the "cmd" field. It's identical to CmdEQ.
func Cmd(v int32) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCmd, v))
}

// Params applies equality check predicate on the "params" field. It's identical to ParamsEQ.
func Params(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldParams, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldStatus, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCreateTime, v))
}

// AgentIDEQ applies the EQ predicate on the "agent_id" field.
func AgentIDEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAgentID, v))
}

// AgentIDNEQ applies the NEQ predicate on the "agent_id" field.
func AgentIDNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldAgentID, v))
}

// AgentIDIn applies the In predicate on the "agent_id" field.
func AgentIDIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldAgentID, vs...))
}

// AgentIDNotIn applies the NotIn predicate on the "agent_id" field.
func AgentIDNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldAgentID, vs...))
}

// AgentIDGT applies the GT predicate on the "agent_id" field.
func AgentIDGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldAgentID, v))
}

// AgentIDGTE applies the GTE predicate on the "agent_id" field.
func AgentIDGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldAgentID, v))
}

// AgentIDLT applies the LT predicate on the "agent_id" field.
func AgentIDLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldAgentID, v))
}

// AgentIDLTE applies the LTE predicate on the "agent_id" field.
func AgentIDLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldAgentID, v))
}

// AgentIDContains applies the Contains predicate on the "agent_id" field.
func AgentIDContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldAgentID, v))
}

// AgentIDHasPrefix applies the HasPrefix predicate on the "agent_id" field.
func AgentIDHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldAgentID, v))
}

// AgentIDHasSuffix applies the HasSuffix predicate on the "agent_id" field.
func AgentIDHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldAgentID, v))
}

// AgentIDEqualFold applies the EqualFold predicate on the "agent_id" field.
func AgentIDEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldAgentID, v))
}

// AgentIDContainsFold applies the ContainsFold predicate on the "agent_id" field.
func AgentIDContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldAgentID, v))
}

// CmdEQ applies the EQ predicate on the "cmd" field.
func CmdEQ(v int32) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCmd, v))
}

// CmdNEQ applies the NEQ predicate on the "cmd" field.
func CmdNEQ(v int32) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldCmd, v))
}

// CmdIn applies the In predicate on the "cmd" field.
func CmdIn(vs ...int32) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldCmd, vs...))
}

// CmdNotIn applies the NotIn predicate on the "cmd" field.
func CmdNotIn(vs ...int32) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldCmd, vs...))
}

// CmdGT applies the GT predicate on the "cmd" field.
func CmdGT(v int32) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldCmd, v))
}

// CmdGTE applies the GTE predicate on the "cmd" field.
func CmdGTE(v int32) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldCmd, v))
}

// CmdLT applies the LT predicate on the "cmd" field.
func CmdLT(v int32) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldCmd, v))
}

// CmdLTE applies the LTE predicate on the "cmd" field.
func CmdLTE(v int32) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldCmd, v))
}

// ParamsEQ applies the EQ predicate on the "params" field.
func ParamsEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldParams, v))
}

// ParamsNEQ applies the NEQ predicate on the "params" field.
func ParamsNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldParams, v))
}

// ParamsIn applies the In predicate on the "params" field.
func ParamsIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldParams, vs...))
}

// ParamsNotIn applies the NotIn predicate on the "params" field.
func ParamsNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldParams, vs...))
}

// ParamsGT applies the GT predicate on the "params" field.
func ParamsGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldParams, v))
}

// ParamsGTE applies the GTE predicate on the "params" field.
func ParamsGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldParams, v))
}

// ParamsLT applies the LT predicate on the "params" field.
func ParamsLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldParams, v))
}

// ParamsLTE applies the LTE predicate on the "params" field.
func ParamsLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldParams, v))
}

// ParamsContains applies the Contains predicate on the "params" field.
func ParamsContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldParams, v))
}

// ParamsHasPrefix applies the HasPrefix predicate on the "params" field.
func ParamsHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldParams, v))
}

// ParamsHasSuffix applies the HasSuffix predicate on the "params" field.
func ParamsHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldParams, v))
}

// ParamsEqualFold applies the EqualFold predicate on the "params" field.
func ParamsEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldParams, v))
}

// ParamsContainsFold applies the ContainsFold predicate on the "params" field.
func ParamsContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldParams, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldStatus, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldCreateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Task) predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Task) predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Task) predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		p(s.Not())
	})
}
