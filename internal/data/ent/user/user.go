// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCountryCallCoding holds the string denoting the country_call_coding field in the database.
	FieldCountryCallCoding = "country_call_coding"
	// FieldTelephoneNumber holds the string denoting the telephone_number field in the database.
	FieldTelephoneNumber = "telephone_number"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldCreateDate holds the string denoting the create_date field in the database.
	FieldCreateDate = "create_date"
	// FieldLastLoginDate holds the string denoting the last_login_date field in the database.
	FieldLastLoginDate = "last_login_date"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldIcon holds the string denoting the icon field in the database.
	FieldIcon = "icon"
	// Table holds the table name of the user in the database.
	Table = "users"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCountryCallCoding,
	FieldTelephoneNumber,
	FieldPassword,
	FieldCreateDate,
	FieldLastLoginDate,
	FieldName,
	FieldIcon,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// CountryCallCodingValidator is a validator for the "country_call_coding" field. It is called by the builders before save.
	CountryCallCodingValidator func(string) error
	// TelephoneNumberValidator is a validator for the "telephone_number" field. It is called by the builders before save.
	TelephoneNumberValidator func(string) error
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator func(string) error
	// DefaultCreateDate holds the default value on creation for the "create_date" field.
	DefaultCreateDate func() time.Time
	// DefaultLastLoginDate holds the default value on creation for the "last_login_date" field.
	DefaultLastLoginDate func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCountryCallCoding orders the results by the country_call_coding field.
func ByCountryCallCoding(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCountryCallCoding, opts...).ToFunc()
}

// ByTelephoneNumber orders the results by the telephone_number field.
func ByTelephoneNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTelephoneNumber, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByCreateDate orders the results by the create_date field.
func ByCreateDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateDate, opts...).ToFunc()
}

// ByLastLoginDate orders the results by the last_login_date field.
func ByLastLoginDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastLoginDate, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByIcon orders the results by the icon field.
func ByIcon(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIcon, opts...).ToFunc()
}
