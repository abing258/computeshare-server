---
apiVersion: v1
kind: Service
metadata:
  name: computeshare-server
spec:
  selector:
    app: computeshare-server
  type: ClusterIP
  ports:
    - protocol: TCP
      name: http
      port: 8000
      targetPort: 8000
    - protocol: TCP
      name: grpc
      port: 9000
      targetPort: 9000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: computeshare-server
  labels:
    app: computeshare-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: computeshare-server
  template:
    metadata:
      labels:
        app: computeshare-server
    spec:
      containers:
        - name: computeshare-server
          image: hamstershare/computeshare-server:${PIPELINE_ID}
          imagePullPolicy: Always
          env:
            - name: TZ
              value: Asia/Shanghai
          ports:
            - containerPort: 8080
              name: http
            - containerPort: 9000
              name: grpc
          volumeMounts:
            - mountPath: /data/conf
              name: config
      volumes:
        - name: config
          configMap:
            # Provide the name of the ConfigMap you want to mount.
            name: config
            # An array of keys from the ConfigMap to create as files
            items:
              - key: "config.yaml"
                path: "config.yaml"
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
  name: computeshare-server
spec:
  ingressClassName: nginx
  rules:
    - host: api.computeshare.newtouch.com
      http:
        paths:
          - backend:
              service:
                name: computeshare-server
                port:
                  number: 8000
            path: /
            pathType: Prefix
  tls:
    - hosts:
        - api.computeshare.newtouch.com
      secretName: computeshare-server-tls
---

apiVersion: v1
data:
  client.yaml: "server:\n  http:\n    addr: 0.0.0.0:8000\n    timeout: 20s\n  grpc:\n
    \   addr: 0.0.0.0:9000\n    timeout: 10s\n  p2p:\n    port: 4001\n    swarm_key:
    |\n      /key/swarm/psk/1.0.0/\n      /base16/\n      2108249f85354ed11ecf999a4500e9b616f71516b6c222ce630d14e434ef5562\n
    \   bootstraps:\n      - /ip4/61.172.179.6/tcp/32002/p2p/12D3KooWN89csfSa1Pa2u3HmanFe4Cx12qvuPkPd2uLcX7whMyZm\ndata:\n
    \ database:\n    driver: mysql\n    source: root:Aline123456@tcp(mysql.hamster:3306)/computeshare_client?charset=utf8mb4&parseTime=true\n
    \ redis:\n    addr: redis:6379\n    read_timeout: 0.2s\n    write_timeout: 0.2s\n
    \ ipfs:\n    url: kubo:32001  \n  computer_power_api: \"http://computeshare-server:8000\"\n"
  config.yaml: |
    server:
      http:
        addr: 0.0.0.0:8000
        timeout: 10s
      grpc:
        addr: 0.0.0.0:9000
        timeout: 10s
      p2p:
        port: 4002
        swarm_key: |
          /key/swarm/psk/1.0.0/
          /base16/
          55158d9b6b7e5a8e41aa8b34dd057ff1880e38348613d27ae194ad7c5b9670d7
        bootstraps:
          - "/ip4/34.139.126.73/tcp/4001/p2p/12D3KooWRsKNAgbGaQkVbbzg5xEw2FtvPRF7MiYtmRvFPYegNVnu"
    data:
      database:
        driver: mysql
        source: root:Aline123456@tcp(mysql:3306)/computeshare?charset=utf8&parseTime=true
      redis:
        addr: redis:6379
        dial_timeout: 1s
        read_timeout: 0.4s
        write_timeout: 0.6s
      ipfs:
        url: 127.0.0.1:5001
      docker:
        host: tcp://172.16.0.8:2375
    auth:
      service_key: some-secret-key
      api_key: some-secret-key-for-forntend
    dispose:
      s3:
        target_docker_host: tcp://172.16.0.8:2375
        target_docker_container_name: seaweedfs-master-1
        endpoint: http://computeshare.newtouch.com:8333
        region: shanghai
        s3_url_prefix: s3://
        url_prefix: http://computeshare.newtouch.com:8333/
      
      kind: ConfigMap
metadata:
  name: config

---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: mysql
  name: mysql
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: mysql
    spec:
      containers:
        - env:
            - name: MYSQL_ROOT_PASSWORD
              value: Aline123456
            - name: TZ
              value: Asia/Shanghai
          image: mysql:8.0.19
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
                - mysqladmin
                - -uroot
                - -p${MYSQL_ROOT_PASSWORD}
                - ping
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: mysql
          ports:
            - containerPort: 3306
              protocol: TCP
          readinessProbe:
            exec:
              command:
                - mysqladmin
                - -uroot
                - -p${MYSQL_ROOT_PASSWORD}
                - ping
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: "1"
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: data
            - mountPath: /etc/mysql/conf.d/my.cnf
              name: config
              subPath: my.cnf
            - mountPath: /etc/localtime
              name: localtime
              readOnly: true
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: mysql
        - configMap:
            defaultMode: 420
            name: mysql-config
          name: config
        - hostPath:
            path: /etc/localtime
            type: File
          name: localtime

---

apiVersion: v1
kind: Service
metadata:
  labels:
    app: mysql
  name: mysql
spec:
  ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: 3306
      nodePort: 31252
  selector:
    app: mysql
  sessionAffinity: None
  type: NodePort

---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: redis
  name: redis
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: redis
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: redis
    spec:
      containers:
        - image: redis:7
          imagePullPolicy: IfNotPresent
          name: redis
          ports:
            - containerPort: 6379
              protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30

---

apiVersion: v1
kind: Service
metadata:
  labels:
    app: redis
  name: redis
spec:
  ports:
    - port: 6379
      protocol: TCP
      targetPort: 6379
  selector:
    app: redis
  sessionAffinity: None
  type: ClusterIP
